#pragma checksum "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5c9560d142442f9e797967d58032692b41f0b8bb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TripleCheck_Record), @"mvc.1.0.view", @"/Views/TripleCheck/Record.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\_ViewImports.cshtml"
using MicrosoftGraphAspNetCoreConnectSample;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5c9560d142442f9e797967d58032692b41f0b8bb", @"/Views/TripleCheck/Record.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3ad82abc64eaf4b8b182bed96ff763a59d7fe17", @"/Views/_ViewImports.cshtml")]
    public class Views_TripleCheck_Record : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery-1.12.4.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.inputmask.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap-maxlength.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "TripleCheck", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DeleteReport", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/questionmark.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("height:15px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
 if (!User.Identity.IsAuthenticated)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("<br />\n<p>Choose <b>Sign in</b> at the top of the page.</p>\n");
#nullable restore
#line 5 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\n\n");
#nullable restore
#line 8 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
 if (User.Identity.IsAuthenticated)
{
    if (ViewData["checkauth"].ToString() == "0")
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("<p>You are not authorized to view this page.</p>\n");
#nullable restore
#line 13 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
    }

    if (ViewData["checkauth"].ToString() == "1")
    {


#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
Write(Html.Raw(ViewData["sidebar"]));

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb10009", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb11047", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb12243", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb13281", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb14477", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb15515", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb16553", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb17591", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\" integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\"\n      crossorigin=\"anonymous\">\n");
            WriteLiteral("<script type=\"text/javascript\">\n    $(window).resize(function () {\n        $(\"#shownotes\").dialog(\"option\", \"position\", { my: \"center\", at: \"center\", of: window });\n    });\n\n    jQuery(document).ready(function ($) {\n        var passdata = \'");
#nullable restore
#line 37 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                   Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\'\n\n        if (passdata != \'\') {\n            var rowdata = \'");
#nullable restore
#line 40 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'.split('*^^*')

            var arrayLength = rowdata.length;
            for (var i = 0; i < arrayLength; i++) {
                var indvdata = rowdata[i].split('$||$')

                try {
                    if (indvdata[2] == 'checkbox') {
                        document.getElementById('cb' + indvdata[0]).checked = true
                    }

                    if (indvdata[2] == 'textbox') {
                        document.getElementById('txt' + indvdata[0]).value = indvdata[1]
                    }

                    if (indvdata[2] == 'dropdown') {
                        var desiredValue = indvdata[1]
                        var el = document.getElementById(""dd"" + indvdata[0]);
                        try {
                            for (var e = 0; e < el.options.length; e++) {
                                if (el.options[e].text == desiredValue) {
                                    el.selectedIndex = e;
                                }
                            }
                     ");
            WriteLiteral(@"   } catch { }
                    }

                    var datetime = ""<b>Confirmed:</b> "" + indvdata[3] + ""<br/>""
                    var user = ""<b>Confirmed By:</b> "" + indvdata[4]

                    document.getElementById('td' + indvdata[0] + 'Confirm').innerHTML = datetime + user;

                    document.getElementById('tr' + indvdata[0]).classList.remove('trerror')
                    document.getElementById('td' + indvdata[0]).classList.remove('tderror')
                } catch { }




            }
        }


        checkqualifying()
        addassessment(document.getElementById('ddAddAssessment'))
        paymenttype(document.getElementById('ddPaymentType'))
        dischargeloc(document.getElementById('ddDischargeLoc'), 'no')
        dcyesno(document.getElementById('ddDrivenDischarge'), 'no')
        patientleave(document.getElementById('ddBOPatient'), 'no')
        mdsadddays('no')
        DCNOMNC('no')

        consentcheck()
        checkinitial()
        check1st()
        check2st");
            WriteLiteral(@"()
        check3st()
        check4st()
        check5st()

        checkevaldate('PT')
        checkevalsign('PT')
        checkclardate('PT')
        checkClarDateSigned('PT')

        checkClarDate1('PT')
        checkClarDate1Signed('PT')

        checkClarDate2('PT')
        checkClarDate2Signed('PT')

        checkClarDate3('PT')
        checkClarDate3Signed('PT')


        checkevaldate('PT2')
        checkevalsign('PT2')
        checkclardate('PT2')
        checkClarDateSigned('PT2')

        checkClarDate1('PT2')
        checkClarDate1Signed('PT2')

        checkClarDate2('PT2')
        checkClarDate2Signed('PT2')

        checkClarDate3('PT2')
        checkClarDate3Signed('PT2')

        checkevaldate('PT3')
        checkevalsign('PT3')
        checkclardate('PT3')
        checkClarDateSigned('PT3')

        checkClarDate1('PT3')
        checkClarDate1Signed('PT3')

        checkClarDate2('PT3')
        checkClarDate2Signed('PT3')

        checkClarDate3('PT3')
        checkClarDate3Signed('PT3')

");
            WriteLiteral(@"
        checkevaldate('OT')
        checkevalsign('OT')
        checkclardate('OT')
        checkClarDateSigned('OT')

        checkClarDate1('OT')
        checkClarDate1Signed('OT')

        checkClarDate2('OT')
        checkClarDate2Signed('OT')

        checkClarDate3('OT')
        checkClarDate3Signed('OT')

        checkevaldate('OT2')
        checkevalsign('OT2')
        checkclardate('OT2')
        checkClarDateSigned('OT2')

        checkClarDate1('OT2')
        checkClarDate1Signed('OT2')

        checkClarDate2('OT2')
        checkClarDate2Signed('OT2')

        checkClarDate3('OT2')
        checkClarDate3Signed('OT2')

        checkevaldate('OT3')
        checkevalsign('OT3')
        checkclardate('OT3')
        checkClarDateSigned('OT3')

        checkClarDate1('OT3')
        checkClarDate1Signed('OT3')

        checkClarDate2('OT3')
        checkClarDate2Signed('OT3')

        checkClarDate3('OT3')
        checkClarDate3Signed('OT3')


        checkevaldate('SLP')
        checkevalsign('SLP')
  ");
            WriteLiteral(@"      checkclardate('SLP')
        checkClarDateSigned('SLP')

        checkClarDate1('SLP')
        checkClarDate1Signed('SLP')

        checkClarDate2('SLP')
        checkClarDate2Signed('SLP')

        checkClarDate3('SLP')
        checkClarDate3Signed('SLP')

        checkevaldate('SLP2')
        checkevalsign('SLP2')
        checkclardate('SLP2')
        checkClarDateSigned('SLP2')

        checkClarDate1('SLP2')
        checkClarDate1Signed('SLP2')

        checkClarDate2('SLP2')
        checkClarDate2Signed('SLP2')

        checkClarDate3('SLP2')
        checkClarDate3Signed('SLP2')

        checkevaldate('SLP3')
        checkevalsign('SLP3')
        checkclardate('SLP3')
        checkClarDateSigned('SLP3')

        checkClarDate1('SLP3')
        checkClarDate1Signed('SLP3')

        checkClarDate2('SLP3')
        checkClarDate2Signed('SLP3')

        checkClarDate3('SLP3')
        checkClarDate3Signed('SLP3')

        checktherapyadds()

        checkcomplete()

        $('.TableClick tr').click(funct");
            WriteLiteral("ion (event) {\n            if (event.target.type !== \'checkbox\') {\n                $(\':checkbox\', this).trigger(\'click\');\n            }\n        });\n    });\n\n\n</script>\n");
            WriteLiteral("<script>\n    $(window).load(function () {\n\n        var passid = \'");
#nullable restore
#line 246 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                 Write(Html.Raw(ViewData["passid"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'
        document.getElementById(""noteslink"").href = '/api/pdfcreator?report=notes&&passid=' + passid

        $("".txtdate"").inputmask(""99/99/9999"", { 'placeholder': 'MM/DD/YYYY' });

        $(""#txtMDSUnbillDays"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });



    });


    function hasClass(element, cls) {
        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    }

    $(function () {
        $("".txtdate"").datepicker();
    });
</script>
");
            WriteLiteral(@"<style>
    [data-tiny-editor] {
        height: 200px;
    }

    .ui-dialog-titlebar-close {
        visibility: hidden !important;
        display: none !important;
    }

    .txtbox {
        background-color: #fff;
        border: 1px solid #aaa;
        border-radius: 4px;
        height: 28px;
        width: 100% !important;
    }

    .txtlabel {
        margin-top: 15px;
    }

    .validation {
        color: red;
    }

    .dropzone {
        border: 1px solid #aaa !important;
        border-radius: 5px !important;
        width: 280px;
        margin-top: 15px;
    }

    .imgdiv {
        border: 1px solid #aaa;
        border-radius: 5px;
        margin-top: 10px;
    }

        .imgdiv table {
            width: 280px;
            table-layout: fixed;
        }

    .imgdivtd {
        width: 170px;
        word-wrap: break-word;
        padding-right: 10px
    }

    .yesno {
        border: 1px solid #aaa;
        background-color: white;
        padding: 5px;
        transition: 1s;
      ");
            WriteLiteral(@"  cursor: pointer;
        width: 50px;
        border-radius: 5px;
        text-align: center;
    }


    textarea {
        max-width: 600px !important;
        height: 100px;
    }

    .formheader {
        max-width: 600px;
        background-color: #aaa;
        padding: 5px;
        font-weight: bold;
        margin-top: 20px;
    }

    .cbtext {
        cursor: default
    }

    .content table {
        border-collapse: collapse;
        width: 100%;
        border: 0px;
    }

    .content th, .content td {
        text-align: left;
        padding: 9px;
        height: 50px;
    }



        .content td:first-child {
            width: 280px;
        }


    .content tr {
        border-bottom: 1px solid #f2f2f2;
    }

    .collapsible {
        background-color: #337ab7;
        color: black;
        font-weight: bold;
        cursor: pointer;
        padding: 10px;
        width: 100%;
        text-align: left;
        outline: none;
        font-size: 15px;
        border: 0px;
    }



    .");
            WriteLiteral(@"content {
        padding: 0 18px;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
        width: 100%;
        border: 1px solid black;
    }

    .addaddition {
        display: none;
        visibility: hidden;
    }

    .paytype {
        display: none;
        visibility: hidden;
    }

    .dischargetype {
        display: none;
        visibility: hidden;
    }

    .dcyesnotype {
        display: none;
        visibility: hidden;
    }

    .booverride {
        display: none;
        visibility: hidden;
    }

    .dcoverride {
        display: none;
        visibility: hidden;
    }

    .mroverride {
        display: none;
        visibility: hidden;
    }

    .therapyvisable {
        display: none;
        visibility: hidden;
    }

    .tooltipcss {
        position: relative;
        display: inline-block;
        padding: 1px;
    }

        .tooltipcss .tooltipcsstext {
            visibility: hidden;
            width: 200px;
            backg");
            WriteLiteral(@"round-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            /* Position the tooltip */
            position: absolute;
            z-index: 1;
            bottom: 100%;
            left: 50%;
            margin-left: -60px;
        }

        .tooltipcss:hover .tooltipcsstext {
            visibility: visible;
        }

    .tooltipcssbtm {
        position: relative;
        display: inline-block;
        padding: 1px;
    }

        .tooltipcssbtm .tooltipcsstextbtm {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            /* Position the tooltip */
            position: absolute;
            z-index: 1;
            top: 100%;
            left: 50%;
            margin-left: -60px;
        }

        .tooltipcssbtm:hover .tooltipcsstextbtm {
            visibil");
            WriteLiteral(@"ity: visible;
        }

    .tderror {
        background-color: red;
    }

    .tdwarn {
        background-color: yellow;
    }


    .completed {
        color: green;
    }

    .notcompleted {
        color: red;
    }

    .confirmed {
        font-size: 10px;
    }
</style>
<a href=""/TripleCheck"" id=""homeclick"">Return to Home</a>
<div style=""height:10px;""></div>
<div style=""font-size:30px""><b>");
#nullable restore
#line 510 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                          Write(Html.Raw(ViewData["patientname"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\n<div style=\"font-size:25px\"><b>");
#nullable restore
#line 511 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                          Write(Html.Raw(ViewData["patientmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\n<div style=\"height:10px;\"></div>\n<div><input type=\"button\" class=\"btn btn-primary\" value=\"Delete Record\" onclick=\"showdel()\" /></div>\n<hr />\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb31651", async() => {
                WriteLiteral("\n    <input type=\"text\" id=\"txtRecID\" name=\"txtRecID\" class=\"hidden\" />\n    <input type=\"button\" id=\"delreport\" class=\"hidden\" onclick=\"submit()\" />\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            WriteLiteral("<input type=\"text\" id=\"txtUserName\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 12325, "\"", 12364, 1);
#nullable restore
#line 523 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12333, Html.Raw(ViewData["username"]), 12333, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n<input type=\"text\" id=\"txtID\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 12413, "\"", 12450, 1);
#nullable restore
#line 524 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12421, Html.Raw(ViewData["passid"]), 12421, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n<input type=\"text\" id=\"txtINTMonth\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 12505, "\"", 12544, 1);
#nullable restore
#line 525 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12513, Html.Raw(ViewData["intmonth"]), 12513, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n");
            WriteLiteral("<div class=\"row\">\n    <div class=\"col-md-3\">\n        <div class=\"txtlabel\">Start date of skilled stay</div>\n        <div><input type=\"text\" id=\"txtStartDate\" class=\"txtbox\" name=\"txtStartDate\" disabled=\"disabled\"");
            BeginWriteAttribute("value", " value=\"", 12762, "\"", 12801, 1);
#nullable restore
#line 530 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12770, Html.Raw(ViewData["staydate"]), 12770, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" onkeyup=\"startdate()\" onchange=\"startdate()\" /></div>\n        <div id=\"ValidationStartDate\" class=\"hidden\">Please enter a valid date.</div>\n\n        <div class=\"txtlabel\">Additional assessment for the same stay?</div>\n        <div>\n            ");
#nullable restore
#line 535 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["AdditionalAssessment"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n        </div>\n\n        <div class=\"txtlabel\">Payment Type</div>\n        <div>\n            ");
#nullable restore
#line 540 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["PaymentType"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n        </div>\n    </div>\n    <div class=\"col-md-3\">\n        <div class=\"txtlabel\" style=\"border-bottom: 1px solid #aaa; font-weight:bold\">Notes</div>\n        <div style=\"overflow-y:auto; height:100px; margin-bottom:10px;\" id=\"divNotes\">\n            ");
#nullable restore
#line 546 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["patientnotes"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div>
            <input type=""button"" class=""btn btn-primary"" value=""Edit Notes"" onclick=""shownotes()"" />
            <a href=""https://localhost:44334/api/pdfcreator?report=notes&&passid=4888"" id=""noteslink"" target=""_blank""><input type=""button"" class=""btn btn-primary"" value=""Print Notes"" /></a>
        </div>
    </div>
    <div class=""col-md-3"">
        <div class=""txtlabel"" style=""border-bottom: 1px solid #aaa; font-weight:bold"">IDT Team Members Present</div>
        <div style=""overflow-y:auto; height:100px; margin-bottom:10px;"" id=""divTeam"">
            ");
#nullable restore
#line 556 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["teamdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n        </div>\n        <div><input type=\"button\" class=\"btn btn-primary\" value=\"Edit Team\" onclick=\"showteam()\" /></div>\n    </div>\n</div>\n");
            WriteLiteral("<br />\n<br />\n");
            WriteLiteral(@"<button class=""collapsible"" style=""background-color:lightblue"" id=""btnBusinessOffice"">
    <table style=""width:100%"">
        <tr>
            <td>Business Office</td>
            <td style=""text-align:right; padding-right:50px;"" id=""BOComplete""></td>
        </tr>
    </table>
</button>
<div class=""content"" style=""border: 1px solid black"" id=""frmBO"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOTypeOfBill"">
            <td id=""tdBOTypeOfBill"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOTypeOfBill"" onchange=""ddcheck('BOTypeOfBill')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb39095", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb40031", async() => {
                WriteLiteral("210");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb41005", async() => {
                WriteLiteral("211");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb41979", async() => {
                WriteLiteral("212");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb42953", async() => {
                WriteLiteral("213");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb43927", async() => {
                WriteLiteral("214");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb44901", async() => {
                WriteLiteral("21Q");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb45875", async() => {
                WriteLiteral("217");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Type of bill</td>
            <td id=""tdBOTypeOfBillConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBODOB"">
            <td id=""tdBODOB"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BODOB')"" id=""cbBODOB"" />
            </td>
            <td>DOB <b>");
#nullable restore
#line 597 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                  Write(Html.Raw(ViewData["patientdob"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
            <td id=""tdBODOBConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOSex"">
            <td id=""tdBOSex"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOSex')"" id=""cbBOSex"" />
            </td>
            <td>Sex <b>");
#nullable restore
#line 604 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                  Write(Html.Raw(ViewData["patientgender"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
            <td id=""tdBOSexConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOHIC"">
            <td id=""tdBOHIC"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOHIC')"" id=""cbBOHIC"" />
            </td>
            <td>HIC Number</td>
            <td id=""tdBOHICConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOMD"">
            <td id=""tdBOMD"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOMD')"" id=""cbBOMD"" />
            </td>
            <td>MD</td>
            <td id=""tdBOMDConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDates"">
            <td id=""tdBOServiceDates"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDates"" onchange=""datecheck('BOServiceDates')"" onkeyup=""datecheck('BOServiceDates')"" />
         ");
            WriteLiteral(@"   </td>
            <td>Service Dates From</td>
            <td id=""tdBOServiceDatesConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDatesTo"">
            <td id=""tdBOServiceDatesTo"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDatesTo"" onchange=""datecheck('BOServiceDatesTo')"" onkeyup=""datecheck('BOServiceDatesTo')"" />
            </td>
            <td>Service Dates To</td>
            <td id=""tdBOServiceDatesToConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror"" id=""trBOStayFrom"">
            <td id=""tdBOStayFrom"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayFrom"" onchange=""checkqualifying(); datecheck('BOStayFrom')"" onkeyup=""checkqualifying(); datecheck('BOStayFrom')"" /></td>
            <td>
                Qualifying Stay Dates From
                <div class=""tooltipcss"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb50309", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">3 night stay required.</span>
                </div>
            </td>
            <td id=""tdBOStayFromConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror"" id=""trBOStayTo"">
            <td id=""tdBOStayTo"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayTo"" onchange=""checkqualifying(); datecheck('BOStayTo')"" onkeyup=""checkqualifying(); datecheck('BOStayTo')"" /></td>
            <td>Qualifying Stay Dates To</td>
            <td id=""tdBOStayToConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror booverride"" id=""trBOStayReason"">
            <td id=""tdBOStayReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtBOStayReason"" onkeyup=""textcheck('BOStayReason')"" />
            </td>
            <td>Reason why 3 day hospital stay not required</td>
            <td id=""tdBOStayReasonConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pa");
            WriteLiteral(@"y pdpm hmoa trerror"" id=""trBOBenefit"">
            <td id=""tdBOBenefit"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOBenefit')"" id=""cbBOBenefit"" />
            </td>
            <td>Benefit Days Available Verified</td>
            <td id=""tdBOBenefitConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOCoinsurance"">
            <td id=""tdBOCoinsurance"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOCoinsurance')"" id=""cbBOCoinsurance"" />
            </td>
            <td>Coinsurance Days</td>
            <td id=""tdBOCoinsuranceConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOMedicare"">
            <td id=""tdBOMedicare"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOMedicare')"" id=""cbBOMedicare"" />
            </td>
            <td>Verify Medicare Secondary Payor Status</td>
            <td id=""tdBOMedicareConfirm"" class=""c");
            WriteLiteral(@"onfirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOOnset"">
            <td id=""tdBOOnset"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOOnset')"" id=""cbBOOnset"" />
            </td>
            <td>
                Therapy Onset Date
                <div class=""tooltipcss"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb54004", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">Verify Occurrence 11 is onset of 1st condition requiring thearpy</span>
                </div>
            </td>
            <td id=""tdBOOnsetConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOStart"">
            <td id=""tdBOStart"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOStart')"" id=""cbBOStart"" />
            </td>
            <td>
                Therapy Start of Care
                <div class=""tooltipcss"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb55703", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">Verify Occurrence codes are present and have correct SOC dates 35(PT) 44(OT) 45(ST)</span>
                </div>
            </td>
            <td id=""tdBOStartConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOVerify"">
            <td id=""tdBOVerify"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOVerify')"" id=""cbBOVerify"" />
            </td>
            <td>Verify Therapy HCPC code, modifier (GP, GO, GN) and date of service</td>
            <td id=""tdBOVerifyConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOModifiers"">
            <td id=""tdBOModifiers"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOModifiers')"" id=""cbBOModifiers"" />
            </td>
            <td>Therapy modifiers are present as needed (KX, 59, CO, CQ)</td>
            <td id=""tdBOModifiersConfirm"" class=""confirmed""></td>
        </tr>
    ");
            WriteLiteral(@"    <tr class=""pay pdpm hmoa trerror"" style=""border:none"" id=""trBOPatient"">
            <td id=""tdBOPatient"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOPatient"" onchange=""patientleave(this, 'save'); mdsadddays('save')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb58191", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb59127", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb60100", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatientConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>
");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnDCInfo"">
    <table style=""width:100%"">
        <tr>
            <td>DC Information</td>
            <td style=""text-align:right; padding-right:50px;"" id=""DCComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" id=""DCContent"" style=""border: 1px solid black"">
    <div style=""height:20px""></div>
    <table class=""TableClick"">


        <tr class=""yes pay pdpm hmoa discharge home hospital trerror"" id=""trDCDischarge"">
            <td id=""tdDCDischarge"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCDischarge"" onchange=""datecheck('DCDischarge')"" onkeyup=""datecheck('DCDischarge')"" />
            </td>
            <td>Discharge Date</td>
            <td id=""tdDCDischargeConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa levels trerror"" id=""trDischargeLoc"">
            <td id=""tdDischargeLoc"" class=""tderror"">
                <select class=""txtbox"" on");
            WriteLiteral("change=\"dischargeloc(this, \'save\')\" id=\"ddDischargeLoc\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb62540", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb63476", async() => {
                WriteLiteral("01 - Home");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb64456", async() => {
                WriteLiteral("06 - Home w/HH");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb65441", async() => {
                WriteLiteral("02 - Hospital");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb66425", async() => {
                WriteLiteral("04 - LTC");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb67404", async() => {
                WriteLiteral("07 - AMA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb68383", async() => {
                WriteLiteral("20 - Expired");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb69366", async() => {
                WriteLiteral("Other");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb70342", async() => {
                WriteLiteral("N/A - Continued Stay");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Discharge Location</td>
            <td id=""tdDischargeLocConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa discharge home trerror"" id=""trDrivenDischarge"">
            <td id=""tdDrivenDischarge"" class=""tderror"">
                <select class=""txtbox"" onchange=""dcyesno(this, 'save')"" id=""ddDrivenDischarge"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb71755", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb72691", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb73664", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Patient Driven Discharge, NO LCD</td>
            <td id=""tdDrivenDischargeConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa levels mcb discharge home ltc dcyes trerror"" id=""trDCLastDay"">
            <td id=""tdDCLastDay"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCLastDay"" onchange=""DCNOMNC('save'); checkallmr()"" onkeyup=""DCNOMNC('save'); checkallmr()"" />
            </td>
            <td>Last Covered Day (LCD)</td>
            <td id=""tdDCLastDayConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa mcb discharge home ltc dcyes trerror"" id=""trDCNOMNC"">
            <td id=""tdDCNOMNC"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCNOMNC"" onchange=""DCNOMNC('save')"" onkeyup=""DCNOMNC('save')"" />
            </td>
            <td>
                NOMNC Issued on
                <div class=""tooltipcss"">
          ");
            WriteLiteral("          ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb75728", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">3 day notice required.</span>
                </div>
            </td>
            <td id=""tdDCNOMNCConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" id=""trDOOR"">
            <td id=""tdDOOR"" class=""tderror"">
                <input id=""txtDOOR"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""DCOverride()"" />
            </td>
            <td>Reason not completed timely</td>
            <td id=""tdDOORConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa discharge ltc trerror"" style=""border:none"" id=""trDCABN"">
            <td class=""tderror"" id=""tdDCABN"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCABN"" onchange=""datecheck('DCABN')"" onkeyup=""datecheck('DCABN')"" />
            </td>
            <td>ABN Issued On</td>
            <td id=""tdDCABNConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>
");
            WriteLiteral(@"<button class=""collapsible"" style=""background-color:lightblue"" id=""btnMDS"">
    <table style=""width:100%"">
        <tr>
            <td>MDS</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MDSComplete""></td>
        </tr>
    </table>
</button>
<div class=""content"" style=""border: 1px solid black"" id=""MDSContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""pay pdpm hmoa levels mcb trerror"" id=""trMDSPayment"">
            <td id=""tdMDSPayment"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment"" onchange=""ddcheck('MDSPayment')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb78609", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb79545", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb80518", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>\n                Payment Information on this line Affects Billing Next Month\n                <div class=\"tooltipcssbtm\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb81680", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Select Yes, if the assessment on this line or this particular payment method (such as levels)
                        will impact billing next month. If the resident has multiple assessments only select yes to the assessment
                        that will impact billing the next month. If multiple Yes responses for the same resident occur, the next month will
                        not generate correctly.<br /><br />Select No if the assessment or patient will not impact billing the following month.
                    </span>
                </div>
            </td>
            <td id=""tdMDSPaymentConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARD"">
            <td id=""tdMDSARD"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD"" onchange=""datecheck('MDSARD')"" onkeyup=""datecheck('MDSARD')"" />
            </td>
         ");
            WriteLiteral(@"   <td>ARD</td>
            <td id=""tdMDSARDConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay hmoa trerror"" id=""trMDSAssessmentType"">
            <td id=""tdMDSAssessmentType"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType"" onchange=""ddcheck('MDSAssessmentType')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb84232", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb85168", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb86144", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb87118", async() => {
                WriteLiteral("14 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb88095", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb89072", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb90049", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb91026", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb92000", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb92974", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm trerror"" id=""trMDSAssessmentTypePDPM"">
            <td id=""tdMDSAssessmentTypePDPM"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM"" onchange=""ddcheck('MDSAssessmentTypePDPM')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb94376", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb95312", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb96288", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypePDPMConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSHIPPS"">
            <td id=""tdMDSHIPPS"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS"" onkeyup=""textcheck('MDSHIPPS')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPSConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSUnbillDays"">
            <td id=""tdMDSUnbillDays"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(); mdsadddays('save')"" />
            </td>
            <td>Number of Unbillable Days due to Interrupted Stay/Skip days</td>
            <td id=""tdMDSUnbillDaysConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARDStart"">
 ");
            WriteLiteral(@"           <td id=""tdMDSARDStart"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart"" onchange=""datecheck('MDSARDStart'); mdsadddays('save')"" onkeyup=""datecheck('MDSARDStart'); mdsadddays('save')"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStartConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARDEnd"">
            <td id=""tdMDSARDEnd"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd"" onchange=""datecheck('MDSARDEnd'); mdsadddays('save')"" onkeyup=""datecheck('MDSARDEnd'); mdsadddays('save')"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEndConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSNumDays"">
            <td id=""tdMDSNumDays"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSNumDays");
            WriteLiteral(@""" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDaysConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSTransmitted"">
            <td id=""tdMDSTransmitted"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted"" onchange=""cbcheck('MDSTransmitted')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmittedConfirm"" class=""confirmed""></td>
        </tr>

");
            WriteLiteral(@"
        <tr class=""pay pdpm hmoa trerror"" id=""trMDSPTOT"">
            <td id=""tdMDSPTOT"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT"" onchange=""cbcheck('MDSPTOT')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSSLP"">
            <td id=""tdMDSSLP"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP"" onchange=""cbcheck('MDSSLP')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
            <td id=""tdMDSSLPConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSNTA"">
            <td id=""tdMDSNTA"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA"" onchange=""cbcheck('MDSNTA')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
");
            WriteLiteral(@"            <td id=""tdMDSNTAConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" style=""border:none"" id=""trMDSNursing"">
            <td id=""tdMDSNursing"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing"" onchange=""cbcheck('MDSNursing')"" />
            </td>
            <td>ARD Look-back and Care Plan documentation supports Nursing CMG </td>
            <td id=""tdMDSNursingConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>
");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMDSTherapy"">
    <table style=""width:100%"">
        <tr>
            <td>MDS/Therapy</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MDSTherapyComplete""></td>
        </tr>
    </table>
</button>
");
            WriteLiteral(@"<div class=""content yes"" style=""border: 1px solid black"" id=""MDSTherapyContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDST5Day"">
            <td id=""tdMDST5Day"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDST5Day"" onchange=""cbcheck('MDST5Day')"" />
            </td>
            <td>5-Day PPS - Total Days, Minutes, and Distinct Days verified  </td>
            <td id=""tdMDST5DayConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTDischarge"">
            <td id=""tdMDSTDischarge"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTDischarge"" onchange=""cbcheck('MDSTDischarge')"" />
            </td>
            <td>Discharge PPS MDS - Total Days, Minutes, and Distinct Days verified  </td>
            <td id=""tdMDSTDischargeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTST"">
           ");
            WriteLiteral(" <td id=\"tdMDSTST\" class=\"tderror\">\n                <select class=\"txtbox\" id=\"ddMDSTST\" onchange=\"ddcheck(\'MDSTST\'); nowarning(\'MDSTST\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb103379", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb104316", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb105291", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>ST Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTSTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTOT"">
            <td id=""tdMDSTOT"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTOT"" onchange=""ddcheck('MDSTOT'); nowarning('MDSTOT')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb106691", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb107628", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb108603", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>OT Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTOTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" style=""border:none"" id=""trMDSTPT"">
            <td id=""tdMDSTPT"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTPT"" onchange=""ddcheck('MDSTPT'); nowarning('MDSTPT')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb110025", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb110962", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb111937", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>PT Percent (%) of individual Minutes during stay > 75%</td>\n            <td id=\"tdMDSTPTConfirm\" class=\"confirmed\"></td>\n        </tr>\n    </table>\n    <div style=\"height:20px\"></div>\n</div>\n");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMedicalRecords"">
    <table style=""width:100%"">
        <tr>
            <td>Medical Records</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MedicalRecordsComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""MedicalRecordsContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"" id=""tblMR"">

        <tr class=""yes pay pdpm hmoa levels trerror"" id=""trMRConsent"">
            <td id=""tdMRConsent"" class=""tderror"">
                <input type=""text"" id=""txtMRConsent"" class=""txtbox txtdate"" onchange=""datecheck('MRConsent'); consentcheck()"" onkeyup=""datecheck('MRConsent'); consentcheck()"" />
            </td>
            <td>
                Date Consent to Treat Obtained
                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb114154", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Should be obtained the same day as admissions
                    </span>
                </div>
            </td>
            <td id=""tdMRConsentConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa"" id=""trMRInitialDue"">
            <td id=""tdMRInitialDue""");
            BeginWriteAttribute("class", " class=\"", 39100, "\"", 39108, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMRInitialDueCert\"");
            BeginWriteAttribute("value", " value=\"", 39158, "\"", 39200, 1);
#nullable restore
#line 1105 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 39166, Html.Raw(ViewData["InitialCert"]), 39166, 34, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMRInitialDue"" onchange=""datechecknoerror('MRInitialDue'); checkinitial()"" onkeyup=""datechecknoerror('MRInitialDue'); checkinitial()"" />
            </td>
            <td>Initial Cert - Date Completed (<b>Due no later than ");
#nullable restore
#line 1108 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                                               Write(Html.Raw(ViewData["InitialCert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b>)</td>
            <td id=""tdMRInitialDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""trerror"" id=""trMRInitialReason"">
            <td id=""tdMRInitialReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMRInitialReason"" onchange=""textcheck('MRInitialReason')"" onkeyup=""textcheck('MRInitialReason')"" />
            </td>
            <td>Remedy for no Initial Cert</td>
            <td id=""tdMRInitialReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMRInitialYesNo"">
            <td id=""tdMRInitialYesNo"" class=""tderror"">
                <select id=""ddMRInitialYesNo"" class=""txtbox"" onchange=""ddcheck('MRInitialYesNo'); nowarning('MRInitialYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb117753", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb118690", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb119665", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMRInitialYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR1ReCertDue"">
            <td id=""tdMR1ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 40699, "\"", 40707, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR1ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 40757, "\"", 40794, 1);
#nullable restore
#line 1135 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 40765, Html.Raw(ViewData["ReCert"]), 40765, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR1ReCertDue"" onchange=""datechecknoerror('MR1ReCertDue'); check1st()"" onkeyup=""datechecknoerror('MR1ReCertDue'); check1st()"" />
            </td>
            <td>1st Re Cert - Date Completed (<b>Due no later than ");
#nullable restore
#line 1138 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                                              Write(Html.Raw(ViewData["ReCert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b>)</td>
            <td id=""tdMR1ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR1ReCertReason"">
            <td id=""tdMR1ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR1ReCertReason"" onchange=""textcheck('MR1ReCertReason')"" onkeyup=""textcheck('MR1ReCertReason')"" />
            </td>
            <td>Remedy for no 1st Re Cert</td>
            <td id=""tdMR1ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR1ReCertYesNo"">
            <td id=""tdMR1ReCertYesNo"" class=""tderror"">
                <select id=""ddMR1ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR1ReCertYesNo'); nowarning('MR1ReCertYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb122989", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb123926", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb124901", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR1ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR2ReCertDue"">
            <td id=""tdMR2ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 42290, "\"", 42298, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR2ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 42348, "\"", 42356, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR2ReCertDue"" onchange=""datechecknoerror('MR2ReCertDue'); check2st()"" onkeyup=""datechecknoerror('MR2ReCertDue'); check2st()"" />
            </td>
            <td>2nd Re Cert - Date Completed (<b>Due no later than <span id=""MR2ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR2ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR2ReCertReason"">
            <td id=""tdMR2ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR2ReCertReason"" onchange=""textcheck('MR2ReCertReason')"" onkeyup=""textcheck('MR2ReCertReason')"" />
            </td>
            <td>Remedy for no 2nd Re Cert</td>
            <td id=""tdMR2ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR2ReCertYesNo"">
            <td id=""tdMR2ReCertYesNo"" class=""tderror"">
                <select id=""ddMR2ReCertYesNo"" class=""");
            WriteLiteral("txtbox\" onchange=\"ddcheck(\'MR2ReCertYesNo\'); nowarning(\'MR2ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb127702", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb128639", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb129614", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR2ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR3ReCertDue"">
            <td id=""tdMR3ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 43862, "\"", 43870, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR3ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 43920, "\"", 43928, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR3ReCertDue"" onchange=""datechecknoerror('MR3ReCertDue'); check3st()"" onkeyup=""datechecknoerror('MR3ReCertDue'); check3st()"" />
            </td>
            <td>3rd Re Cert - Date Completed (<b>Due no later than <span id=""MR3ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR3ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR3ReCertReason"">
            <td id=""tdMR3ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR3ReCertReason"" onchange=""textcheck('MR3ReCertReason')"" onkeyup=""textcheck('MR3ReCertReason')"" />
            </td>
            <td>Remedy for no 3rd Re Cert</td>
            <td id=""tdMR3ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR3ReCertYesNo"">
            <td id=""tdMR3ReCertYesNo"" class=""tderror"">
                <select id=""ddMR3ReCertYesNo"" class=""");
            WriteLiteral("txtbox\" onchange=\"ddcheck(\'MR3ReCertYesNo\'); nowarning(\'MR3ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb132415", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb133352", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb134327", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR3ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR4ReCertDue"">
            <td id=""tdMR4ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 45434, "\"", 45442, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR4ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 45492, "\"", 45500, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR4ReCertDue"" onchange=""datechecknoerror('MR4ReCertDue'); check4st()"" onkeyup=""datechecknoerror('MR4ReCertDue'); check4st()"" />
            </td>
            <td>4th Re Cert - Date Completed (<b>Due no later than <span id=""MR4ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR4ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR4ReCertReason"">
            <td id=""tdMR4ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR4ReCertReason"" onchange=""textcheck('MR4ReCertReason')"" onkeyup=""textcheck('MR4ReCertReason')"" />
            </td>
            <td>Remedy for no 4th Re Cert</td>
            <td id=""tdMR4ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR4ReCertYesNo"">
            <td id=""tdMR4ReCertYesNo"" class=""tderror"">
                <select id=""ddMR4ReCertYesNo"" class=""");
            WriteLiteral("txtbox\" onchange=\"ddcheck(\'MR4ReCertYesNo\'); nowarning(\'MR4ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb137128", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb138065", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb139040", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR4ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR5ReCertDue"">
            <td id=""tdMR5ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 47005, "\"", 47013, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR5ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 47063, "\"", 47071, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR5ReCertDue"" onchange=""datechecknoerror('MR5ReCertDue'); check5st()"" onkeyup=""datechecknoerror('MR5ReCertDue'); check5st()"" />
            </td>
            <td>5th Re Cert - Date Completed (<b>Due no later than <span id=""MR5ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR5ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR5ReCertReason"">
            <td id=""tdMR5ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR5ReCertReason"" onchange=""textcheck('MR5ReCertReason')"" onkeyup=""textcheck('MR5ReCertReason')"" />
            </td>
            <td>Remedy for no 5th Re Cert</td>
            <td id=""tdMR5ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR5ReCertYesNo"">
            <td id=""tdMR5ReCertYesNo"" class=""tderror"">
                <select id=""ddMR5ReCertYesNo"" class=""");
            WriteLiteral("txtbox\" onchange=\"ddcheck(\'MR5ReCertYesNo\'); nowarning(\'MR5ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb141840", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb142777", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb143752", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR5ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>




        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trMRPrimary"">
            <td id=""tdMRPrimary"" class=""tderror"">
                <input type=""checkbox"" id=""cbMRPrimary"" onchange=""cbcheck('MRPrimary')"" />
            </td>
            <td>Primary Dx in I0020B matches Primary Dx on UB04</td>
            <td id=""tdMRPrimaryConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trMROther"">
            <td id=""tdMROther"" class=""tderror"">
                <input type=""checkbox"" id=""cbMROther"" onchange=""cbcheck('MROther')"" />
            </td>
            <td>Other ICD-10s sequenced to support skilled services on UB04</td>
            <td id=""tdMROtherConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa levels mcb trerror"" style=""border:non");
            WriteLiteral(@"e"" id=""trMRTherapy"">
            <td id=""tdMRTherapy"" class=""tderror"">
                <input type=""checkbox"" id=""cbMRTherapy"" onchange=""cbcheck('MRTherapy')"" />
            </td>
            <td>Therapy Treatment Diagnosis is present to support claim</td>
            <td id=""tdMRTherapyConfirm"" class=""confirmed""></td>
        </tr>

    </table>
    <div style=""height:20px""></div>
</div>
");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnTherapy"">
    <table style=""width:100%"">
        <tr>
            <td>Therapy/Medical Records</td>
            <td style=""text-align:right; padding-right:50px;"" id=""TherapyComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""TherapyContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">


        <tr class=""yes"" id=""trPTEvalDate"">
            <td id=""tdPTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 50236, "\"", 50244, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDate"" onchange=""datechecknoerror('PTEvalDate'); checkevaldate('PT') "" onkeyup=""datechecknoerror('PTEvalDate'); checkevaldate('PT')"" />
            </td>
            <td>PT Evaluation Date</td>
            <td id=""tdPTEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPTEvalDateSigned"">
            <td id=""tdPTEvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 50694, "\"", 50702, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDateSigned"" onchange=""datechecknoerror('PTEvalDateSigned'); checkevalsign('PT')"" onkeyup=""datechecknoerror('PTEvalDateSigned'); checkevalsign('PT')"" />
            </td>
            <td>
                PT Evaluation - Date Order MD Signed <b><span id=""PTEvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb148002", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdPTEvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTEvalDateSignedReason"">
            <td id=""tdPTEvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTEvalDateSignedReason"" onchange=""textcheck('PTEvalDateSignedReason');"" onkeyup=""textcheck('PTEvalDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Evaluation Order MD Signed</td>
            <td id=""tdPTEvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTEvalDateSignedYesNo"">
            <td id=""tdPTEvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddPTEvalDateSignedYesNo"" class=""t");
            WriteLiteral("xtbox\" onchange=\"ddcheck(\'PTEvalDateSignedYesNo\'); nowarning(\'PTEvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb150328", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb151265", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb152240", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPTClarDate"">
            <td id=""tdPTClarDate""");
            BeginWriteAttribute("class", " class=\"", 52703, "\"", 52711, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate"" onchange=""datechecknoerror('PTClarDate'); checkclardate('PT')"" onkeyup=""datechecknoerror('PTClarDate'); checkclardate('PT')"" />
            </td>
            <td>
                PT Clarification Date <b><span id=""PTClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb154034", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDateReason"">
            <td id=""tdPTClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDateReason"" onchange=""textcheck('PTClarDateReason');"" onkeyup=""textcheck('PTClarDateReason');"" />
            </td>
            <td id=""PTClarDateReasonText""></td>
            <td id=""tdPTClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDateSigned"">
            <td id=""tdPTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 54007, "\"", 54015, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDateSigned"" onchange=""datechecknoerror('PTClarDateSigned'); checkClarDateSigned('PT')"" onkeyup=""datechecknoerror('PTClarDateSigned'); checkClarDateSigned('PT')"" />
            </td>
            <td>
                PT Clarification - Date Order MD Signed <b><span id=""PTClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb156635", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDateSignedReason"">
            <td id=""tdPTClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDateSignedReason"" onchange=""textcheck('PTClarDateSignedReason');"" onkeyup=""textcheck('PTClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDateSignedYesNo"">
            <td id=""tdPTClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDateSignedYesNo"" class=""");
            WriteLiteral("txtbox\" onchange=\"ddcheck(\'PTClarDateSignedYesNo\'); nowarning(\'PTClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb158962", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb159899", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb160874", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trPTClarDate1"">
            <td id=""tdPTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 56036, "\"", 56044, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate1"" onchange=""datechecknoerror('PTClarDate1'); checkClarDate1('PT')"" onkeyup=""datechecknoerror('PTClarDate1'); checkClarDate1('PT')"" />
            </td>
            <td>
                PT Reclarification #1 Date <b><span id=""PTClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb162683", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate1Reason"">
            <td id=""tdPTClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate1Reason"" onchange=""textcheck('PTClarDate1Reason');"" onkeyup=""textcheck('PTClarDate1Reason');"" />
            </td>
            <td id=""PTClarDate1ReasonText""></td>
            <td id=""tdPTClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate1Signed"">
            <td id=""tdPTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 57355, "\"", 57363, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate1Signed"" onchange=""datechecknoerror('PTClarDate1Signed'); checkClarDate1Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate1Signed'); checkClarDate1Signed('PT')"" />
            </td>
            <td>
                PT Reclarification #1 - Date Order MD Signed <b><span id=""PTClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb165299", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate1SignedReason"">
            <td id=""tdPTClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate1SignedReason"" onchange=""textcheck('PTClarDate1SignedReason');"" onkeyup=""textcheck('PTClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate1SignedYesNo"">
            <td id=""tdPTClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDate1SignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PTClarDate1SignedYesNo\'); nowarning(\'PTClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb167638", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb168575", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb169550", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate2"">
            <td id=""tdPTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 59407, "\"", 59415, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate2"" onchange=""datechecknoerror('PTClarDate2'); checkClarDate2('PT')"" onkeyup=""datechecknoerror('PTClarDate2'); checkClarDate2('PT')"" />
            </td>
            <td>
                PT Reclarification #2 Date <b><span id=""PTClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb171359", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate2Reason"">
            <td id=""tdPTClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate2Reason"" onchange=""textcheck('PTClarDate2Reason');"" onkeyup=""textcheck('PTClarDate2Reason');"" />
            </td>
            <td id=""PTClarDate2ReasonText""></td>
            <td id=""tdPTClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate2Signed"">
            <td id=""tdPTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 60726, "\"", 60734, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate2Signed"" onchange=""datechecknoerror('PTClarDate2Signed'); checkClarDate2Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate2Signed'); checkClarDate2Signed('PT')"" />
            </td>
            <td>
                PT Reclarification #2 - Date Order MD Signed <b><span id=""PTClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb173975", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate2SignedReason"">
            <td id=""tdPTClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate2SignedReason"" onchange=""textcheck('PTClarDate2SignedReason');"" onkeyup=""textcheck('PTClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate2SignedYesNo"">
            <td id=""tdPTClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDate2SignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PTClarDate2SignedYesNo\'); nowarning(\'PTClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb176314", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb177251", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb178226", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPTClarDate3"">
            <td id=""tdPTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 62777, "\"", 62785, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate3"" onchange=""datechecknoerror('PTClarDate3'); checkClarDate3('PT')"" onkeyup=""datechecknoerror('PTClarDate3'); checkClarDate3('PT')"" />
            </td>
            <td>
                PT Reclarification #3 Date <b><span id=""PTClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb180034", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate3Reason"">
            <td id=""tdPTClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate3Reason"" onchange=""textcheck('PTClarDate3Reason');"" onkeyup=""textcheck('PTClarDate3Reason');"" />
            </td>
            <td id=""PTClarDate3ReasonText""></td>
            <td id=""tdPTClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate3Signed"">
            <td id=""tdPTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 64096, "\"", 64104, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate3Signed"" onchange=""datechecknoerror('PTClarDate3Signed'); checkClarDate3Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate3Signed'); checkClarDate3Signed('PT')"" />
            </td>
            <td>
                PT Reclarification #3 - Date Order MD Signed <b><span id=""PTClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb182650", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate3SignedReason"">
            <td id=""tdPTClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate3SignedReason"" onchange=""textcheck('PTClarDate3SignedReason');"" onkeyup=""textcheck('PTClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate3SignedYesNo"">
            <td id=""tdPTClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDate3SignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PTClarDate3SignedYesNo\'); nowarning(\'PTClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb184989", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb185926", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb186901", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTDischargeDate"">
            <td id=""tdPTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 66156, "\"", 66164, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTDischargeDate"" onchange=""datechecknoerror('PTDischargeDate'); checkclardate('PT'); checkClarDate1('PT')"" onkeyup=""datechecknoerror('PTDischargeDate'); checkclardate('PT'); checkClarDate1('PT')"" />
            </td>
            <td>
                PT Discharge Date
            </td>
            <td id=""tdPTDischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdPT2"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another PT"" onclick=""addther('PT2')"" id=""addPT2"" />
            </td>
        </tr>
    </table>



    <table class=""TableClick content therapyvisable"" id=""PT2"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove PT"" onclick=""removether('PT2')"" id=""removePT2"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trPT2EvalDate"">
            <td id=""tdPT2EvalDate""");
            BeginWriteAttribute("class", " class=\"", 67175, "\"", 67183, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2EvalDate"" onchange=""datechecknoerror('PT2EvalDate'); checkevaldate('PT2') "" onkeyup=""datechecknoerror('PT2EvalDate'); checkevaldate('PT2')"" />
            </td>
            <td>PT2 Evaluation Date</td>
            <td id=""tdPT2EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT2EvalDateSigned"">
            <td id=""tdPT2EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 67642, "\"", 67650, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2EvalDateSigned"" onchange=""datechecknoerror('PT2EvalDateSigned'); checkevalsign('PT2')"" onkeyup=""datechecknoerror('PT2EvalDateSigned'); checkevalsign('PT2')"" />
            </td>
            <td>
                PT2 Evaluation - Date Order MD Signed <b><span id=""PT2EvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb190581", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdPT2EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2EvalDateSignedReason"">
            <td id=""tdPT2EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2EvalDateSignedReason"" onchange=""textcheck('PT2EvalDateSignedReason');"" onkeyup=""textcheck('PT2EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no PT2 Evaluation Order MD Signed</td>
            <td id=""tdPT2EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2EvalDateSignedYesNo"">
            <td id=""tdPT2EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT2EvalDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PT2EvalDateSignedYesNo\'); nowarning(\'PT2EvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb192920", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb193857", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb194832", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT2ClarDate"">
            <td id=""tdPT2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 69674, "\"", 69682, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate"" onchange=""datechecknoerror('PT2ClarDate'); checkclardate('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate'); checkclardate('PT2')"" />
            </td>
            <td>
                PT2 Clarification Date <b><span id=""PT2ClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb196636", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDateReason"">
            <td id=""tdPT2ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDateReason"" onchange=""textcheck('PT2ClarDateReason');"" onkeyup=""textcheck('PT2ClarDateReason');"" />
            </td>
            <td id=""PT2ClarDateReasonText""></td>
            <td id=""tdPT2ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDateSigned"">
            <td id=""tdPT2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 70995, "\"", 71003, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDateSigned"" onchange=""datechecknoerror('PT2ClarDateSigned'); checkClarDateSigned('PT2')"" onkeyup=""datechecknoerror('PT2ClarDateSigned'); checkClarDateSigned('PT2')"" />
            </td>
            <td>
                PT2 Clarification - Date Order MD Signed <b><span id=""PT2ClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb199254", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDateSignedReason"">
            <td id=""tdPT2ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDateSignedReason"" onchange=""textcheck('PT2ClarDateSignedReason');"" onkeyup=""textcheck('PT2ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDateSignedYesNo"">
            <td id=""tdPT2ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PT2ClarDateSignedYesNo\'); nowarning(\'PT2ClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb201593", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb202530", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb203505", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trPT2ClarDate1"">
            <td id=""tdPT2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 73046, "\"", 73054, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate1"" onchange=""datechecknoerror('PT2ClarDate1'); checkClarDate1('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate1'); checkClarDate1('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #1 Date <b><span id=""PT2ClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb205324", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate1Reason"">
            <td id=""tdPT2ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate1Reason"" onchange=""textcheck('PT2ClarDate1Reason');"" onkeyup=""textcheck('PT2ClarDate1Reason');"" />
            </td>
            <td id=""PT2ClarDate1ReasonText""></td>
            <td id=""tdPT2ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate1Signed"">
            <td id=""tdPT2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 74382, "\"", 74390, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate1Signed"" onchange=""datechecknoerror('PT2ClarDate1Signed'); checkClarDate1Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate1Signed'); checkClarDate1Signed('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #1 - Date Order MD Signed <b><span id=""PT2ClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb207957", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate1SignedReason"">
            <td id=""tdPT2ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate1SignedReason"" onchange=""textcheck('PT2ClarDate1SignedReason');"" onkeyup=""textcheck('PT2ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate1SignedYesNo"">
            <td id=""tdPT2ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDate1");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'PT2ClarDate1SignedYesNo\'); nowarning(\'PT2ClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb210308", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb211245", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb212220", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate2"">
            <td id=""tdPT2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 76456, "\"", 76464, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate2"" onchange=""datechecknoerror('PT2ClarDate2'); checkClarDate2('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate2'); checkClarDate2('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #2 Date <b><span id=""PT2ClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb214039", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate2Reason"">
            <td id=""tdPT2ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate2Reason"" onchange=""textcheck('PT2ClarDate2Reason');"" onkeyup=""textcheck('PT2ClarDate2Reason');"" />
            </td>
            <td id=""PT2ClarDate2ReasonText""></td>
            <td id=""tdPT2ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate2Signed"">
            <td id=""tdPT2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 77792, "\"", 77800, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate2Signed"" onchange=""datechecknoerror('PT2ClarDate2Signed'); checkClarDate2Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate2Signed'); checkClarDate2Signed('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #2 - Date Order MD Signed <b><span id=""PT2ClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb216672", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate2SignedReason"">
            <td id=""tdPT2ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate2SignedReason"" onchange=""textcheck('PT2ClarDate2SignedReason');"" onkeyup=""textcheck('PT2ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate2SignedYesNo"">
            <td id=""tdPT2ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDate2");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'PT2ClarDate2SignedYesNo\'); nowarning(\'PT2ClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb219023", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb219960", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb220935", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT2ClarDate3"">
            <td id=""tdPT2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 79865, "\"", 79873, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate3"" onchange=""datechecknoerror('PT2ClarDate3'); checkClarDate3('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate3'); checkClarDate3('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #3 Date <b><span id=""PT2ClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb222753", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate3Reason"">
            <td id=""tdPT2ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate3Reason"" onchange=""textcheck('PT2ClarDate3Reason');"" onkeyup=""textcheck('PT2ClarDate3Reason');"" />
            </td>
            <td id=""PT2ClarDate3ReasonText""></td>
            <td id=""tdPT2ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate3Signed"">
            <td id=""tdPT2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 81201, "\"", 81209, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate3Signed"" onchange=""datechecknoerror('PT2ClarDate3Signed'); checkClarDate3Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate3Signed'); checkClarDate3Signed('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #3 - Date Order MD Signed <b><span id=""PT2ClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb225386", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT2ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate3SignedReason"">
            <td id=""tdPT2ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate3SignedReason"" onchange=""textcheck('PT2ClarDate3SignedReason');"" onkeyup=""textcheck('PT2ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate3SignedYesNo"">
            <td id=""tdPT2ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDate3");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'PT2ClarDate3SignedYesNo\'); nowarning(\'PT2ClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb227737", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb228674", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb229649", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2DischargeDate"">
            <td id=""tdPT2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 83283, "\"", 83291, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2DischargeDate"" onchange=""datechecknoerror('PT2DischargeDate'); checkclardate('PT2'); checkClarDate1('PT2')"" onkeyup=""datechecknoerror('PT2DischargeDate'); checkclardate('PT2'); checkClarDate1('PT2')"" />
            </td>
            <td>
                PT2 Discharge Date
            </td>
            <td id=""tdPT2DischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdPT3"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another PT"" onclick=""addther('PT3')"" id=""addPT3"" />
            </td>
        </tr>

    </table>




    <table class=""TableClick content therapyvisable"" id=""PT3"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove PT"" onclick=""removether('PT3')"" id=""removePT3"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trPT3EvalDate"">
            <td id=""tdPT3EvalDate""");
            BeginWriteAttribute("class", " class=\"", 84313, "\"", 84321, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3EvalDate"" onchange=""datechecknoerror('PT3EvalDate'); checkevaldate('PT3') "" onkeyup=""datechecknoerror('PT3EvalDate'); checkevaldate('PT3')"" />
            </td>
            <td>PT3 Evaluation Date</td>
            <td id=""tdPT3EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT3EvalDateSigned"">
            <td id=""tdPT3EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 84780, "\"", 84788, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3EvalDateSigned"" onchange=""datechecknoerror('PT3EvalDateSigned'); checkevalsign('PT3')"" onkeyup=""datechecknoerror('PT3EvalDateSigned'); checkevalsign('PT3')"" />
            </td>
            <td>
                PT3 Evaluation - Date Order MD Signed <b><span id=""PT3EvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb233343", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdPT3EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3EvalDateSignedReason"">
            <td id=""tdPT3EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3EvalDateSignedReason"" onchange=""textcheck('PT3EvalDateSignedReason');"" onkeyup=""textcheck('PT3EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no PT3 Evaluation Order MD Signed</td>
            <td id=""tdPT3EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3EvalDateSignedYesNo"">
            <td id=""tdPT3EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT3EvalDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PT3EvalDateSignedYesNo\'); nowarning(\'PT3EvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb235682", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb236619", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb237594", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT3ClarDate"">
            <td id=""tdPT3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 86812, "\"", 86820, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate"" onchange=""datechecknoerror('PT3ClarDate'); checkclardate('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate'); checkclardate('PT3')"" />
            </td>
            <td>
                PT3 Clarification Date <b><span id=""PT3ClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb239398", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDateReason"">
            <td id=""tdPT3ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDateReason"" onchange=""textcheck('PT3ClarDateReason');"" onkeyup=""textcheck('PT3ClarDateReason');"" />
            </td>
            <td id=""PT3ClarDateReasonText""></td>
            <td id=""tdPT3ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDateSigned"">
            <td id=""tdPT3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 88133, "\"", 88141, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDateSigned"" onchange=""datechecknoerror('PT3ClarDateSigned'); checkClarDateSigned('PT3')"" onkeyup=""datechecknoerror('PT3ClarDateSigned'); checkClarDateSigned('PT3')"" />
            </td>
            <td>
                PT3 Clarification - Date Order MD Signed <b><span id=""PT3ClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb242016", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDateSignedReason"">
            <td id=""tdPT3ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDateSignedReason"" onchange=""textcheck('PT3ClarDateSignedReason');"" onkeyup=""textcheck('PT3ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDateSignedYesNo"">
            <td id=""tdPT3ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'PT3ClarDateSignedYesNo\'); nowarning(\'PT3ClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb244355", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb245292", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb246267", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate1"">
            <td id=""tdPT3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 90183, "\"", 90191, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate1"" onchange=""datechecknoerror('PT3ClarDate1'); checkClarDate1('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate1'); checkClarDate1('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #1 Date <b><span id=""PT3ClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb248085", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate1Reason"">
            <td id=""tdPT3ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate1Reason"" onchange=""textcheck('PT3ClarDate1Reason');"" onkeyup=""textcheck('PT3ClarDate1Reason');"" />
            </td>
            <td id=""PT3ClarDate1ReasonText""></td>
            <td id=""tdPT3ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate1Signed"">
            <td id=""tdPT3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 91519, "\"", 91527, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate1Signed"" onchange=""datechecknoerror('PT3ClarDate1Signed'); checkClarDate1Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate1Signed'); checkClarDate1Signed('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #1 - Date Order MD Signed <b><span id=""PT3ClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb250718", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate1SignedReason"">
            <td id=""tdPT3ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate1SignedReason"" onchange=""textcheck('PT3ClarDate1SignedReason');"" onkeyup=""textcheck('PT3ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate1SignedYesNo"">
            <td id=""tdPT3ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDate1");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'PT3ClarDate1SignedYesNo\'); nowarning(\'PT3ClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb253069", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb254006", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb254981", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate2"">
            <td id=""tdPT3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 93593, "\"", 93601, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate2"" onchange=""datechecknoerror('PT3ClarDate2'); checkClarDate2('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate2'); checkClarDate2('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #2 Date <b><span id=""PT3ClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb256800", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate2Reason"">
            <td id=""tdPT3ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate2Reason"" onchange=""textcheck('PT3ClarDate2Reason');"" onkeyup=""textcheck('PT3ClarDate2Reason');"" />
            </td>
            <td id=""PT3ClarDate2ReasonText""></td>
            <td id=""tdPT3ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate2Signed"">
            <td id=""tdPT3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 94929, "\"", 94937, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate2Signed"" onchange=""datechecknoerror('PT3ClarDate2Signed'); checkClarDate2Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate2Signed'); checkClarDate2Signed('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #2 - Date Order MD Signed <b><span id=""PT3ClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb259433", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate2SignedReason"">
            <td id=""tdPT3ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate2SignedReason"" onchange=""textcheck('PT3ClarDate2SignedReason');"" onkeyup=""textcheck('PT3ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate2SignedYesNo"">
            <td id=""tdPT3ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDate2");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'PT3ClarDate2SignedYesNo\'); nowarning(\'PT3ClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb261784", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb262721", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb263696", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT3ClarDate3"">
            <td id=""tdPT3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 97002, "\"", 97010, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate3"" onchange=""datechecknoerror('PT3ClarDate3'); checkClarDate3('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate3'); checkClarDate3('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #3 Date <b><span id=""PT3ClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb265514", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate3Reason"">
            <td id=""tdPT3ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate3Reason"" onchange=""textcheck('PT3ClarDate3Reason');"" onkeyup=""textcheck('PT3ClarDate3Reason');"" />
            </td>
            <td id=""PT3ClarDate3ReasonText""></td>
            <td id=""tdPT3ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate3Signed"">
            <td id=""tdPT3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 98338, "\"", 98346, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate3Signed"" onchange=""datechecknoerror('PT3ClarDate3Signed'); checkClarDate3Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate3Signed'); checkClarDate3Signed('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #3 - Date Order MD Signed <b><span id=""PT3ClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb268147", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdPT3ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate3SignedReason"">
            <td id=""tdPT3ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate3SignedReason"" onchange=""textcheck('PT3ClarDate3SignedReason');"" onkeyup=""textcheck('PT3ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate3SignedYesNo"">
            <td id=""tdPT3ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDate3");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'PT3ClarDate3SignedYesNo\'); nowarning(\'PT3ClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb270498", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb271435", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb272410", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3DischargeDate"">
            <td id=""tdPT3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 100420, "\"", 100428, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3DischargeDate"" onchange=""datechecknoerror('PT3DischargeDate'); checkclardate('PT3'); checkClarDate1('PT3')"" onkeyup=""datechecknoerror('PT3DischargeDate'); checkclardate('PT3'); checkClarDate1('PT3')"" />
            </td>
            <td>
                PT3 Discharge Date
            </td>
            <td id=""tdPT3DischargeDateConfirm"" class=""confirmed""></td>
        </tr>

    </table>



    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">


        <tr class=""yes"" id=""trOTEvalDate"">
            <td id=""tdOTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 101056, "\"", 101064, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTEvalDate"" onchange=""datechecknoerror('OTEvalDate'); checkevaldate('OT') "" onkeyup=""datechecknoerror('OTEvalDate'); checkevaldate('OT')"" />
            </td>
            <td>OT Evaluation Date</td>
            <td id=""tdOTEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOTEvalDateSigned"">
            <td id=""tdOTEvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 101514, "\"", 101522, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTEvalDateSigned"" onchange=""datechecknoerror('OTEvalDateSigned'); checkevalsign('OT')"" onkeyup=""datechecknoerror('OTEvalDateSigned'); checkevalsign('OT')"" />
            </td>
            <td>
                OT Evaluation - Date Order MD Signed <b><span id=""OTEvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb275674", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdOTEvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTEvalDateSignedReason"">
            <td id=""tdOTEvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTEvalDateSignedReason"" onchange=""textcheck('OTEvalDateSignedReason');"" onkeyup=""textcheck('OTEvalDateSignedReason');"" />
            </td>
            <td>Remedy for no OT Evaluation Order MD Signed</td>
            <td id=""tdOTEvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTEvalDateSignedYesNo"">
            <td id=""tdOTEvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddOTEvalDateSignedYesNo"" class=""t");
            WriteLiteral("xtbox\" onchange=\"ddcheck(\'OTEvalDateSignedYesNo\'); nowarning(\'OTEvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb278000", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb278937", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb279912", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOTClarDate"">
            <td id=""tdOTClarDate""");
            BeginWriteAttribute("class", " class=\"", 103523, "\"", 103531, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate"" onchange=""datechecknoerror('OTClarDate'); checkclardate('OT')"" onkeyup=""datechecknoerror('OTClarDate'); checkclardate('OT')"" />
            </td>
            <td>
                OT Clarification Date <b><span id=""OTClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb281708", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDateReason"">
            <td id=""tdOTClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDateReason"" onchange=""textcheck('OTClarDateReason');"" onkeyup=""textcheck('OTClarDateReason');"" />
            </td>
            <td id=""OTClarDateReasonText""></td>
            <td id=""tdOTClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDateSigned"">
            <td id=""tdOTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 104827, "\"", 104835, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDateSigned"" onchange=""datechecknoerror('OTClarDateSigned'); checkClarDateSigned('OT')"" onkeyup=""datechecknoerror('OTClarDateSigned'); checkClarDateSigned('OT')"" />
            </td>
            <td>
                OT Clarification - Date Order MD Signed <b><span id=""OTClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb284311", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDateSignedReason"">
            <td id=""tdOTClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDateSignedReason"" onchange=""textcheck('OTClarDateSignedReason');"" onkeyup=""textcheck('OTClarDateSignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDateSignedYesNo"">
            <td id=""tdOTClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDateSignedYesNo"" class=""");
            WriteLiteral("txtbox\" onchange=\"ddcheck(\'OTClarDateSignedYesNo\'); nowarning(\'OTClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb286638", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb287575", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb288550", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trOTClarDate1"">
            <td id=""tdOTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 106856, "\"", 106864, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate1"" onchange=""datechecknoerror('OTClarDate1'); checkClarDate1('OT')"" onkeyup=""datechecknoerror('OTClarDate1'); checkClarDate1('OT')"" />
            </td>
            <td>
                OT Reclarification #1 Date <b><span id=""OTClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb290361", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate1Reason"">
            <td id=""tdOTClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate1Reason"" onchange=""textcheck('OTClarDate1Reason');"" onkeyup=""textcheck('OTClarDate1Reason');"" />
            </td>
            <td id=""OTClarDate1ReasonText""></td>
            <td id=""tdOTClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate1Signed"">
            <td id=""tdOTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 108175, "\"", 108183, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate1Signed"" onchange=""datechecknoerror('OTClarDate1Signed'); checkClarDate1Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate1Signed'); checkClarDate1Signed('OT')"" />
            </td>
            <td>
                OT Reclarification #1 - Date Order MD Signed <b><span id=""OTClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb292979", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate1SignedReason"">
            <td id=""tdOTClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate1SignedReason"" onchange=""textcheck('OTClarDate1SignedReason');"" onkeyup=""textcheck('OTClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate1SignedYesNo"">
            <td id=""tdOTClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDate1SignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OTClarDate1SignedYesNo\'); nowarning(\'OTClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb295318", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb296255", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb297230", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate2"">
            <td id=""tdOTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 110227, "\"", 110235, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate2"" onchange=""datechecknoerror('OTClarDate2'); checkClarDate2('OT')"" onkeyup=""datechecknoerror('OTClarDate2'); checkClarDate2('OT')"" />
            </td>
            <td>
                OT Reclarification #2 Date <b><span id=""OTClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb299041", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate2Reason"">
            <td id=""tdOTClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate2Reason"" onchange=""textcheck('OTClarDate2Reason');"" onkeyup=""textcheck('OTClarDate2Reason');"" />
            </td>
            <td id=""OTClarDate2ReasonText""></td>
            <td id=""tdOTClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate2Signed"">
            <td id=""tdOTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 111546, "\"", 111554, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate2Signed"" onchange=""datechecknoerror('OTClarDate2Signed'); checkClarDate2Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate2Signed'); checkClarDate2Signed('OT')"" />
            </td>
            <td>
                OT Reclarification #2 - Date Order MD Signed <b><span id=""OTClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb301659", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate2SignedReason"">
            <td id=""tdOTClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate2SignedReason"" onchange=""textcheck('OTClarDate2SignedReason');"" onkeyup=""textcheck('OTClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate2SignedYesNo"">
            <td id=""tdOTClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDate2SignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OTClarDate2SignedYesNo\'); nowarning(\'OTClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb303998", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb304935", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb305910", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOTClarDate3"">
            <td id=""tdOTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 113597, "\"", 113605, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate3"" onchange=""datechecknoerror('OTClarDate3'); checkClarDate3('OT')"" onkeyup=""datechecknoerror('OTClarDate3'); checkClarDate3('OT')"" />
            </td>
            <td>
                OT Reclarification #3 Date <b><span id=""OTClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb307720", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate3Reason"">
            <td id=""tdOTClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate3Reason"" onchange=""textcheck('OTClarDate3Reason');"" onkeyup=""textcheck('OTClarDate3Reason');"" />
            </td>
            <td id=""OTClarDate3ReasonText""></td>
            <td id=""tdOTClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate3Signed"">
            <td id=""tdOTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 114916, "\"", 114924, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate3Signed"" onchange=""datechecknoerror('OTClarDate3Signed'); checkClarDate3Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate3Signed'); checkClarDate3Signed('OT')"" />
            </td>
            <td>
                OT Reclarification #3 - Date Order MD Signed <b><span id=""OTClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb310338", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOTClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate3SignedReason"">
            <td id=""tdOTClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate3SignedReason"" onchange=""textcheck('OTClarDate3SignedReason');"" onkeyup=""textcheck('OTClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate3SignedYesNo"">
            <td id=""tdOTClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDate3SignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OTClarDate3SignedYesNo\'); nowarning(\'OTClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb312677", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb313614", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb314589", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTDischargeDate"">
            <td id=""tdOTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 116976, "\"", 116984, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTDischargeDate"" onchange=""datechecknoerror('OTDischargeDate'); checkclardate('OT'); checkClarDate1('OT')"" onkeyup=""datechecknoerror('OTDischargeDate'); checkclardate('OT'); checkClarDate1('OT')"" />
            </td>
            <td>
                OT Discharge Date
            </td>
            <td id=""tdOTDischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdOT2"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another OT"" onclick=""addther('OT2')"" id=""addOT2"" />
            </td>
        </tr>
    </table>



    <table class=""TableClick content therapyvisable"" id=""OT2"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove OT"" onclick=""removether('OT2')"" id=""removeOT2"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trOT2EvalDate"">
            <td id=""tdOT2EvalDate""");
            BeginWriteAttribute("class", " class=\"", 117995, "\"", 118003, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2EvalDate"" onchange=""datechecknoerror('OT2EvalDate'); checkevaldate('OT2') "" onkeyup=""datechecknoerror('OT2EvalDate'); checkevaldate('OT2')"" />
            </td>
            <td>OT2 Evaluation Date</td>
            <td id=""tdOT2EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT2EvalDateSigned"">
            <td id=""tdOT2EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 118462, "\"", 118470, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2EvalDateSigned"" onchange=""datechecknoerror('OT2EvalDateSigned'); checkevalsign('OT2')"" onkeyup=""datechecknoerror('OT2EvalDateSigned'); checkevalsign('OT2')"" />
            </td>
            <td>
                OT2 Evaluation - Date Order MD Signed <b><span id=""OT2EvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb318275", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdOT2EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2EvalDateSignedReason"">
            <td id=""tdOT2EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2EvalDateSignedReason"" onchange=""textcheck('OT2EvalDateSignedReason');"" onkeyup=""textcheck('OT2EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no OT2 Evaluation Order MD Signed</td>
            <td id=""tdOT2EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2EvalDateSignedYesNo"">
            <td id=""tdOT2EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT2EvalDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OT2EvalDateSignedYesNo\'); nowarning(\'OT2EvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb320614", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb321551", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb322526", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT2ClarDate"">
            <td id=""tdOT2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 120494, "\"", 120502, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate"" onchange=""datechecknoerror('OT2ClarDate'); checkclardate('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate'); checkclardate('OT2')"" />
            </td>
            <td>
                OT2 Clarification Date <b><span id=""OT2ClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb324332", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDateReason"">
            <td id=""tdOT2ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDateReason"" onchange=""textcheck('OT2ClarDateReason');"" onkeyup=""textcheck('OT2ClarDateReason');"" />
            </td>
            <td id=""OT2ClarDateReasonText""></td>
            <td id=""tdOT2ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDateSigned"">
            <td id=""tdOT2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 121815, "\"", 121823, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDateSigned"" onchange=""datechecknoerror('OT2ClarDateSigned'); checkClarDateSigned('OT2')"" onkeyup=""datechecknoerror('OT2ClarDateSigned'); checkClarDateSigned('OT2')"" />
            </td>
            <td>
                OT2 Clarification - Date Order MD Signed <b><span id=""OT2ClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb326952", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDateSignedReason"">
            <td id=""tdOT2ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDateSignedReason"" onchange=""textcheck('OT2ClarDateSignedReason');"" onkeyup=""textcheck('OT2ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDateSignedYesNo"">
            <td id=""tdOT2ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OT2ClarDateSignedYesNo\'); nowarning(\'OT2ClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb329291", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb330228", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb331203", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trOT2ClarDate1"">
            <td id=""tdOT2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 123866, "\"", 123874, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate1"" onchange=""datechecknoerror('OT2ClarDate1'); checkClarDate1('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate1'); checkClarDate1('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #1 Date <b><span id=""OT2ClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb333024", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate1Reason"">
            <td id=""tdOT2ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate1Reason"" onchange=""textcheck('OT2ClarDate1Reason');"" onkeyup=""textcheck('OT2ClarDate1Reason');"" />
            </td>
            <td id=""OT2ClarDate1ReasonText""></td>
            <td id=""tdOT2ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate1Signed"">
            <td id=""tdOT2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 125202, "\"", 125210, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate1Signed"" onchange=""datechecknoerror('OT2ClarDate1Signed'); checkClarDate1Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate1Signed'); checkClarDate1Signed('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #1 - Date Order MD Signed <b><span id=""OT2ClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb335659", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate1SignedReason"">
            <td id=""tdOT2ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate1SignedReason"" onchange=""textcheck('OT2ClarDate1SignedReason');"" onkeyup=""textcheck('OT2ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate1SignedYesNo"">
            <td id=""tdOT2ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDate1");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'OT2ClarDate1SignedYesNo\'); nowarning(\'OT2ClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb338010", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb338947", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb339922", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate2"">
            <td id=""tdOT2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 127276, "\"", 127284, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate2"" onchange=""datechecknoerror('OT2ClarDate2'); checkClarDate2('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate2'); checkClarDate2('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #2 Date <b><span id=""OT2ClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb341743", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate2Reason"">
            <td id=""tdOT2ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate2Reason"" onchange=""textcheck('OT2ClarDate2Reason');"" onkeyup=""textcheck('OT2ClarDate2Reason');"" />
            </td>
            <td id=""OT2ClarDate2ReasonText""></td>
            <td id=""tdOT2ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate2Signed"">
            <td id=""tdOT2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 128612, "\"", 128620, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate2Signed"" onchange=""datechecknoerror('OT2ClarDate2Signed'); checkClarDate2Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate2Signed'); checkClarDate2Signed('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #2 - Date Order MD Signed <b><span id=""OT2ClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb344378", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate2SignedReason"">
            <td id=""tdOT2ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate2SignedReason"" onchange=""textcheck('OT2ClarDate2SignedReason');"" onkeyup=""textcheck('OT2ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate2SignedYesNo"">
            <td id=""tdOT2ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDate2");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'OT2ClarDate2SignedYesNo\'); nowarning(\'OT2ClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb346729", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb347666", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb348641", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT2ClarDate3"">
            <td id=""tdOT2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 130685, "\"", 130693, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate3"" onchange=""datechecknoerror('OT2ClarDate3'); checkClarDate3('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate3'); checkClarDate3('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #3 Date <b><span id=""OT2ClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb350461", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate3Reason"">
            <td id=""tdOT2ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate3Reason"" onchange=""textcheck('OT2ClarDate3Reason');"" onkeyup=""textcheck('OT2ClarDate3Reason');"" />
            </td>
            <td id=""OT2ClarDate3ReasonText""></td>
            <td id=""tdOT2ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate3Signed"">
            <td id=""tdOT2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 132021, "\"", 132029, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate3Signed"" onchange=""datechecknoerror('OT2ClarDate3Signed'); checkClarDate3Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate3Signed'); checkClarDate3Signed('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #3 - Date Order MD Signed <b><span id=""OT2ClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb353096", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT2ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate3SignedReason"">
            <td id=""tdOT2ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate3SignedReason"" onchange=""textcheck('OT2ClarDate3SignedReason');"" onkeyup=""textcheck('OT2ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate3SignedYesNo"">
            <td id=""tdOT2ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDate3");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'OT2ClarDate3SignedYesNo\'); nowarning(\'OT2ClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb355447", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb356384", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb357359", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2DischargeDate"">
            <td id=""tdOT2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 134103, "\"", 134111, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2DischargeDate"" onchange=""datechecknoerror('OT2DischargeDate'); checkclardate('OT2'); checkClarDate1('OT2')"" onkeyup=""datechecknoerror('OT2DischargeDate'); checkclardate('OT2'); checkClarDate1('OT2')"" />
            </td>
            <td>
                OT2 Discharge Date
            </td>
            <td id=""tdOT2DischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdOT3"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another OT"" onclick=""addther('OT3')"" id=""addOT3"" />
            </td>
        </tr>

    </table>




    <table class=""TableClick content therapyvisable"" id=""OT3"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove OT"" onclick=""removether('OT3')"" id=""removeOT3"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trOT3EvalDate"">
            <td id=""tdOT3EvalDate""");
            BeginWriteAttribute("class", " class=\"", 135133, "\"", 135141, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3EvalDate"" onchange=""datechecknoerror('OT3EvalDate'); checkevaldate('OT3') "" onkeyup=""datechecknoerror('OT3EvalDate'); checkevaldate('OT3')"" />
            </td>
            <td>OT3 Evaluation Date</td>
            <td id=""tdOT3EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT3EvalDateSigned"">
            <td id=""tdOT3EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 135600, "\"", 135608, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3EvalDateSigned"" onchange=""datechecknoerror('OT3EvalDateSigned'); checkevalsign('OT3')"" onkeyup=""datechecknoerror('OT3EvalDateSigned'); checkevalsign('OT3')"" />
            </td>
            <td>
                OT3 Evaluation - Date Order MD Signed <b><span id=""OT3EvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb361059", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdOT3EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3EvalDateSignedReason"">
            <td id=""tdOT3EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3EvalDateSignedReason"" onchange=""textcheck('OT3EvalDateSignedReason');"" onkeyup=""textcheck('OT3EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no OT3 Evaluation Order MD Signed</td>
            <td id=""tdOT3EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3EvalDateSignedYesNo"">
            <td id=""tdOT3EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT3EvalDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OT3EvalDateSignedYesNo\'); nowarning(\'OT3EvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb363398", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb364335", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb365310", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT3ClarDate"">
            <td id=""tdOT3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 137632, "\"", 137640, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate"" onchange=""datechecknoerror('OT3ClarDate'); checkclardate('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate'); checkclardate('OT3')"" />
            </td>
            <td>
                OT3 Clarification Date <b><span id=""OT3ClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb367116", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDateReason"">
            <td id=""tdOT3ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDateReason"" onchange=""textcheck('OT3ClarDateReason');"" onkeyup=""textcheck('OT3ClarDateReason');"" />
            </td>
            <td id=""OT3ClarDateReasonText""></td>
            <td id=""tdOT3ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDateSigned"">
            <td id=""tdOT3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 138953, "\"", 138961, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDateSigned"" onchange=""datechecknoerror('OT3ClarDateSigned'); checkClarDateSigned('OT3')"" onkeyup=""datechecknoerror('OT3ClarDateSigned'); checkClarDateSigned('OT3')"" />
            </td>
            <td>
                OT3 Clarification - Date Order MD Signed <b><span id=""OT3ClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb369736", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDateSignedReason"">
            <td id=""tdOT3ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDateSignedReason"" onchange=""textcheck('OT3ClarDateSignedReason');"" onkeyup=""textcheck('OT3ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDateSignedYesNo"">
            <td id=""tdOT3ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'OT3ClarDateSignedYesNo\'); nowarning(\'OT3ClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb372075", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb373012", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb373987", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate1"">
            <td id=""tdOT3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 141003, "\"", 141011, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate1"" onchange=""datechecknoerror('OT3ClarDate1'); checkClarDate1('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate1'); checkClarDate1('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #1 Date <b><span id=""OT3ClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb375807", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate1Reason"">
            <td id=""tdOT3ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate1Reason"" onchange=""textcheck('OT3ClarDate1Reason');"" onkeyup=""textcheck('OT3ClarDate1Reason');"" />
            </td>
            <td id=""OT3ClarDate1ReasonText""></td>
            <td id=""tdOT3ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate1Signed"">
            <td id=""tdOT3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 142339, "\"", 142347, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate1Signed"" onchange=""datechecknoerror('OT3ClarDate1Signed'); checkClarDate1Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate1Signed'); checkClarDate1Signed('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #1 - Date Order MD Signed <b><span id=""OT3ClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb378442", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate1SignedReason"">
            <td id=""tdOT3ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate1SignedReason"" onchange=""textcheck('OT3ClarDate1SignedReason');"" onkeyup=""textcheck('OT3ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate1SignedYesNo"">
            <td id=""tdOT3ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDate1");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'OT3ClarDate1SignedYesNo\'); nowarning(\'OT3ClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb380793", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb381730", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb382705", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate2"">
            <td id=""tdOT3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 144413, "\"", 144421, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate2"" onchange=""datechecknoerror('OT3ClarDate2'); checkClarDate2('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate2'); checkClarDate2('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #2 Date <b><span id=""OT3ClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb384526", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate2Reason"">
            <td id=""tdOT3ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate2Reason"" onchange=""textcheck('OT3ClarDate2Reason');"" onkeyup=""textcheck('OT3ClarDate2Reason');"" />
            </td>
            <td id=""OT3ClarDate2ReasonText""></td>
            <td id=""tdOT3ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate2Signed"">
            <td id=""tdOT3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 145749, "\"", 145757, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate2Signed"" onchange=""datechecknoerror('OT3ClarDate2Signed'); checkClarDate2Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate2Signed'); checkClarDate2Signed('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #2 - Date Order MD Signed <b><span id=""OT3ClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb387161", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate2SignedReason"">
            <td id=""tdOT3ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate2SignedReason"" onchange=""textcheck('OT3ClarDate2SignedReason');"" onkeyup=""textcheck('OT3ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate2SignedYesNo"">
            <td id=""tdOT3ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDate2");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'OT3ClarDate2SignedYesNo\'); nowarning(\'OT3ClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb389512", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb390449", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb391424", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT3ClarDate3"">
            <td id=""tdOT3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 147822, "\"", 147830, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate3"" onchange=""datechecknoerror('OT3ClarDate3'); checkClarDate3('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate3'); checkClarDate3('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #3 Date <b><span id=""OT3ClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb393244", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate3Reason"">
            <td id=""tdOT3ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate3Reason"" onchange=""textcheck('OT3ClarDate3Reason');"" onkeyup=""textcheck('OT3ClarDate3Reason');"" />
            </td>
            <td id=""OT3ClarDate3ReasonText""></td>
            <td id=""tdOT3ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate3Signed"">
            <td id=""tdOT3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 149158, "\"", 149166, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate3Signed"" onchange=""datechecknoerror('OT3ClarDate3Signed'); checkClarDate3Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate3Signed'); checkClarDate3Signed('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #3 - Date Order MD Signed <b><span id=""OT3ClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb395879", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdOT3ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate3SignedReason"">
            <td id=""tdOT3ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate3SignedReason"" onchange=""textcheck('OT3ClarDate3SignedReason');"" onkeyup=""textcheck('OT3ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate3SignedYesNo"">
            <td id=""tdOT3ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDate3");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'OT3ClarDate3SignedYesNo\'); nowarning(\'OT3ClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb398230", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb399167", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb400142", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3DischargeDate"">
            <td id=""tdOT3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 151240, "\"", 151248, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3DischargeDate"" onchange=""datechecknoerror('OT3DischargeDate'); checkclardate('OT3'); checkClarDate1('OT3')"" onkeyup=""datechecknoerror('OT3DischargeDate'); checkclardate('OT3'); checkClarDate1('OT3')"" />
            </td>
            <td>
                OT3 Discharge Date
            </td>
            <td id=""tdOT3DischargeDateConfirm"" class=""confirmed""></td>
        </tr>

    </table>




    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">


        <tr class=""yes"" id=""trSLPEvalDate"">
            <td id=""tdSLPEvalDate""");
            BeginWriteAttribute("class", " class=\"", 151879, "\"", 151887, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPEvalDate"" onchange=""datechecknoerror('SLPEvalDate'); checkevaldate('SLP') "" onkeyup=""datechecknoerror('SLPEvalDate'); checkevaldate('SLP')"" />
            </td>
            <td>SLP Evaluation Date</td>
            <td id=""tdSLPEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLPEvalDateSigned"">
            <td id=""tdSLPEvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 152346, "\"", 152354, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPEvalDateSigned"" onchange=""datechecknoerror('SLPEvalDateSigned'); checkevalsign('SLP')"" onkeyup=""datechecknoerror('SLPEvalDateSigned'); checkevalsign('SLP')"" />
            </td>
            <td>
                SLP Evaluation - Date Order MD Signed <b><span id=""SLPEvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb403425", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdSLPEvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPEvalDateSignedReason"">
            <td id=""tdSLPEvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPEvalDateSignedReason"" onchange=""textcheck('SLPEvalDateSignedReason');"" onkeyup=""textcheck('SLPEvalDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP Evaluation Order MD Signed</td>
            <td id=""tdSLPEvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPEvalDateSignedYesNo"">
            <td id=""tdSLPEvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLPEvalDateSignedYesN");
            WriteLiteral("o\" class=\"txtbox\" onchange=\"ddcheck(\'SLPEvalDateSignedYesNo\'); nowarning(\'SLPEvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb405764", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb406701", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb407676", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLPClarDate"">
            <td id=""tdSLPClarDate""");
            BeginWriteAttribute("class", " class=\"", 154378, "\"", 154386, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate"" onchange=""datechecknoerror('SLPClarDate'); checkclardate('SLP')"" onkeyup=""datechecknoerror('SLPClarDate'); checkclardate('SLP')"" />
            </td>
            <td>
                SLP Clarification Date <b><span id=""SLPClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb409482", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDateReason"">
            <td id=""tdSLPClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDateReason"" onchange=""textcheck('SLPClarDateReason');"" onkeyup=""textcheck('SLPClarDateReason');"" />
            </td>
            <td id=""SLPClarDateReasonText""></td>
            <td id=""tdSLPClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDateSigned"">
            <td id=""tdSLPClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 155699, "\"", 155707, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDateSigned"" onchange=""datechecknoerror('SLPClarDateSigned'); checkClarDateSigned('SLP')"" onkeyup=""datechecknoerror('SLPClarDateSigned'); checkClarDateSigned('SLP')"" />
            </td>
            <td>
                SLP Clarification - Date Order MD Signed <b><span id=""SLPClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb412102", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDateSignedReason"">
            <td id=""tdSLPClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDateSignedReason"" onchange=""textcheck('SLPClarDateSignedReason');"" onkeyup=""textcheck('SLPClarDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDateSignedYesNo"">
            <td id=""tdSLPClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDateSignedYes");
            WriteLiteral("No\" class=\"txtbox\" onchange=\"ddcheck(\'SLPClarDateSignedYesNo\'); nowarning(\'SLPClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb414442", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb415379", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb416354", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trSLPClarDate1"">
            <td id=""tdSLPClarDate1""");
            BeginWriteAttribute("class", " class=\"", 157751, "\"", 157759, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate1"" onchange=""datechecknoerror('SLPClarDate1'); checkClarDate1('SLP')"" onkeyup=""datechecknoerror('SLPClarDate1'); checkClarDate1('SLP')"" />
            </td>
            <td>
                SLP Reclarification #1 Date <b><span id=""SLPClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb418175", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate1Reason"">
            <td id=""tdSLPClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate1Reason"" onchange=""textcheck('SLPClarDate1Reason');"" onkeyup=""textcheck('SLPClarDate1Reason');"" />
            </td>
            <td id=""SLPClarDate1ReasonText""></td>
            <td id=""tdSLPClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate1Signed"">
            <td id=""tdSLPClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 159087, "\"", 159095, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate1Signed"" onchange=""datechecknoerror('SLPClarDate1Signed'); checkClarDate1Signed('SLP')"" onkeyup=""datechecknoerror('SLPClarDate1Signed'); checkClarDate1Signed('SLP')"" />
            </td>
            <td>
                SLP Reclarification #1 - Date Order MD Signed <b><span id=""SLPClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb420810", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate1SignedReason"">
            <td id=""tdSLPClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate1SignedReason"" onchange=""textcheck('SLPClarDate1SignedReason');"" onkeyup=""textcheck('SLPClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate1SignedYesNo"">
            <td id=""tdSLPClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDate");
            WriteLiteral("1SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLPClarDate1SignedYesNo\'); nowarning(\'SLPClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb423162", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb424099", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb425074", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate2"">
            <td id=""tdSLPClarDate2""");
            BeginWriteAttribute("class", " class=\"", 161162, "\"", 161170, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate2"" onchange=""datechecknoerror('SLPClarDate2'); checkClarDate2('SLP')"" onkeyup=""datechecknoerror('SLPClarDate2'); checkClarDate2('SLP')"" />
            </td>
            <td>
                SLP Reclarification #2 Date <b><span id=""SLPClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb426895", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate2Reason"">
            <td id=""tdSLPClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate2Reason"" onchange=""textcheck('SLPClarDate2Reason');"" onkeyup=""textcheck('SLPClarDate2Reason');"" />
            </td>
            <td id=""SLPClarDate2ReasonText""></td>
            <td id=""tdSLPClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate2Signed"">
            <td id=""tdSLPClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 162498, "\"", 162506, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate2Signed"" onchange=""datechecknoerror('SLPClarDate2Signed'); checkClarDate2Signed('SLP')"" onkeyup=""datechecknoerror('SLPClarDate2Signed'); checkClarDate2Signed('SLP')"" />
            </td>
            <td>
                SLP Reclarification #2 - Date Order MD Signed <b><span id=""SLPClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb429530", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate2SignedReason"">
            <td id=""tdSLPClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate2SignedReason"" onchange=""textcheck('SLPClarDate2SignedReason');"" onkeyup=""textcheck('SLPClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate2SignedYesNo"">
            <td id=""tdSLPClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDate");
            WriteLiteral("2SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLPClarDate2SignedYesNo\'); nowarning(\'SLPClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb431882", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb432819", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb433794", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLPClarDate3"">
            <td id=""tdSLPClarDate3""");
            BeginWriteAttribute("class", " class=\"", 164572, "\"", 164580, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate3"" onchange=""datechecknoerror('SLPClarDate3'); checkClarDate3('SLP')"" onkeyup=""datechecknoerror('SLPClarDate3'); checkClarDate3('SLP')"" />
            </td>
            <td>
                SLP Reclarification #3 Date <b><span id=""SLPClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb435614", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate3Reason"">
            <td id=""tdSLPClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate3Reason"" onchange=""textcheck('SLPClarDate3Reason');"" onkeyup=""textcheck('SLPClarDate3Reason');"" />
            </td>
            <td id=""SLPClarDate3ReasonText""></td>
            <td id=""tdSLPClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate3Signed"">
            <td id=""tdSLPClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 165908, "\"", 165916, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate3Signed"" onchange=""datechecknoerror('SLPClarDate3Signed'); checkClarDate3Signed('SLP')"" onkeyup=""datechecknoerror('SLPClarDate3Signed'); checkClarDate3Signed('SLP')"" />
            </td>
            <td>
                SLP Reclarification #3 - Date Order MD Signed <b><span id=""SLPClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb438249", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLPClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate3SignedReason"">
            <td id=""tdSLPClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate3SignedReason"" onchange=""textcheck('SLPClarDate3SignedReason');"" onkeyup=""textcheck('SLPClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate3SignedYesNo"">
            <td id=""tdSLPClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDate");
            WriteLiteral("3SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLPClarDate3SignedYesNo\'); nowarning(\'SLPClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb440601", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb441538", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb442513", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPDischargeDate"">
            <td id=""tdSLPDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 167991, "\"", 167999, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPDischargeDate"" onchange=""datechecknoerror('SLPDischargeDate'); checkclardate('SLP'); checkClarDate1('SLP')"" onkeyup=""datechecknoerror('SLPDischargeDate'); checkclardate('SLP'); checkClarDate1('SLP')"" />
            </td>
            <td>
                SLP Discharge Date
            </td>
            <td id=""tdSLPDischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdSLP2"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another SLP"" onclick=""addther('SLP2')"" id=""addSLP2"" />
            </td>
        </tr>
    </table>


    <table class=""TableClick content therapyvisable"" id=""SLP2"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove SLP"" onclick=""removether('SLP2')"" id=""removeSLP2"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trSLP2EvalDate"">
            <td id=""tdSLP2EvalD");
            WriteLiteral("ate\"");
            BeginWriteAttribute("class", " class=\"", 169028, "\"", 169036, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2EvalDate"" onchange=""datechecknoerror('SLP2EvalDate'); checkevaldate('SLP2') "" onkeyup=""datechecknoerror('SLP2EvalDate'); checkevaldate('SLP2')"" />
            </td>
            <td>SLP2 Evaluation Date</td>
            <td id=""tdSLP2EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP2EvalDateSigned"">
            <td id=""tdSLP2EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 169504, "\"", 169512, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2EvalDateSigned"" onchange=""datechecknoerror('SLP2EvalDateSigned'); checkevalsign('SLP2')"" onkeyup=""datechecknoerror('SLP2EvalDateSigned'); checkevalsign('SLP2')"" />
            </td>
            <td>
                SLP2 Evaluation - Date Order MD Signed <b><span id=""SLP2EvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb446267", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdSLP2EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2EvalDateSignedReason"">
            <td id=""tdSLP2EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2EvalDateSignedReason"" onchange=""textcheck('SLP2EvalDateSignedReason');"" onkeyup=""textcheck('SLP2EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP2 Evaluation Order MD Signed</td>
            <td id=""tdSLP2EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2EvalDateSignedYesNo"">
            <td id=""tdSLP2EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP2EvalDat");
            WriteLiteral("eSignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP2EvalDateSignedYesNo\'); nowarning(\'SLP2EvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb448619", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb449556", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb450531", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate"">
            <td id=""tdSLP2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 171559, "\"", 171567, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate"" onchange=""datechecknoerror('SLP2ClarDate'); checkclardate('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate'); checkclardate('SLP2')"" />
            </td>
            <td>
                SLP2 Clarification Date <b><span id=""SLP2ClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb452347", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDateReason"">
            <td id=""tdSLP2ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDateReason"" onchange=""textcheck('SLP2ClarDateReason');"" onkeyup=""textcheck('SLP2ClarDateReason');"" />
            </td>
            <td id=""SLP2ClarDateReasonText""></td>
            <td id=""tdSLP2ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDateSigned"">
            <td id=""tdSLP2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 172897, "\"", 172905, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDateSigned"" onchange=""datechecknoerror('SLP2ClarDateSigned'); checkClarDateSigned('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDateSigned'); checkClarDateSigned('SLP2')"" />
            </td>
            <td>
                SLP2 Clarification - Date Order MD Signed <b><span id=""SLP2ClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb454984", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDateSignedReason"">
            <td id=""tdSLP2ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDateSignedReason"" onchange=""textcheck('SLP2ClarDateSignedReason');"" onkeyup=""textcheck('SLP2ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDateSignedYesNo"">
            <td id=""tdSLP2ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP2ClarDate");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP2ClarDateSignedYesNo\'); nowarning(\'SLP2ClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb457335", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb458272", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb459247", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate1"">
            <td id=""tdSLP2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 174970, "\"", 174978, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate1"" onchange=""datechecknoerror('SLP2ClarDate1'); checkClarDate1('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate1'); checkClarDate1('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #1 Date <b><span id=""SLP2ClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb461078", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate1Reason"">
            <td id=""tdSLP2ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate1Reason"" onchange=""textcheck('SLP2ClarDate1Reason');"" onkeyup=""textcheck('SLP2ClarDate1Reason');"" />
            </td>
            <td id=""SLP2ClarDate1ReasonText""></td>
            <td id=""tdSLP2ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate1Signed"">
            <td id=""tdSLP2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 176323, "\"", 176331, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate1Signed"" onchange=""datechecknoerror('SLP2ClarDate1Signed'); checkClarDate1Signed('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate1Signed'); checkClarDate1Signed('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #1 - Date Order MD Signed <b><span id=""SLP2ClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb463730", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate1SignedReason"">
            <td id=""tdSLP2ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate1SignedReason"" onchange=""textcheck('SLP2ClarDate1SignedReason');"" onkeyup=""textcheck('SLP2ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate1SignedYesNo"">
            <td id=""tdSLP2ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddSLP");
            WriteLiteral("2ClarDate1SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP2ClarDate1SignedYesNo\'); nowarning(\'SLP2ClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb466093", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb467030", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb468005", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate2"">
            <td id=""tdSLP2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 178419, "\"", 178427, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate2"" onchange=""datechecknoerror('SLP2ClarDate2'); checkClarDate2('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate2'); checkClarDate2('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #2 Date <b><span id=""SLP2ClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb469836", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate2Reason"">
            <td id=""tdSLP2ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate2Reason"" onchange=""textcheck('SLP2ClarDate2Reason');"" onkeyup=""textcheck('SLP2ClarDate2Reason');"" />
            </td>
            <td id=""SLP2ClarDate2ReasonText""></td>
            <td id=""tdSLP2ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate2Signed"">
            <td id=""tdSLP2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 179772, "\"", 179780, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate2Signed"" onchange=""datechecknoerror('SLP2ClarDate2Signed'); checkClarDate2Signed('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate2Signed'); checkClarDate2Signed('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #2 - Date Order MD Signed <b><span id=""SLP2ClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb472488", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate2SignedReason"">
            <td id=""tdSLP2ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate2SignedReason"" onchange=""textcheck('SLP2ClarDate2SignedReason');"" onkeyup=""textcheck('SLP2ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate2SignedYesNo"">
            <td id=""tdSLP2ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddSLP");
            WriteLiteral("2ClarDate2SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP2ClarDate2SignedYesNo\'); nowarning(\'SLP2ClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb474851", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb475788", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb476763", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate3"">
            <td id=""tdSLP2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 181867, "\"", 181875, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate3"" onchange=""datechecknoerror('SLP2ClarDate3'); checkClarDate3('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate3'); checkClarDate3('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #3 Date <b><span id=""SLP2ClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb478593", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate3Reason"">
            <td id=""tdSLP2ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate3Reason"" onchange=""textcheck('SLP2ClarDate3Reason');"" onkeyup=""textcheck('SLP2ClarDate3Reason');"" />
            </td>
            <td id=""SLP2ClarDate3ReasonText""></td>
            <td id=""tdSLP2ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate3Signed"">
            <td id=""tdSLP2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 183220, "\"", 183228, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate3Signed"" onchange=""datechecknoerror('SLP2ClarDate3Signed'); checkClarDate3Signed('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate3Signed'); checkClarDate3Signed('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #3 - Date Order MD Signed <b><span id=""SLP2ClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb481245", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP2ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate3SignedReason"">
            <td id=""tdSLP2ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate3SignedReason"" onchange=""textcheck('SLP2ClarDate3SignedReason');"" onkeyup=""textcheck('SLP2ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate3SignedYesNo"">
            <td id=""tdSLP2ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddSLP");
            WriteLiteral("2ClarDate3SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP2ClarDate3SignedYesNo\'); nowarning(\'SLP2ClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb483608", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb484545", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb485520", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2DischargeDate"">
            <td id=""tdSLP2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 185324, "\"", 185332, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2DischargeDate"" onchange=""datechecknoerror('SLP2DischargeDate'); checkclardate('SLP2'); checkClarDate1('SLP2')"" onkeyup=""datechecknoerror('SLP2DischargeDate'); checkclardate('SLP2'); checkClarDate1('SLP2')"" />
            </td>
            <td>
                SLP2 Discharge Date
            </td>
            <td id=""tdSLP2DischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdSLP3"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another SLP"" onclick=""addther('SLP3')"" id=""addSLP3"" />
            </td>
        </tr>

    </table>




    <table class=""TableClick content therapyvisable"" id=""SLP3"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove SLP"" onclick=""removether('SLP3')"" id=""removeSLP3"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trSLP3EvalDate"">
            <td id=");
            WriteLiteral("\"tdSLP3EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 186373, "\"", 186381, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3EvalDate"" onchange=""datechecknoerror('SLP3EvalDate'); checkevaldate('SLP3') "" onkeyup=""datechecknoerror('SLP3EvalDate'); checkevaldate('SLP3')"" />
            </td>
            <td>SLP3 Evaluation Date</td>
            <td id=""tdSLP3EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP3EvalDateSigned"">
            <td id=""tdSLP3EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 186849, "\"", 186857, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3EvalDateSigned"" onchange=""datechecknoerror('SLP3EvalDateSigned'); checkevalsign('SLP3')"" onkeyup=""datechecknoerror('SLP3EvalDateSigned'); checkevalsign('SLP3')"" />
            </td>
            <td>
                SLP3 Evaluation - Date Order MD Signed <b><span id=""SLP3EvalDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb489289", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Date of evaluation order signed should be within 30 days of evaluation date
                    </span>
                </div>
            </td>
            <td id=""tdSLP3EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3EvalDateSignedReason"">
            <td id=""tdSLP3EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3EvalDateSignedReason"" onchange=""textcheck('SLP3EvalDateSignedReason');"" onkeyup=""textcheck('SLP3EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP3 Evaluation Order MD Signed</td>
            <td id=""tdSLP3EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3EvalDateSignedYesNo"">
            <td id=""tdSLP3EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP3EvalDat");
            WriteLiteral("eSignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP3EvalDateSignedYesNo\'); nowarning(\'SLP3EvalDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb491641", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb492578", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb493553", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate"">
            <td id=""tdSLP3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 188904, "\"", 188912, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate"" onchange=""datechecknoerror('SLP3ClarDate'); checkclardate('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate'); checkclardate('SLP3')"" />
            </td>
            <td>
                SLP3 Clarification Date <b><span id=""SLP3ClarDateDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb495369", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date should be the same as Evaluation Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDateReason"">
            <td id=""tdSLP3ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDateReason"" onchange=""textcheck('SLP3ClarDateReason');"" onkeyup=""textcheck('SLP3ClarDateReason');"" />
            </td>
            <td id=""SLP3ClarDateReasonText""></td>
            <td id=""tdSLP3ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDateSigned"">
            <td id=""tdSLP3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 190242, "\"", 190250, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDateSigned"" onchange=""datechecknoerror('SLP3ClarDateSigned'); checkClarDateSigned('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDateSigned'); checkClarDateSigned('SLP3')"" />
            </td>
            <td>
                SLP3 Clarification - Date Order MD Signed <b><span id=""SLP3ClarDateSignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb498006", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDateSignedReason"">
            <td id=""tdSLP3ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDateSignedReason"" onchange=""textcheck('SLP3ClarDateSignedReason');"" onkeyup=""textcheck('SLP3ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDateSignedYesNo"">
            <td id=""tdSLP3ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP3ClarDate");
            WriteLiteral("SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP3ClarDateSignedYesNo\'); nowarning(\'SLP3ClarDateSignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb500357", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb501294", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb502269", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate1"">
            <td id=""tdSLP3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 192314, "\"", 192322, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate1"" onchange=""datechecknoerror('SLP3ClarDate1'); checkClarDate1('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate1'); checkClarDate1('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #1 Date <b><span id=""SLP3ClarDate1Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb504099", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate1Reason"">
            <td id=""tdSLP3ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate1Reason"" onchange=""textcheck('SLP3ClarDate1Reason');"" onkeyup=""textcheck('SLP3ClarDate1Reason');"" />
            </td>
            <td id=""SLP3ClarDate1ReasonText""></td>
            <td id=""tdSLP3ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate1Signed"">
            <td id=""tdSLP3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 193667, "\"", 193675, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate1Signed"" onchange=""datechecknoerror('SLP3ClarDate1Signed'); checkClarDate1Signed('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate1Signed'); checkClarDate1Signed('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #1 - Date Order MD Signed <b><span id=""SLP3ClarDate1SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb506751", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate1SignedReason"">
            <td id=""tdSLP3ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate1SignedReason"" onchange=""textcheck('SLP3ClarDate1SignedReason');"" onkeyup=""textcheck('SLP3ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate1SignedYesNo"">
            <td id=""tdSLP3ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddSLP");
            WriteLiteral("3ClarDate1SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP3ClarDate1SignedYesNo\'); nowarning(\'SLP3ClarDate1SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb509114", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb510051", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb511026", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate2"">
            <td id=""tdSLP3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 195763, "\"", 195771, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate2"" onchange=""datechecknoerror('SLP3ClarDate2'); checkClarDate2('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate2'); checkClarDate2('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #2 Date <b><span id=""SLP3ClarDate2Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb512857", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate2Reason"">
            <td id=""tdSLP3ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate2Reason"" onchange=""textcheck('SLP3ClarDate2Reason');"" onkeyup=""textcheck('SLP3ClarDate2Reason');"" />
            </td>
            <td id=""SLP3ClarDate2ReasonText""></td>
            <td id=""tdSLP3ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate2Signed"">
            <td id=""tdSLP3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 197116, "\"", 197124, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate2Signed"" onchange=""datechecknoerror('SLP3ClarDate2Signed'); checkClarDate2Signed('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate2Signed'); checkClarDate2Signed('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #2 - Date Order MD Signed <b><span id=""SLP3ClarDate2SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb515509", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate2SignedReason"">
            <td id=""tdSLP3ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate2SignedReason"" onchange=""textcheck('SLP3ClarDate2SignedReason');"" onkeyup=""textcheck('SLP3ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate2SignedYesNo"">
            <td id=""tdSLP3ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddSLP");
            WriteLiteral("3ClarDate2SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP3ClarDate2SignedYesNo\'); nowarning(\'SLP3ClarDate2SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb517872", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb518809", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb519784", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate3"">
            <td id=""tdSLP3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 199211, "\"", 199219, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate3"" onchange=""datechecknoerror('SLP3ClarDate3'); checkClarDate3('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate3'); checkClarDate3('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #3 Date <b><span id=""SLP3ClarDate3Due""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb521614", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Reclarification needed 28 days after Clarification.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate3Reason"">
            <td id=""tdSLP3ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate3Reason"" onchange=""textcheck('SLP3ClarDate3Reason');"" onkeyup=""textcheck('SLP3ClarDate3Reason');"" />
            </td>
            <td id=""SLP3ClarDate3ReasonText""></td>
            <td id=""tdSLP3ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate3Signed"">
            <td id=""tdSLP3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 200564, "\"", 200572, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate3Signed"" onchange=""datechecknoerror('SLP3ClarDate3Signed'); checkClarDate3Signed('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate3Signed'); checkClarDate3Signed('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #3 - Date Order MD Signed <b><span id=""SLP3ClarDate3SignedDue""></span></b>

                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "5c9560d142442f9e797967d58032692b41f0b8bb524266", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Clarification Date Signed should be within 30 days of Clarification Date.
                    </span>
                </div>
            </td>
            <td id=""tdSLP3ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate3SignedReason"">
            <td id=""tdSLP3ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate3SignedReason"" onchange=""textcheck('SLP3ClarDate3SignedReason');"" onkeyup=""textcheck('SLP3ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate3SignedYesNo"">
            <td id=""tdSLP3ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddSLP");
            WriteLiteral("3ClarDate3SignedYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'SLP3ClarDate3SignedYesNo\'); nowarning(\'SLP3ClarDate3SignedYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb526629", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb527566", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb528541", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3DischargeDate"">
            <td id=""tdSLP3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 202668, "\"", 202676, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3DischargeDate"" onchange=""datechecknoerror('SLP3DischargeDate'); checkclardate('SLP3'); checkClarDate1('SLP3')"" onkeyup=""datechecknoerror('SLP3DischargeDate'); checkclardate('SLP3'); checkClarDate1('SLP3')"" />
            </td>
            <td>
                SLP3 Discharge Date
            </td>
            <td id=""tdSLP3DischargeDateConfirm"" class=""confirmed""></td>
        </tr>

    </table>




    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">
        <tr class=""yes trerror"" style=""border:none"" id=""trTherapyUnitsVer"">
            <td id=""tdTherapyUnitsVer"" class=""tderror"">
                <input type=""checkbox"" id=""cbTherapyUnitsVer"" onchange=""cbcheck('TherapyUnitsVer')"" />
            </td>
            <td>Therapy Units/Visits verified for each discipline with UB04</td>
            <td id=""tdTherapyUnitsVerConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div");
            WriteLiteral(">\n</div>\n");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnNursing"">
    <table style=""width:100%"">
        <tr>
            <td>Nursing</td>
            <td style=""text-align:right; padding-right:50px;"" id=""NursingComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""NursingContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""yes  trerror"" style=""border:none"" id=""trNDailySkill"">
            <td id=""tdNDailySkill"" class=""tderror"">
                <select class=""txtbox"" id=""ddNDailySkill"" onchange=""ddcheck('NDailySkill'); nowarning('NDailySkill')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb531832", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb532769", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb533743", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Daily Skilled Documentation present during dates of service</td>
            <td id=""tdNDailySkillConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNIVCharges"">
            <td id=""tdNIVCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNIVCharges"" onchange=""ddcheck('NIVCharges'); nowarning('NIVCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb535183", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb536120", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb537094", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb538069", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>IV Charges on UB04 have MD order</td>
            <td id=""tdNIVChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNSupplies"">
            <td id=""tdNSupplies"" class=""tderror"">
                <select class=""txtbox"" id=""ddNSupplies"" onchange=""ddcheck('NSupplies'); nowarning('NSupplies')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb539476", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb540413", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb541387", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb542362", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Supplies on UB04 have MD order</td>
            <td id=""tdNSuppliesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNPharmacy"">
            <td id=""tdNPharmacy"" class=""tderror"">
                <select class=""txtbox"" id=""ddNPharmacy"" onchange=""ddcheck('NPharmacy'); nowarning('NPharmacy')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb543766", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb544703", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb545677", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb546652", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Pharmacy Charges on UB-04 have MD order</td>
            <td id=""tdNPharmacyConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNO2Charges"">
            <td id=""tdNO2Charges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNO2Charges"" onchange=""ddcheck('NO2Charges'); nowarning('NO2Charges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb548070", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb549007", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb549981", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb550956", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>O2 Charges on UB04 have MD order</td>
            <td id=""tdNO2ChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNLabCharges"">
            <td id=""tdNLabCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNLabCharges"" onchange=""ddcheck('NLabCharges'); nowarning('NLabCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb552373", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb553310", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb554284", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb555259", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Lab Charges on UB04 have MD order</td>
            <td id=""tdNLabChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNRayCharges"">
            <td id=""tdNRayCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNRayCharges"" onchange=""ddcheck('NRayCharges'); nowarning('NRayCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb556678", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb557615", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb558589", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb559564", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>X-Ray charges on UB04 have MD order</td>
            <td id=""tdNRayChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNEquipCharges"">
            <td id=""tdNEquipCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNEquipCharges"" onchange=""ddcheck('NEquipCharges'); nowarning('NEquipCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb560995", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb561932", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb562906", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5c9560d142442f9e797967d58032692b41f0b8bb563881", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>Equipment charges on UB04 have MD order</td>\n            <td id=\"tdNEquipChargesConfirm\" class=\"confirmed\"></td>\n        </tr>\n\n    </table>\n    <div style=\"height:20px\"></div>\n</div>\n");
            WriteLiteral("<script>\n    function showdel() {\n        $(\"#showdel\").dialog({\n            resizable: false,\n            height: \"auto\",\n            width: \"350px\",\n            modal: true\n        });\n    };\n</script>\n");
            WriteLiteral(@"<div style=""visibility:hidden; height:0px; display:none"">
    <div id=""showdel"" title=""Delete Record?"">
        <div>Are you sure you want to delete this record?</div>
        <br />
        <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-primary"" onclick=""delrecord()"">Delete</button>
            <button type=""button"" class=""btn btn-secondary"" onclick=""$('#showdel').dialog('close');"">Close</button>
        </div>
    </div>
</div>
");
            WriteLiteral(@"<script>
    function shownotes() {
        document.getElementById('txtEditNotes').innerHTML = document.getElementById('divNotes').innerHTML
        $(""#shownotes"").dialog({
            resizable: false,
            height: ""auto"",
            width: ""80%"",
            modal: true
        });
    };
</script>
");
            WriteLiteral(@"<div style=""visibility:hidden; height:0px; display:none"">
    <div id=""shownotes"" title=""Edit Notes"">
        <div data-tiny-editor id=""txtEditNotes"">

        </div>
        <script src=""https://unpkg.com/tiny-editor/dist/bundle.js""></script>
        <br />
        <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-primary"" onclick=""ajaxpost()"">Save</button>
            <button type=""button"" class=""btn btn-secondary"" onclick=""$('#shownotes').dialog('close');"">Close</button>
        </div>
    </div>
</div>
");
            WriteLiteral("<script>\n    function ajaxpost() {\n        $.ajax({\n            type: \'POST\',\n            dataType: \'json\',\n            url: \'/TripleCheck/AjaxMethod\',\n            data: {\"id\": \'");
#nullable restore
#line 4431 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                     Write(Html.Raw(ViewData["passid"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', ""notes"": document.getElementById('txtEditNotes').innerHTML },
            success: function (Data) {
                alert(data.id);
                alert(data.name);
            },
            success: function (response) {
                $('#shownotes').dialog('close');
                document.getElementById('divNotes').innerHTML = response
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {

            }
        });
    }

</script>
");
            WriteLiteral("<script>\n    function showteam() {\n\n        $(\"#showteam\").dialog({\n            resizable: false,\n            height: \"auto\",\n            width: \"500px\",\n            modal: true\n        });\n    };\n</script>\n");
            WriteLiteral("<div style=\"visibility:hidden; height:0px; display:none\">\n    <div id=\"showteam\" title=\"Edit Team\">\n        <div style=\"overflow-y:auto; max-height:200px;\" id=\"divTeamEdit\">\n            ");
#nullable restore
#line 4465 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["teameditdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div style=""height:10px""></div>
        <button type=""submit"" class=""btn btn-primary"" onclick=""removeteam()"">Remove Selected</button>
        <hr />
        <table>
            <tr>
                <td>Name</td>
                <td>
                    <input class=""txtbox"" maxlength=""99"" id=""txtTeamName"" />
                    <div id=""validateTeamName"" class=""hidden"">Name Required</div>
                </td>
            </tr>
            <tr>
                <td style=""padding-right:15px; padding-top:10px"">Credentials</td>
                <td style=""padding-top:10px;"">
                    <input class=""txtbox"" maxlength=""99"" id=""txtTeamCred"" />
                    <div id=""validateTeamCred"" class=""hidden"">Credential Required</div>
                </td>
            </tr>
        </table>

        <div style=""height:10px""></div>
        <button type=""submit"" class=""btn btn-primary"" onclick=""saveteam()"">Add Member</button>
        <div style=""height:10px""></div>
        <div class=""moda");
            WriteLiteral("l-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" onclick=\"getteam()\">Close</button>\n        </div>\n    </div>\n</div>\n");
            WriteLiteral(@"<script>
    var coll = document.getElementsByClassName(""collapsible"");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener(""click"", function () {
            this.classList.toggle(""active"");
            var content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + ""px"";
            }
        });
    }

    function delrecord() {
        document.getElementById('txtRecID').value = document.getElementById('txtID').value
        document.getElementById('delreport').click()
    }

    function getteam() {
        $.get(""/TripleCheck/getteam"", { passid: document.getElementById('txtID').value }, function (data) { document.getElementById('divTeam').innerHTML = data });
        $('#showteam').dialog('close');
    }

    function removeteam() {
        var markedCheckbox = document.getElementsByName('checkremove');
        for (var c");
            WriteLiteral(@"heckbox of markedCheckbox) {
            if (checkbox.checked)
                $.get(""/TripleCheck/removeteam"", { strid: document.getElementById('txtID').value, strTeamID: checkbox.value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
        }
    }

    function saveteam() {
        var errors = '0'

        if (document.getElementById('txtTeamName').value == '') {
            document.getElementById('validateTeamName').className = 'validation'
            errors = '1'
        } else {
            document.getElementById('validateTeamName').className = 'hidden'
        }

        if (document.getElementById('txtTeamCred').value == '') {
            document.getElementById('validateTeamCred').className = 'validation'
            errors = '1'
        } else {
            document.getElementById('validateTeamCred').className = 'hidden'
        }

        if (errors == '0') {
            $.get(""/TripleCheck/saveteam"", { strid: document.getElementById('txtID').value, strName: doc");
            WriteLiteral(@"ument.getElementById('txtTeamName').value, strCred: document.getElementById('txtTeamCred').value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
            document.getElementById('txtTeamCred').value = ''
            document.getElementById('txtTeamName').value = ''
        }
    }

    function savenotes() {
        $.get(""/TripleCheck/savenotes"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtEditNotes').innerHTML }, function (data) { });
        document.getElementById('divNotes').innerHTML = document.getElementById('txtEditNotes').innerHTML
        $('#shownotes').dialog('close')
    }

    function startdate() {
        if (moment(document.getElementById('txtStartDate').value).isValid()) {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtStartDate').value, strdetail: 'startstay' }, function (data) { });
            document.getElementById('Validation");
            WriteLiteral(@"StartDate').className = 'hidden'
        } else {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'null', strdetail: 'startstay' }, function (data) { });
            document.getElementById('ValidationStartDate').className = 'validation'
        }
    }


    function addassessment(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd.value, strdetail: 'additionalassessment' }, function (data) { });

        var y = document.getElementsByClassName(""yes"");
        var i;
        if (dd.value == ""No"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""addaddition"");
            }
        } else {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""addaddition"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document");
            WriteLiteral(@".getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classList.contains('ac");
            WriteLiteral(@"tive')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function paymenttype(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd.value, strdetail: 'paymenttype' }, function (data) { });
        var x = document.getElementsByClassName(""pay"");
        var b;
        for (b = 0; b < x.length; b++) {
            x[b].classList.add(""paytype"");
        }
        if (dd.value == ""PDPM"") {
            var y = document.getElementsByClassName(""pdpm"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""HMO A"") {
            var y = document.getElementsByClassName(""hmoa"");
            var i;
            for (i = 0; i < y.length; i++) {
              ");
            WriteLiteral(@"  y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""Levels"") {
            var y = document.getElementsByClassName(""levels"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""MCB"") {
            var y = document.getElementsByClassName(""mcb"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document.getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

  ");
            WriteLiteral(@"      if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function checkqualifying() {
        if (moment(document.getElementById('tx");
            WriteLiteral(@"tBOStayFrom').value).isValid() && moment(document.getElementById('txtBOStayTo').value).isValid()) {
            var dchange = datediff(parseDate(document.getElementById('txtBOStayFrom').value), parseDate(document.getElementById('txtBOStayTo').value))
            if (dchange < 3) {
                document.getElementById('trBOStayReason').classList.remove(""booverride"")
            } else {
                document.getElementById('tdBOStayReason').className = ""tderror""
                document.getElementById('trBOStayReason').classList.add(""trerror"")
                document.getElementById('trBOStayReason').classList.add(""booverride"")
                removechanges('BOStayReason')
            }
        } else {
            document.getElementById('tdBOStayReason').className = ""tderror""
            document.getElementById('trBOStayReason').classList.add(""trerror"")
            document.getElementById('trBOStayReason').classList.add(""booverride"")
            removechanges('BOStayReason')
        }
        checkcomp");
            WriteLiteral(@"lete()
        boresize()
    }

    function patientleave(dd, type) {
        if (dd.value == 'Yes') {
            document.getElementById('tdMDSUnbillDays').className = ""tderror""
            document.getElementById('trMDSUnbillDays').classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"").disabled = false;
            document.getElementById(""txtMDSUnbillDays"").value = ''
            document.getElementById('tdBOPatient').className = ''
            document.getElementById('trBOPatient').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient', 'Yes', 'dropdown')
            }
            removechanges('MDSUnbillDays')
        } else if (dd.value == 'No') {
            document.getElementById('tdMDSUnbillDays').className = """"
            document.getElementById('trMDSUnbillDays').classList.remove(""trerror"")
            document.getElementById(""txtMDSUnbillDays"").disabled = true;
            document.getElementById(""txtMDSUnbillDays"").value");
            WriteLiteral(@" = '0'
            document.getElementById('tdBOPatient').className = ''
            document.getElementById('trBOPatient').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient', 'No', 'dropdown')
                savechanges('MDSUnbillDays', '0', 'textbox')
            }
        } else {
            document.getElementById('tdMDSUnbillDays').className = ""tderror""
            document.getElementById('trMDSUnbillDays').classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"").disabled = true;
            document.getElementById(""txtMDSUnbillDays"").value = ''
            document.getElementById('tdBOPatient').className = 'tderror'
            document.getElementById('trBOPatient').classList.add(""trerror"")
            removechanges('BOPatient')
            removechanges('MDSUnbillDays')
        }
        checkcomplete()
    }

    function numdaysinter() {
        if (document.getElementById(""txtMDSUnbillDays"").value == """") {
            docum");
            WriteLiteral(@"ent.getElementById('tdMDSUnbillDays').className = ""tderror""
            document.getElementById('trMDSUnbillDays').classList.add(""trerror"")
            removechanges('MDSUnbillDays')
        } else {
            document.getElementById('tdMDSUnbillDays').className = """"
            document.getElementById('trMDSUnbillDays').classList.remove(""trerror"")
            savechanges('MDSUnbillDays', document.getElementById(""txtMDSUnbillDays"").value, 'textbox')
        }
        checkcomplete()
    }


    function DCNOMNC(type) {
        if (type == 'save') {
            document.getElementById('trDOOR').classList.add('trerror')
            document.getElementById('tdDOOR').classList.add('tderror')
            document.getElementById('txtDOOR').value = ''
            document.getElementById('tdDOORConfirm').innerHTML = ''
            removechanges('DOOR')
        }

        if (moment(document.getElementById('txtDCNOMNC').value).isValid() && moment(document.getElementById('txtDCLastDay').value).isValid()) {
          ");
            WriteLiteral(@"  var dchange = datediff(parseDate(document.getElementById('txtDCNOMNC').value), parseDate(document.getElementById('txtDCLastDay').value))
            if (dchange < 3) {
                document.getElementById('tdDCLastDay').className = """"
                document.getElementById('tdDCNOMNC').className = """"
                document.getElementById('trDCLastDay').classList.remove(""trerror"")
                document.getElementById('trDCNOMNC').classList.remove(""trerror"")
                if (type == 'save') {
                    savechanges('DCNOMNC', document.getElementById('txtDCNOMNC').value, 'textbox')
                    savechanges('DCLastDay', document.getElementById('txtDCLastDay').value, 'textbox')
                }

                document.getElementById('trDOOR').classList.add('dcoverride')

                document.getElementById('trDOOR').classList.remove('dcoverride')



            } else {
                document.getElementById('tdDCLastDay').className = """"
                document.getElementById");
            WriteLiteral(@"('tdDCNOMNC').className = """"
                document.getElementById('trDCLastDay').classList.remove(""trerror"")
                document.getElementById('trDCNOMNC').classList.remove(""trerror"")
                if (type == 'save') {
                    savechanges('DCNOMNC', document.getElementById('txtDCNOMNC').value, 'textbox')
                    savechanges('DCLastDay', document.getElementById('txtDCLastDay').value, 'textbox')
                }
                document.getElementById('trDOOR').classList.add('dcoverride')

            }

        } else {
            document.getElementById('tdDCLastDay').className = ""tderror""
            document.getElementById('tdDCNOMNC').className = ""tderror""
            document.getElementById('trDCLastDay').classList.add(""trerror"")
            document.getElementById('trDCNOMNC').classList.add(""trerror"")
            document.getElementById('trDOOR').classList.add('dcoverride')
            removechanges('DCNOMNC')
            removechanges('DCLastDay')

        }




   ");
            WriteLiteral(@"     if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }

        checkcomplete()
    }



    function checkevaldate(type) {
        if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
            document.getElementById('tr' + type + 'EvalDateSigned').classList.remove('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateSignedReason').classList.remove('therapyvisable')

            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))
            evaldate.setDate(evaldate.getDate() + 30)

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'EvalDateSignedDue').innerHTML = '(Due by ' + disp");
            WriteLiteral(@"laydate + ')'
            document.getElementById(type + 'ClarDateDue').innerHTML = '(Due by ' + document.getElementById('txt' + type + 'EvalDate').value + ')'

            document.getElementById('tr' + type + 'ClarDate').classList.remove('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
            document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'

            document.getElementById('tr' + type + 'DischargeDate').classList.remove('therapyvisable')
        } else {
            document.getElementById('tr' + type + 'EvalDateSigned').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'EvalDateSigned').value = ''
            removechanges(type + 'EvalDateSigned')

            document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateSignedReason').classL");
            WriteLiteral(@"ist.add('trerror')
            document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
            removechanges(type + 'EvalDateSignedReason')

            document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
            removechanges(type + 'EvalDateSignedYesNo')

            document.getElementById('tr' + type + 'ClarDate').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate').value = ''
            removechanges(type + 'ClarDate')

            document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
      ");
            WriteLiteral(@"      document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateReason').value = ''
            removechanges(type + 'ClarDateReason')

            document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'DischargeDate').value = ''
            removechanges(type + 'DischargeDate')

            document.getElementById('tr' + type + 'ClarDateSigned').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDateSigned').value = ''
            removechanges(type + 'ClarDateSigned')

            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
            document.getElementById('td' + typ");
            WriteLiteral(@"e + 'ClarDateSignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
            removechanges(type + 'ClarDateSignedReason')


            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
            removechanges(type + 'ClarDateSignedYesNo')

            document.getElementById('tr' + type + 'ClarDate1').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1').value = ''
            removechanges(type + 'ClarDate1')

            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1Reason");
            WriteLiteral(@"').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
            removechanges(type + 'ClarDate1Reason')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
            removechanges(type + 'ClarDate1SignedReason')

            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classL");
            WriteLiteral(@"ist.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
            removechanges(type + 'ClarDate1SignedYesNo')

            document.getElementById('tr' + type + 'ClarDate2').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2').value = ''
            removechanges(type + 'ClarDate2')

            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
            removechanges(type + 'ClarDate2Reason')

            docum");
            WriteLiteral(@"ent.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
            removechanges(type + 'ClarDate2Signed')

            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
            removechanges(type + 'ClarDate2SignedReason')

            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type +");
            WriteLiteral(@" 'ClarDate2SignedYesNo').value = ''
            removechanges(type + 'ClarDate2SignedYesNo')

            document.getElementById('tr' + type + 'ClarDate3').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3').value = ''
            removechanges(type + 'ClarDate3')

            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
            removechanges(type + 'ClarDate3Reason')

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
            removechanges(type + 'ClarDate3Signed')

            document.getElementById('tr' + type + 'Clar");
            WriteLiteral(@"Date3SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
            removechanges(type + 'ClarDate3SignedReason')

            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
            removechanges(type + 'ClarDate3SignedYesNo')
        }
        therapyresize()
        checkcomplete()
    }

    function checkevalsign(type) {
        if (moment(document.getElementById('txt' + type + 'EvalDateSigned').valu");
            WriteLiteral(@"e).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDateSigned').value))

            if (signdate <= evaldate) {
                document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
                removechanges(type + 'EvalDateSignedReason')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
                ");
            WriteLiteral(@"document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
                removechanges(type + 'EvalDateSignedYesNo')
            } else {
                document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
                removechanges(type + 'EvalDateSignedReason')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.remove('therapyvisable')
            }
        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
                document.getElementById('tr' + type + 'EvalDateS");
            WriteLiteral(@"ignedReason').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
                removechanges(type + 'EvalDateSignedYesNo')
            }
        }
        therapyresize()
        checkcomplete()
    }

    function checkclardate(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate').value).isValid()) {
            if (document.getElementById('txt' + type + 'ClarDate').value == document.getElementById('txt' + type + 'EvalDate').value) {
                document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateReason");
            WriteLiteral(@"').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateReason').value = ''
                removechanges(type + 'ClarDateReason')
            } else {
                document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for ' + type + ' Clarification Date not on Evaluation Date'
            }

            document.getElementById('tr' + type + 'ClarDateSigned').classList.remove('therapyvisable')


            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
       ");
            WriteLiteral(@"     var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDateSignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate1Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                discha");
            WriteLiteral(@"rgedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 28)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')

                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
       ");
            WriteLiteral(@"             document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                    removechanges(type + 'ClarDateSignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDateSignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                        removechanges(type + 'ClarD");
            WriteLiteral(@"ateSignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')

                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                removechanges(type + 'ClarDateSignedYesNo')
            }

 ");
            WriteLiteral(@"           if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                    removechanges(type + 'ClarDate1Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate1Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #1 Date'
                    }

                }
     ");
            WriteLiteral(@"       } else {
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                removechanges(type + 'ClarDate1Reason')
            }
            document.getElementById('tr' + type + 'ClarDate1').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDateSigned').value))

                if (evaldate >= signdate) {
                    docu");
            WriteLiteral(@"ment.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')

                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                    removechanges(type + 'ClarDateSignedYesNo')
                } else {
                    document.getElementById('tr' + typ");
            WriteLiteral(@"e + 'ClarDateSignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
                document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'

                document.getElementById('tr' + type + 'ClarDateSigned').classList.add('therap");
            WriteLiteral(@"yvisable')
                document.getElementById('txt' + type + 'ClarDateSigned').value = ''
                removechanges(type + 'ClarDateSigned')
            }

            document.getElementById('tr' + type + 'ClarDate1').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1').value = ''
            removechanges(type + 'ClarDate1')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
            removechanges(type + 'Cla");
            WriteLiteral(@"rDate1Reason')

            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
            removechanges(type + 'ClarDateSignedReason')

            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
            removechanges(type + 'ClarDateSignedYesNo')

            checkClarDate1('PT')
            checkClarDate2('PT')
            checkClarDate3('PT')
        }
        t");
            WriteLiteral(@"herapyresize()
        checkcomplete()
    }

    function checkClarDateSigned(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDateSigned').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')

                document.getElementById('tr' + type + 'ClarD");
            WriteLiteral(@"ateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                removechanges(type + 'ClarDateSignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')
            }
        ");
            WriteLiteral(@"} else {
            checkclardate(type)
        }
        therapyresize()
        checkcomplete()
    }




    function checkClarDate1(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                removechanges(type + 'ClarDate1Reason')

            } else {

              ");
            WriteLiteral(@"  document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate1SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var dis");
            WriteLiteral(@"playdate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate2Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate");
            WriteLiteral(@"1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')

                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                    removechanges(type + 'ClarDate1SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate1Signed'");
            WriteLiteral(@").value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                        removechanges(type + 'ClarDate1SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Si");
            WriteLiteral(@"gnedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')

                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                removechanges(type + 'ClarDate1SignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                    document.getElementById('t");
            WriteLiteral(@"d' + type + 'ClarDate2Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                    removechanges(type + 'ClarDate2Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate2Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #2 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                document.getEleme");
            WriteLiteral(@"ntById('txt' + type + 'ClarDate2Reason').value = ''
                removechanges(type + 'ClarDate2Reason')
            }
            document.getElementById('tr' + type + 'ClarDate2').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementB");
            WriteLiteral(@"yId('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')

                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                    removechanges(type + 'ClarDate1SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' +");
            WriteLiteral(@" type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr'");
            WriteLiteral(@" + type + 'ClarDate1Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }



                document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
                removechanges(type + 'ClarDate1Signed')
            }

            document.getElementById('tr' + type + 'ClarDate2').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2').value = ''
            removechanges(type + 'ClarDate2')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisa");
            WriteLiteral(@"ble')
            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
            removechanges(type + 'ClarDate2Reason')

            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
            removechanges(type + 'ClarDate1SignedReason')

            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
            document.getElementById('t");
            WriteLiteral(@"d' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
            removechanges(type + 'ClarDate1SignedYesNo')

            checkClarDate2('PT')
            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate1Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                docu");
            WriteLiteral(@"ment.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')

                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                removechanges(type + 'ClarDate1SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.remove('therapyvisable')


                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedRea");
            WriteLiteral(@"son').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')
            }
        } else {
            checkClarDate1(type)
        }
        therapyresize()
        checkcomplete()
    }



    function checkClarDate2(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate2').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate");
            WriteLiteral(@"2Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                removechanges(type + 'ClarDate2Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate2Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

  ");
            WriteLiteral(@"          var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate2SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate3Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischar");
            WriteLiteral(@"gedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')

                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDat");
            WriteLiteral(@"e2SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                    removechanges(type + 'ClarDate2SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                        removechanges(type + 'ClarDate2SignedYesNo')
                    }

         ");
            WriteLiteral(@"       }
            } else {
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')

                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                removechanges(type + 'ClarDate2SignedYesNo')
            }

            if (evaldate28 < todaydate) ");
            WriteLiteral(@"{
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                    removechanges(type + 'ClarDate3Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate3Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #3 Date'
                    }

                }
            } else {
                documen");
            WriteLiteral(@"t.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                removechanges(type + 'ClarDate3Reason')
            }
            document.getElementById('tr' + type + 'ClarDate3').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'C");
            WriteLiteral(@"larDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')

                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                    removechanges(type + 'ClarDate2SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo'");
            WriteLiteral(@").classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
      ");
            WriteLiteral(@"              document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }

                document.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
                removechanges(type + 'ClarDate2Signed')
            }

            document.getElementById('tr' + type + 'ClarDate3').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3').value = ''
            removechanges(type + 'ClarDate3')

            documen");
            WriteLiteral(@"t.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
            removechanges(type + 'ClarDate2Signed')

            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
            removechanges(type + 'ClarDate3Reason')

            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2SignedReason').va");
            WriteLiteral(@"lue = ''
            removechanges(type + 'ClarDate2SignedReason')

            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
            removechanges(type + 'ClarDate2SignedYesNo')

            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate2Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2Signed').value)");
            WriteLiteral(@")

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')

                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                removechanges(type + 'ClarDate2SignedYesNo')
            } else {
                docum");
            WriteLiteral(@"ent.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')
            }
        } else {
            checkClarDate2(type)
        }
        therapyresize()
        checkcomplete()
    }



    function checkClarDate3(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate3').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDat");
            WriteLiteral(@"e2').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                removechanges(type + 'ClarDate3Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse");
            WriteLiteral(@"(document.getElementById('txt' + type + 'ClarDate3').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate3SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDat");
            WriteLiteral(@"e() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')

                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedYesNo");
            WriteLiteral(@"').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                    removechanges(type + 'ClarDate3SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                        removechanges(type + 'ClarDate3SignedYesNo')
                    }

                }
    ");
            WriteLiteral(@"        } else {
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')

                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                removechanges(type + 'ClarDate3SignedYesNo')
            }


            if (moment(document.getElementById('txt'");
            WriteLiteral(@" + type + 'ClarDate3Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')

                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                    document.getEleme");
            WriteLiteral(@"ntById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                    removechanges(type + 'ClarDate3SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')
                }
            }

        } else {
    ");
            WriteLiteral(@"        if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }

                document.getElementById('tr' + type + 'Cl");
            WriteLiteral(@"arDate3Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
                removechanges(type + 'ClarDate3Signed')
            }

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
            removechanges(type + 'ClarDate3Signed')

            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
            removechanges(type + 'ClarDate3SignedReason')

            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
            document.getEl");
            WriteLiteral(@"ementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
            removechanges(type + 'ClarDate3SignedYesNo')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate3Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').c");
            WriteLiteral(@"lassList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')

                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                removechanges(type + 'ClarDate3SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getEl");
            WriteLiteral(@"ementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')
            }
        } else {
            checkClarDate3(type)
        }
        therapyresize()
        checkcomplete()
    }

    function addther(type) {
        document.getElementById(type).classList.remove('therapyvisable')
        document.getElementById('add' + type).classList.add('hidden')
        document.getElementById('td' + type).classList.add('hidden')
        document.getElementById('remove' + type).classList.remove('hidden')
        therapyresize()
        checkcomplete()
    }

    function removether(type) {
        document.getElementById('txt' + type + 'EvalDate').value = ''
        removechanges(type + 'EvalDate')
        checkevaldate(type)
        document.getE");
            WriteLiteral(@"lementById(type).classList.add('therapyvisable')
        document.getElementById('add' + type).classList.remove('hidden')
        document.getElementById('td' + type).classList.remove('hidden')
        document.getElementById('remove' + type).classList.add('hidden')
        therapyresize()
        checkcomplete()
    }

    function nowarning(type) {
        if (document.getElementById('dd' + type).value == 'No') {
            document.getElementById('td' + type).classList.add('tdwarn')
        } else {
            document.getElementById('td' + type).classList.remove('tdwarn')
        }
    }

    function consentcheck() {
        if (moment(document.getElementById('txtMRConsent').value).isValid()) {
            if (document.getElementById('txtMRConsent').value == document.getElementById('txtStartDate').value) {
                document.getElementById('tdMRConsent').classList.remove('tdwarn')
            } else {
                document.getElementById('tdMRConsent').classList.add('tdwarn')
            }
   ");
            WriteLiteral(@"     } else {
            document.getElementById('tdMRConsent').classList.remove('tdwarn')
        }
    }

    function checkallmr() {
        checkinitial()
        check1st()
        check2st()
        check3st()
        check4st()
        check5st()
    }

    function checkinitial() {
        if (moment(document.getElementById('txtMRInitialDue').value).isValid()) {
            document.getElementById('trMRInitialReason').classList.add('mroverride')
            document.getElementById('trMRInitialReason').classList.add('trerror')
            document.getElementById('tdMRInitialReason').classList.add('tderror')
            document.getElementById('txtMRInitialReason').value = ''
            removechanges('MRInitialReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMRInitialDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMRInitialDue').value))

            if (donedate > duedate) {
                document.getElementById('trMRIni");
            WriteLiteral(@"tialYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMRInitialYesNo').classList.add('mroverride')
                document.getElementById('trMRInitialYesNo').classList.add('trerror')
                document.getElementById('tdMRInitialYesNo').classList.add('tderror')
                document.getElementById('ddMRInitialYesNo').value = ''
                removechanges('MRInitialYesNo')
            }

            document.getElementById('trMR1ReCertDue').classList.remove('mroverride')

            var duedate1 = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))
            var todaysdate1 = new Date()

            if (duedate1 < todaysdate1) {
                document.getElementById('trMR1ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertReason').classList.add('mroverride')
                document.getElementById('trMR1ReCertReason').classList.add('trerror')
        ");
            WriteLiteral(@"        document.getElementById('tdMR1ReCertReason').classList.add('tderror')
                document.getElementById('txtMR1ReCertReason').value = ''
                removechanges('MR1ReCertReason')
            }
        } else {
            var duedate = new Date(Date.parse(document.getElementById('txtMRInitialDueCert').value))
            var todaysdate = new Date()

            if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                if (lastday < todaysdate) {
                    todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMRInitialReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMRInitialReason').classList.add('mroverride')
                document.getElementById('trMRInit");
            WriteLiteral(@"ialReason').classList.add('trerror')
                document.getElementById('tdMRInitialReason').classList.add('tderror')
                document.getElementById('txtMRInitialReason').value = ''
                removechanges('MRInitialReason')
            }

            document.getElementById('trMRInitialYesNo').classList.add('mroverride')
            document.getElementById('trMRInitialYesNo').classList.add('trerror')
            document.getElementById('tdMRInitialYesNo').classList.add('tderror')
            document.getElementById('ddMRInitialYesNo').value = ''
            removechanges('MRInitialYesNo')

            document.getElementById('trMR1ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR1ReCertDue').value = ''
            removechanges('MR1ReCertDue')

            document.getElementById('trMR1ReCertReason').classList.add('mroverride')
            document.getElementById('trMR1ReCertReason').classList.add('trerror')
            document.getElementById('tdMR1ReCert");
            WriteLiteral(@"Reason').classList.add('tderror')
            document.getElementById('txtMR1ReCertReason').value = ''
            removechanges('MR1ReCertReason')

            document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR1ReCertYesNo').value = ''
            removechanges('MR1ReCertYesNo')

            document.getElementById('trMR2ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR2ReCertDue').value = ''
            removechanges('MR2ReCertDue')

            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document.getElementById('tdMR2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
        ");
            WriteLiteral(@"    removechanges('MR2ReCertReason')

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mr");
            WriteLiteral(@"override')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            documen");
            WriteLiteral(@"t.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertY");
            WriteLiteral(@"esNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }

    function check1st() {
        if (moment(document.getElementById('txtMR1ReCertDue').value).isValid()) {
            document.getElementById('trMR1ReCertReason').classList.add('mroverride')
            document.getElementById('trMR1ReCertReason').classList.add('trerror')
            document.getElementById('tdMR1ReCertReason').classList.add('tderror')
            document.getElementById('txtMR1ReCertReason').value = ''
            removechanges('MR1ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR1ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
                ");
            WriteLiteral(@"document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR1ReCertYesNo').value = ''
                removechanges('MR1ReCertYesNo')
            }

            document.getElementById('trMR2ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR2ReCertDueCert').value = displaydate
            document.getElementById('MR2ReCertDueCertText').innerHTML = displaydate

            var duedate2 = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))
            var todaysdate2 = new Date()

            if (duedate2 < todaysdate2) {
                document.getElementById('trMR2ReCertReason').");
            WriteLiteral(@"classList.remove('mroverride')
            } else {
                document.getElementById('trMR2ReCertReason').classList.add('mroverride')
                document.getElementById('trMR2ReCertReason').classList.add('trerror')
                document.getElementById('tdMR2ReCertReason').classList.add('tderror')
                document.getElementById('txtMR2ReCertReason').value = ''
                removechanges('MR2ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR1ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
  ");
            WriteLiteral(@"                      todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR1ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertReason').classList.add('mroverride')
                document.getElementById('trMR1ReCertReason').classList.add('trerror')
                document.getElementById('tdMR1ReCertReason').classList.add('tderror')
                document.getElementById('txtMR1ReCertReason').value = ''
                removechanges('MR1ReCertReason')
            }

            document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR1ReCertYesNo').value = ''
  ");
            WriteLiteral(@"          removechanges('MR1ReCertYesNo')

            document.getElementById('trMR2ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR2ReCertDue').value = ''
            removechanges('MR2ReCertDue')

            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document.getElementById('tdMR2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add(");
            WriteLiteral(@"'mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4R");
            WriteLiteral(@"eCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            do");
            WriteLiteral(@"cument.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check2st() {
        if (moment(document.getElementById('txtMR2ReCertDue').value).isValid()) {
            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document.getElementById('tdMR2ReCertReason').classList.add('tderror')
       ");
            WriteLiteral(@"     document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR2ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR2ReCertYesNo').value = ''
                removechanges('MR2ReCertYesNo')
            }

            document.getElementById('trMR3ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = done");
            WriteLiteral(@"date.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR3ReCertDueCert').value = displaydate
            document.getElementById('MR3ReCertDueCertText').innerHTML = displaydate

            var duedate3 = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))
            var todaysdate3 = new Date()

            if (duedate3 < todaysdate3) {
                document.getElementById('trMR3ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertReason').classList.add('mroverride')
                document.getElementById('trMR3ReCertReason').classList.add('trerror')
                document.getElementById('tdMR3ReCertReason').classList.add('tderror')
                document.getElementById('txtMR3ReCertReason').value = ''
                removechanges('MR3ReCertReason')
            }
        } els");
            WriteLiteral(@"e {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR2ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR2ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR2ReCertReason').classList.add('mroverride')
                document.getElementById('trMR2ReCertReason').c");
            WriteLiteral(@"lassList.add('trerror')
                document.getElementById('tdMR2ReCertReason').classList.add('tderror')
                document.getElementById('txtMR2ReCertReason').value = ''
                removechanges('MR2ReCertReason')
            }

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').clas");
            WriteLiteral(@"sList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removecha");
            WriteLiteral(@"nges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
  ");
            WriteLiteral(@"          document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check3st() {
        if (moment(document.getElementById('txtMR3ReCertDue').value).isValid()) {
            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDue').value))

            if (donedate > duedate) {
     ");
            WriteLiteral(@"           document.getElementById('trMR3ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR3ReCertYesNo').value = ''
                removechanges('MR3ReCertYesNo')
            }

            document.getElementById('trMR4ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR4ReCertDueCert').value = displaydate
            document.getElementById('MR4ReCertDueCertText').innerHTML = displaydate

            var duedate4 = new Date(");
            WriteLiteral(@"Date.parse(document.getElementById('txtMR4ReCertDueCert').value))
            var todaysdate4 = new Date()

            if (duedate4 < todaysdate4) {
                document.getElementById('trMR4ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertReason').classList.add('mroverride')
                document.getElementById('trMR4ReCertReason').classList.add('trerror')
                document.getElementById('tdMR4ReCertReason').classList.add('tderror')
                document.getElementById('txtMR4ReCertReason').value = ''
                removechanges('MR4ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR3ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))

                if (moment(do");
            WriteLiteral(@"cument.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR3ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertReason').classList.add('mroverride')
                document.getElementById('trMR3ReCertReason').classList.add('trerror')
                document.getElementById('tdMR3ReCertReason').classList.add('tderror')
                document.getElementById('txtMR3ReCertReason').value = ''
                removechanges('MR3ReCertReason')
            }

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document");
            WriteLiteral(@".getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYe");
            WriteLiteral(@"sNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            r");
            WriteLiteral(@"emovechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check4st() {
        if (moment(document.getElementById('txtMR4ReCertDue').value).isValid()) {
            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR4ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR");
            WriteLiteral(@"4ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR4ReCertYesNo').value = ''
                removechanges('MR4ReCertYesNo')
            }

            document.getElementById('trMR5ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR5ReCertDueCert').value = displaydate
            document.getElementById('MR5ReCertDueCertText').innerHTML = displaydate

            var duedate5 = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))
            var todaysdate5 = new Date()

            if (duedate5 < todaysdate5) {
                document.getElementById('trMR5ReCertReason').classList.remove('mroverride'");
            WriteLiteral(@")
            } else {
                document.getElementById('trMR5ReCertReason').classList.add('mroverride')
                document.getElementById('trMR5ReCertReason').classList.add('trerror')
                document.getElementById('tdMR5ReCertReason').classList.add('tderror')
                document.getElementById('txtMR5ReCertReason').value = ''
                removechanges('MR5ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR4ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysd");
            WriteLiteral(@"ate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR4ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertReason').classList.add('mroverride')
                document.getElementById('trMR4ReCertReason').classList.add('trerror')
                document.getElementById('tdMR4ReCertReason').classList.add('tderror')
                document.getElementById('txtMR4ReCertReason').value = ''
                removechanges('MR4ReCertReason')
            }

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4R");
            WriteLiteral(@"eCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }

    function check5st() {
        if (moment(document.getEleme");
            WriteLiteral(@"ntById('txtMR5ReCertDue').value).isValid()) {
            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR5ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
      ");
            WriteLiteral(@"          document.getElementById('ddMR5ReCertYesNo').value = ''
                removechanges('MR5ReCertYesNo')
            }

        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR5ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR5ReCertReason').classList.remove('mroverride')
            } else {
          ");
            WriteLiteral(@"      document.getElementById('trMR5ReCertReason').classList.add('mroverride')
                document.getElementById('trMR5ReCertReason').classList.add('trerror')
                document.getElementById('tdMR5ReCertReason').classList.add('tderror')
                document.getElementById('txtMR5ReCertReason').value = ''
                removechanges('MR5ReCertReason')
            }

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')

        }
        mrresize()
    }


    function checktherapyadds() {
        if (document.getElementById('txtPT2EvalDate').value != '') {
            addther('PT2')
        }
    }

    function setdropdowns(dd, option) {
        var desiredValue = option
        var el = doc");
            WriteLiteral(@"ument.getElementById(dd);
        for (var i = 0; i < el.options.length; i++) {
            if (el.options[i].text == desiredValue) {
                el.selectedIndex = i;
            }
        }
    }



    function DCOverride() {

        if (document.getElementById('txtDOOR').value != '') {
            document.getElementById('tdDOOR').className = """"
            document.getElementById('trDOOR').classList.remove(""trerror"")
            savechanges('DOOR', document.getElementById('txtDOOR').value, 'textbox')
        } else {
            document.getElementById('tdDOOR').className = ""tderror""
            document.getElementById('trDOOR').classList.add(""trerror"")
            removechanges('DOOR')
        }
        checkcomplete()
    }

    function dischargeloc(dd, type) {
        var x = document.getElementsByClassName(""discharge"");
        var b;
        for (b = 0; b < x.length; b++) {
            x[b].classList.add(""dischargetype"");
        }

        if (dd.value == '01 - Home' || dd.value == '06 - Home");
            WriteLiteral(@" w/HH' || dd.value == '07 - AMA' || dd.value == 'Other') {
            var y = document.getElementsByClassName(""home"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dischargetype"");
            }
        }

        if (dd.value == '02 - Hospital' || dd.value == '20 - Expired' || dd.value == 'N/A - Continued Stay' || dd.value == '') {
            var y = document.getElementsByClassName(""hospital"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dischargetype"");
            }
        }

        if (dd.value == '04 - LTC') {
            var y = document.getElementsByClassName(""ltc"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dischargetype"");
            }
        }

        if (dd.value == '') {
            removechanges('DischargeLoc')
            document.getElementById('tdDischargeLoc').className = 'tderror'
            document.getEleme");
            WriteLiteral(@"ntById('trDischargeLoc').classList.add(""trerror"")
        } else {
            if (type == 'save') {
                savechanges('DischargeLoc', dd.value, 'dropdown')
            }

            document.getElementById('tdDischargeLoc').className = ''
            document.getElementById('trDischargeLoc').classList.remove(""trerror"")
        }
        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }

        checkcomplete()
    }

    function mrresize() {
        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('MedicalRecordsContent').style.maxHeight = document.getElementById('MedicalRecordsContent').scrollHeight + ""px"";
        }
    }

    function therapyresize() {
        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('Th");
            WriteLiteral(@"erapyContent').style.maxHeight = document.getElementById('TherapyContent').scrollHeight + ""px"";
        }
    }

    function boresize() {
        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('frmBO').style.maxHeight = document.getElementById('frmBO').scrollHeight + ""px"";
        }
    }


    function dcyesno(dd, type) {
        var y = document.getElementsByClassName(""dcyes"");
        var i;
        if (dd.value == ""No"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dcyesnotype"");
            }
            document.getElementById('tdDrivenDischarge').className = ''
            document.getElementById('trDrivenDischarge').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('DrivenDischarge', dd.value, 'dropdown')
            }
        } else if (dd.value == ""Yes"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""dcyesnotype"");
");
            WriteLiteral(@"            }
            document.getElementById('tdDrivenDischarge').className = ''
            document.getElementById('trDrivenDischarge').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('DrivenDischarge', dd.value, 'dropdown')
            }
        } else {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""dcyesnotype"");
            }
            document.getElementById('tdDrivenDischarge').className = 'tderror'
            document.getElementById('trDrivenDischarge').classList.add(""trerror"")
            removechanges('DrivenDischarge')
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }
        checkcomplete()
    }

    function ddcheck(dd) {
        if (document.getElementById('dd' + dd).value == '') {
            document.getElementById('td' + dd).className");
            WriteLiteral(@" = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('dd' + dd).value, 'dropdown')
        }
        checkcomplete()

    }

    function textcheck(dd) {
        if (document.getElementById('txt' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()

    }

    function textchecknoerror(dd) {
        if (document.getElementById('txt' + dd).value ");
            WriteLiteral(@"== '') {
            removechanges(dd)
        } else {
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()
    }

    function cbcheck(dd) {
        if (document.getElementById('cb' + dd).checked == false) {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, 'Checked', 'checkbox')
        }
        checkcomplete()

    }

    function datecheck(txt) {

        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            document.getElementById('td' + txt).className = ''
            document.getElementById('tr' + txt).classList.remove(""trerror"")
            savechanges(txt, document.getElementById('txt' + txt).value, 'textbox')
   ");
            WriteLiteral(@"     } else {
            document.getElementById('td' + txt).className = 'tderror'
            document.getElementById('tr' + txt).classList.add(""trerror"")
            removechanges(txt)
        }

        checkcomplete()

    }

    function datechecknoerror(txt) {

        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            savechanges(txt, document.getElementById('txt' + txt).value, 'textbox')
        } else {
            removechanges(txt)
        }

        checkcomplete()

    }

    function mdsadddays(type) {
        var numdays = document.getElementById('txtMDSUnbillDays').value
        var startd = document.getElementById('txtMDSARDStart').value
        var endd = document.getElementById('txtMDSARDEnd').value

        if (numdays != '' && moment(startd).isValid() && moment(endd).isValid()) {
            var dchange = datediff(parseDate(startd), parseDate(endd))
            var ddiff = dchange - numdays + 1
            if (ddiff < 0) {
                removechanges('MDSNu");
            WriteLiteral(@"mDays')
                document.getElementById('tdMDSNumDays').className = 'tderror'
                document.getElementById('trMDSNumDays').classList.add(""trerror"")
                document.getElementById('txtMDSNumDays').value = ddiff
            } else {
                document.getElementById('tdMDSNumDays').className = ''
                document.getElementById('trMDSNumDays').classList.remove(""trerror"")
                document.getElementById('txtMDSNumDays').value = ddiff
                if (type == 'save') {
                    savechanges('MDSNumDays', ddiff, 'textbox')
                }

            }
        } else {
            removechanges('MDSNumDays')
            document.getElementById('tdMDSNumDays').className = 'tderror'
            document.getElementById('trMDSNumDays').classList.add(""trerror"")
            document.getElementById('txtMDSNumDays').value = ''
        }
        checkcomplete()
    }

    function savechanges(txt, pv, ptype) {
        var datetime = ""<b>Confirmed:</b> "" + ne");
            WriteLiteral(@"w Date().toLocaleString() + ""<br/>""
        var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUserName').value

        document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        $.get(""/TripleCheck/saverecords"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });
    }

    function savechangescert(txt, pv, ptype, position) {
        if (pv != '') {
            var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
            var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUserName').value

            document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        }


        $.get(""/TripleCheck/saverecordscert"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strposition: position, strdate: new Date().to");
            WriteLiteral(@"LocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });

    }

    function removechanges(txt) {

        $.get(""/TripleCheck/removerecords"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });
        document.getElementById('td' + txt + 'Confirm').innerHTML = """";
    }

    function removechangescert(txt) {
        $.get(""/TripleCheck/removerecordscert"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });


    }

    function checkcomplete() {
        checkBO()
        checkDC()
        checkMDS()
        checkMDSTherapy()
        checkMedicalRecords()
        checkTherapy()
        checkNursing()
    }

    function checkBO() {
        var y = document.getElementById(""frmBO"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischar");
            WriteLiteral(@"getype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'booverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('BOComplete').innerHTML = 'Not Completed'
            document.getElementById('BOComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'BusinessOffice' }, function (data) { });
        } else {
            document.getElementById('BOComplete').innerHTML = 'Completed'
            document.getElementById('BOComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'BusinessOffice' }, function (data) { });
        }
    }

    function checkDC() {
        var y = document.getElementById(""DCContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
      ");
            WriteLiteral(@"  for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'dcoverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('DCComplete').innerHTML = 'Not Completed'
            document.getElementById('DCComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'false', strdetail: 'DCInformation' }, function (data) { });
        } else {
            document.getElementById('DCComplete').innerHTML = 'Completed'
            document.getElementById('DCComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'DCInformation' }, function (data) { });
        }
    }

    function checkMDS() {
   ");
            WriteLiteral(@"     var y = document.getElementById(""MDSContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MDSComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDS' }, function (data) { });
        } else {
            document.getElementById('MDSComplete').innerHTML = 'Completed'
            document.getElementById('MDSComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', ");
            WriteLiteral(@"strdetail: 'MDS' }, function (data) { });
        }
    }

    function checkMDSTherapy() {
        var y = document.getElementById(""MDSTherapyContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSTherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDSTherapy' }, function (data) { });
        } else {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Completed'
            document.getElementById('MDSTherapyComplete')");
            WriteLiteral(@".className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDSTherapy' }, function (data) { });
        }
    }

    function checkMedicalRecords() {
        var y = document.getElementById(""MedicalRecordsContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'mroverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Not Completed'
            document.getElementById('MedicalRecordsComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'M");
            WriteLiteral(@"edicalRecords' }, function (data) { });
        } else {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Completed'
            document.getElementById('MedicalRecordsComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MedicalRecords' }, function (data) { });
        }
    }

    function checkTherapy() {
        var y = document.getElementById(""TherapyContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'therapyvisable')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('TherapyComplete').innerHTML = 'Not Completed'
            document.get");
            WriteLiteral(@"ElementById('TherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Therapy' }, function (data) { });
        } else {
            document.getElementById('TherapyComplete').innerHTML = 'Completed'
            document.getElementById('TherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Therapy' }, function (data) { });
        }
    }

    function checkNursing() {
        var y = document.getElementById(""NursingContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcount");
            WriteLiteral(@"er == '1') {
            document.getElementById('NursingComplete').innerHTML = 'Not Completed'
            document.getElementById('NursingComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Nursing' }, function (data) { });
        } else {
            document.getElementById('NursingComplete').innerHTML = 'Completed'
            document.getElementById('NursingComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Nursing' }, function (data) { });
        }
    }

    function parseDate(str) {
        var mdy = str.split('/');
        return new Date(mdy[2], mdy[0] - 1, mdy[1]);
    }

    function datediff(first, second) {
        return Math.round((second - first) / (1000 * 60 * 60 * 24));
    }
</script>
");
#nullable restore
#line 7124 "C:\Users\daniel.stump\Desktop\New Projet\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
}}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
