#pragma checksum "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c85c9bd4708153aab2ad1921bd89a8c59b76a688"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TripleCheck_Record), @"mvc.1.0.view", @"/Views/TripleCheck/Record.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\_ViewImports.cshtml"
using MicrosoftGraphAspNetCoreConnectSample;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c85c9bd4708153aab2ad1921bd89a8c59b76a688", @"/Views/TripleCheck/Record.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3ad82abc64eaf4b8b182bed96ff763a59d7fe17", @"/Views/_ViewImports.cshtml")]
    public class Views_TripleCheck_Record : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery-1.12.4.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.inputmask.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap-maxlength.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/bootstrap-datepicker3.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap-datepicker.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "TripleCheck", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DeleteReport", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/questionmark.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("height:15px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("3 night stay required."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Verify Occurrence 11 is onset of 1st condition requiring thearpy"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Verify Occurrence codes are present and have correct SOC dates 35(PT) 44(OT) 45(ST)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("2 day notice required."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Yes, if patient will have continued stay into next billing month."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 2 consecutive LOA days(May have more than 1 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 2 consecutive LOA days(May have more than 2 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 3 consecutive LOA days(May have more than 3 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 4 consecutive LOA days(May have more than 4 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Should be obtained the same day as admission"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Verify via therapy tab in PCC."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_28 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Date of evaluation order signed should be within 30 days of evaluation date"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_29 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Clarification Date should be the same as Evaluation Date."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_30 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Clarification Date Signed should be within 30 days of Clarification Date."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_31 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Reclarification needed 28 days after Clarification."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
 if (!User.Identity.IsAuthenticated)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("<br />\n<p>Choose <b>Sign in</b> at the top of the page.</p>\n");
#nullable restore
#line 5 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\n\n");
#nullable restore
#line 8 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
 if (User.Identity.IsAuthenticated)
{
    if (ViewData["checkauth"].ToString() == "0")
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("<p>You are not authorized to view this page.</p>\n");
#nullable restore
#line 13 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
    }

    if (ViewData["checkauth"].ToString() == "1")
    {


#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
Write(Html.Raw(ViewData["sidebar"]));

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68816920", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68817958", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68819154", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68820192", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68821388", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68822426", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68823464", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68824502", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\" integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\"      crossorigin=\"anonymous\">\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "c85c9bd4708153aab2ad1921bd89a8c59b76a68825749", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68826866", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            WriteLiteral("  <script>\r\n  //$( function() {\r\n  //  $( document ).tooltip();\r\n  //} );\r\n  </script>\n");
            WriteLiteral("<script type=\"text/javascript\">\n    $(window).resize(function () {\n        $(\"#shownotes\").dialog(\"option\", \"position\", { my: \"center\", at: \"center\", of: window });\n    });\n\n    jQuery(document).ready(function ($) {\n        var passdata = \'");
#nullable restore
#line 46 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                   Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\'\n\n        if (passdata != \'\') {\n            var rowdata = \'");
#nullable restore
#line 49 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'.split('*^^*')

            var arrayLength = rowdata.length;
            for (var i = 0; i < arrayLength; i++) {
                var indvdata = rowdata[i].split('$||$')

                try {
                    if (indvdata[2] == 'checkbox') {
                        document.getElementById('cb' + indvdata[0]).checked = true
                    }

                    if (indvdata[2] == 'textbox') {
                        document.getElementById('txt' + indvdata[0]).value = indvdata[1]
                    }

                    if (indvdata[2] == 'dropdown') {
                        var desiredValue = indvdata[1]
                        var el = document.getElementById(""dd"" + indvdata[0]);
                        try {
                            for (var e = 0; e < el.options.length; e++) {
                                if (el.options[e].text == desiredValue) {
                                    el.selectedIndex = e;
                                }
                            }
                     ");
            WriteLiteral(@"   } catch { }
                    }

                    var datetime = ""<b>Confirmed:</b> "" + indvdata[3] + ""<br/>""
                    var user = ""<b>Confirmed By:</b> "" + indvdata[4]

                    document.getElementById('td' + indvdata[0] + 'Confirm').innerHTML = datetime + user;

                    document.getElementById('tr' + indvdata[0]).classList.remove('trerror')
                    document.getElementById('td' + indvdata[0]).classList.remove('tderror')
                } catch { }




            }
        }

        
        checkqualifying()
        addassessment(document.getElementById('ddAddAssessment'))
        paymenttype(document.getElementById('ddPaymentType'))

        dcdischargedate()
        dcdischargeloc()
        dcyesno()
        dcdaychange()
        
        
        patientleave(document.getElementById('ddBOPatient'), 'no', '')
        patientleave(document.getElementById('ddBOPatient1'), 'no', 1)
        patientleave(document.getElementById('ddBOPatient1'), 'no', 2)
   ");
            WriteLiteral(@"     patientleave(document.getElementById('ddBOPatient1'), 'no', 3)
        patientleave(document.getElementById('ddBOPatient1'), 'no', 4)
        mdsadddays('no', '')
        mdsadddays('no', 1)
        mdsadddays('no', 2)
        mdsadddays('no', 3)
        mdsadddays('no', 4)

        checkopenmds()

        consentcheck()
        checkinitial()
        check1st()
        check2st()
        check3st()
        check4st()
        check5st()

        checkevaldate('PT')
        checkevalsign('PT')
        checkclardate('PT')
        checkClarDateSigned('PT')

        checkClarDate1('PT')
        checkClarDate1Signed('PT')

        checkClarDate2('PT')
        checkClarDate2Signed('PT')

        checkClarDate3('PT')
        checkClarDate3Signed('PT')


        checkevaldate('PT2')
        checkevalsign('PT2')
        checkclardate('PT2')
        checkClarDateSigned('PT2')

        checkClarDate1('PT2')
        checkClarDate1Signed('PT2')

        checkClarDate2('PT2')
        checkClarDate2Signed('PT2')

     ");
            WriteLiteral(@"   checkClarDate3('PT2')
        checkClarDate3Signed('PT2')

        checkevaldate('PT3')
        checkevalsign('PT3')
        checkclardate('PT3')
        checkClarDateSigned('PT3')

        checkClarDate1('PT3')
        checkClarDate1Signed('PT3')

        checkClarDate2('PT3')
        checkClarDate2Signed('PT3')

        checkClarDate3('PT3')
        checkClarDate3Signed('PT3')


        checkevaldate('OT')
        checkevalsign('OT')
        checkclardate('OT')
        checkClarDateSigned('OT')

        checkClarDate1('OT')
        checkClarDate1Signed('OT')

        checkClarDate2('OT')
        checkClarDate2Signed('OT')

        checkClarDate3('OT')
        checkClarDate3Signed('OT')

        checkevaldate('OT2')
        checkevalsign('OT2')
        checkclardate('OT2')
        checkClarDateSigned('OT2')

        checkClarDate1('OT2')
        checkClarDate1Signed('OT2')

        checkClarDate2('OT2')
        checkClarDate2Signed('OT2')

        checkClarDate3('OT2')
        checkClarDate3Signed('OT2')
");
            WriteLiteral(@"
        checkevaldate('OT3')
        checkevalsign('OT3')
        checkclardate('OT3')
        checkClarDateSigned('OT3')

        checkClarDate1('OT3')
        checkClarDate1Signed('OT3')

        checkClarDate2('OT3')
        checkClarDate2Signed('OT3')

        checkClarDate3('OT3')
        checkClarDate3Signed('OT3')


        checkevaldate('SLP')
        checkevalsign('SLP')
        checkclardate('SLP')
        checkClarDateSigned('SLP')

        checkClarDate1('SLP')
        checkClarDate1Signed('SLP')

        checkClarDate2('SLP')
        checkClarDate2Signed('SLP')

        checkClarDate3('SLP')
        checkClarDate3Signed('SLP')

        checkevaldate('SLP2')
        checkevalsign('SLP2')
        checkclardate('SLP2')
        checkClarDateSigned('SLP2')

        checkClarDate1('SLP2')
        checkClarDate1Signed('SLP2')

        checkClarDate2('SLP2')
        checkClarDate2Signed('SLP2')

        checkClarDate3('SLP2')
        checkClarDate3Signed('SLP2')

        checkevaldate('SLP3')
        ch");
            WriteLiteral(@"eckevalsign('SLP3')
        checkclardate('SLP3')
        checkClarDateSigned('SLP3')

        checkClarDate1('SLP3')
        checkClarDate1Signed('SLP3')

        checkClarDate2('SLP3')
        checkClarDate2Signed('SLP3')

        checkClarDate3('SLP3')
        checkClarDate3Signed('SLP3')

        checktherapyadds()

        checkcomplete()

        $('.TableClick tr').click(function (event) {
            if (event.target.type !== 'checkbox') {
                $(':checkbox', this).trigger('click');
            }
        });
    });


</script>
");
            WriteLiteral("<script>\n    $(window).load(function () {\n\n        var passid = \'");
#nullable restore
#line 269 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                 Write(Html.Raw(ViewData["passid"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'
        document.getElementById(""noteslink"").href = '/api/pdfcreator?report=notes&&passid=' + passid

        $("".txtdate"").inputmask(""99/99/9999"", { 'placeholder': 'MM/DD/YYYY' });

        $(""#txtMDSUnbillDays"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });

        $(""#txtMDSUnbillDays1"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });

                $(""#txtMDSUnbillDays2"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
                });

                $(""#txtMDSUnbillDays3"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
                });

        $(""#txtMDSUnbillDays4"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': ");
            WriteLiteral("\'0\'\n        });\n\n    });\n\n\n    function hasClass(element, cls) {\n        return (\' \' + element.className + \' \').indexOf(\' \' + cls + \' \') > -1;\n    }\n\n    $(function () {\n        $(\".txtdate\").datepicker({clearBtn: true});\n    });\n</script>\n");
            WriteLiteral(@"<style>
    [data-tiny-editor] {
        height: 200px;
    }

    .ui-dialog-titlebar-close {
        visibility: hidden !important;
        display: none !important;
    }

    .txtbox {
        background-color: #fff;
        border: 1px solid #aaa;
        border-radius: 4px;
        height: 28px;
        width: 100% !important;
    }

    .txtlabel {
        margin-top: 15px;
    }

    .validation {
        color: red;
    }

    .dropzone {
        border: 1px solid #aaa !important;
        border-radius: 5px !important;
        width: 280px;
        margin-top: 15px;
    }

    .imgdiv {
        border: 1px solid #aaa;
        border-radius: 5px;
        margin-top: 10px;
    }

        .imgdiv table {
            width: 280px;
            table-layout: fixed;
        }

    .imgdivtd {
        width: 170px;
        word-wrap: break-word;
        padding-right: 10px
    }

    .yesno {
        border: 1px solid #aaa;
        background-color: white;
        padding: 5px;
        transition: 1s;
      ");
            WriteLiteral(@"  cursor: pointer;
        width: 50px;
        border-radius: 5px;
        text-align: center;
    }


    textarea {
        max-width: 600px !important;
        height: 100px;
    }

    .formheader {
        max-width: 600px;
        background-color: #aaa;
        padding: 5px;
        font-weight: bold;
        margin-top: 20px;
    }

    .cbtext {
        cursor: default
    }

    .content table {
        border-collapse: collapse;
        width: 100%;
        border: 0px;
    }

    .content th, .content td {
        text-align: left;
        padding: 9px;
        height: 50px;
    }



        .content td:first-child {
            width: 280px;
        }


    .content tr {
        border-bottom: 1px solid #f2f2f2;
    }

    .collapsible {
        background-color: #337ab7;
        color: black;
        font-weight: bold;
        cursor: pointer;
        padding: 10px;
        width: 100%;
        text-align: left;
        outline: none;
        font-size: 15px;
        border: 0px;
    }



    .");
            WriteLiteral(@"content {
        padding: 0 18px;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s ease-out;
        width: 100%;
        border: 1px solid black;
    }

    .addaddition {
        display: none;
        visibility: hidden;
    }

    .paytype {
        display: none;
        visibility: hidden;
    }

    .dischargetype {
        display: none;
        visibility: hidden;
    }

    .dcyesnotype {
        display: none;
        visibility: hidden;
    }

    .booverride {
        display: none;
        visibility: hidden;
    }

    .dcoverride {
        display: none;
        visibility: hidden;
    }

    .mroverride {
        display: none;
        visibility: hidden;
    }

    .MDSTheroverride {
        display: none;
        visibility: hidden;
    }

    .MDSoverride {
        display: none;
        visibility: hidden;
    }

    .therapyvisable {
        display: none;
        visibility: hidden;
    }

    .ui-tooltip {
        padding: 10px 20px;
 ");
            WriteLiteral(@"       color: white;
        background-color: #333;
        border-radius: 6px;
    }
 

    .tderror {
        background-color: red;
    }

    .tdwarn {
        background-color: yellow;
    }


    .completed {
        color: green;
    }

    .notcompleted {
        color: red;
    }

    .confirmed {
        font-size: 10px;
    }
</style>
<a href=""/TripleCheck"" id=""homeclick"">Return to Home</a>
<div style=""height:10px;""></div>
<div style=""font-size:30px""><b>");
#nullable restore
#line 513 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                          Write(Html.Raw(ViewData["patientname"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\n<div style=\"font-size:25px\"><b>");
#nullable restore
#line 514 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                          Write(Html.Raw(ViewData["patientmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\n<div style=\"height:10px;\"></div>\n<div><input type=\"button\" class=\"btn btn-primary\" value=\"Delete Record\" onclick=\"showdel()\" /></div>\n<hr />\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68841056", async() => {
                WriteLiteral("\n    <input type=\"text\" id=\"txtRecID\" name=\"txtRecID\" class=\"hidden\" />\n    <input type=\"button\" id=\"delreport\" class=\"hidden\" onclick=\"submit()\" />\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            WriteLiteral("<input type=\"text\" id=\"txtUserName\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 12676, "\"", 12715, 1);
#nullable restore
#line 526 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12684, Html.Raw(ViewData["username"]), 12684, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n<input type=\"text\" id=\"txtID\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 12764, "\"", 12801, 1);
#nullable restore
#line 527 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12772, Html.Raw(ViewData["passid"]), 12772, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n<input type=\"text\" id=\"txtINTMonth\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 12856, "\"", 12895, 1);
#nullable restore
#line 528 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 12864, Html.Raw(ViewData["intmonth"]), 12864, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n");
            WriteLiteral("<div class=\"row\">\n    <div class=\"col-md-3\">\n        <div class=\"txtlabel\">Start date of skilled stay</div>\n        <div><input type=\"text\" id=\"txtStartDate\" class=\"txtbox\" name=\"txtStartDate\" disabled=\"disabled\"");
            BeginWriteAttribute("value", " value=\"", 13113, "\"", 13152, 1);
#nullable restore
#line 533 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 13121, Html.Raw(ViewData["staydate"]), 13121, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" onkeyup=""startdate()"" onchange=""startdate()"" /></div>
        <div id=""ValidationStartDate"" class=""hidden"">Please enter a valid date.</div>

        <div class=""txtlabel hidden"">Additional assessment for the same stay?</div>
        <div class=""hidden"">
            ");
#nullable restore
#line 538 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["AdditionalAssessment"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n        </div>\n\n        <div class=\"txtlabel\">Payment Type</div>\n        <div>\n            ");
#nullable restore
#line 543 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["PaymentType"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n        </div>\n    </div>\n    <div class=\"col-md-3\">\n        <div class=\"txtlabel\" style=\"border-bottom: 1px solid #aaa; font-weight:bold\">Notes</div>\n        <div style=\"overflow-y:auto; height:100px; margin-bottom:10px;\" id=\"divNotes\">\n            ");
#nullable restore
#line 549 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["patientnotes"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div>
            <input type=""button"" class=""btn btn-primary"" value=""Edit Notes"" onclick=""shownotes()"" />
            <a href=""https://localhost:44334/api/pdfcreator?report=notes&&passid=4888"" id=""noteslink"" target=""_blank""><input type=""button"" class=""btn btn-primary"" value=""Print Notes"" /></a>
        </div>
    </div>
    <div class=""col-md-3"">
        <div class=""txtlabel"" style=""border-bottom: 1px solid #aaa; font-weight:bold"">IDT Team Members Present</div>
        <div style=""overflow-y:auto; height:100px; margin-bottom:10px;"" id=""divTeam"">
            ");
#nullable restore
#line 559 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["teamdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n        </div>\n        <div><input type=\"button\" class=\"btn btn-primary\" value=\"Edit Team\" onclick=\"showteam()\" /></div>\n    </div>\n</div>\n");
            WriteLiteral("<br />\n<br />\n");
            WriteLiteral(@"<button class=""collapsible"" style=""background-color:lightblue"" id=""btnBusinessOffice"">
    <table style=""width:100%"">
        <tr>
            <td>Business Office</td>
            <td style=""text-align:right; padding-right:50px;"" id=""BOComplete""></td>
        </tr>
    </table>
</button>
<div class=""content"" style=""border: 1px solid black"" id=""frmBO"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOTypeOfBill"">
            <td id=""tdBOTypeOfBill"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOTypeOfBill"" onchange=""ddcheck('BOTypeOfBill')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68848616", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68849552", async() => {
                WriteLiteral("210");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68850526", async() => {
                WriteLiteral("211");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68851500", async() => {
                WriteLiteral("212");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68852474", async() => {
                WriteLiteral("213");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68853448", async() => {
                WriteLiteral("214");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68854422", async() => {
                WriteLiteral("21Q");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68855396", async() => {
                WriteLiteral("217");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Type of bill</td>
            <td id=""tdBOTypeOfBillConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBODOB"">
            <td id=""tdBODOB"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BODOB')"" id=""cbBODOB"" />
            </td>
            <td>DOB <b>");
#nullable restore
#line 600 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                  Write(Html.Raw(ViewData["patientdob"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
            <td id=""tdBODOBConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOSex"">
            <td id=""tdBOSex"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOSex')"" id=""cbBOSex"" />
            </td>
            <td>Sex <b>");
#nullable restore
#line 607 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                  Write(Html.Raw(ViewData["patientgender"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
            <td id=""tdBOSexConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOHIC"">
            <td id=""tdBOHIC"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOHIC')"" id=""cbBOHIC"" />
            </td>
            <td>HIC Number</td>
            <td id=""tdBOHICConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOMD"">
            <td id=""tdBOMD"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOMD')"" id=""cbBOMD"" />
            </td>
            <td>MD</td>
            <td id=""tdBOMDConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDates"">
            <td id=""tdBOServiceDates"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDates"" onchange=""datecheck('BOServiceDates')"" onkeyup=""datecheck('BOServiceDates')"" />
         ");
            WriteLiteral(@"   </td>
            <td>Service Dates From</td>
            <td id=""tdBOServiceDatesConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDatesTo"">
            <td id=""tdBOServiceDatesTo"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDatesTo"" onchange=""datecheck('BOServiceDatesTo')"" onkeyup=""datecheck('BOServiceDatesTo')"" />
            </td>
            <td>Service Dates To</td>
            <td id=""tdBOServiceDatesToConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror"" id=""trBOStayFrom"">
            <td id=""tdBOStayFrom"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayFrom"" onchange=""checkqualifying(); datecheck('BOStayFrom')"" onkeyup=""checkqualifying(); datecheck('BOStayFrom')"" /></td>
            <td>
                Qualifying Stay Dates From
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68859811", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdBOStayFromConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror"" id=""trBOStayTo"">
            <td id=""tdBOStayTo"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayTo"" onchange=""checkqualifying(); datecheck('BOStayTo')"" onkeyup=""checkqualifying(); datecheck('BOStayTo')"" /></td>
            <td>Qualifying Stay Dates To</td>
            <td id=""tdBOStayToConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror booverride"" id=""trBOStayReason"">
            <td id=""tdBOStayReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtBOStayReason"" onkeyup=""textcheck('BOStayReason')"" />
            </td>
            <td>Reason why 3 day hospital stay not required</td>
            <td id=""tdBOStayReasonConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOBenefit"">
            <td id=""tdBOBenefit"" class=""tderror"">
             ");
            WriteLiteral(@"   <input type=""checkbox"" onchange=""cbcheck('BOBenefit')"" id=""cbBOBenefit"" />
            </td>
            <td>Benefit Days Available Verified</td>
            <td id=""tdBOBenefitConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOCoinsurance"">
            <td id=""tdBOCoinsurance"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOCoinsurance')"" id=""cbBOCoinsurance"" />
            </td>
            <td>Coinsurance Days</td>
            <td id=""tdBOCoinsuranceConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOMedicare"">
            <td id=""tdBOMedicare"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOMedicare')"" id=""cbBOMedicare"" />
            </td>
            <td>Verify Medicare Secondary Payor Status</td>
            <td id=""tdBOMedicareConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOOnset"">
            <td ");
            WriteLiteral("id=\"tdBOOnset\" class=\"tderror\">\n                <input type=\"checkbox\" onchange=\"cbcheck(\'BOOnset\')\" id=\"cbBOOnset\" />\n            </td>\n            <td>\n                Therapy Onset Date\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68863449", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdBOOnsetConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOStart"">
            <td id=""tdBOStart"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOStart')"" id=""cbBOStart"" />
            </td>
            <td>
                Therapy Start of Care
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68865043", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdBOStartConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOVerify"">
            <td id=""tdBOVerify"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOVerify')"" id=""cbBOVerify"" />
            </td>
            <td>Verify Therapy HCPC code, modifier (GP, GO, GN) and date of service</td>
            <td id=""tdBOVerifyConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOModifiers"">
            <td id=""tdBOModifiers"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOModifiers')"" id=""cbBOModifiers"" />
            </td>
            <td>Therapy modifiers are present as needed (KX, 59, CO, CQ)</td>
            <td id=""tdBOModifiersConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>
");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnDCInfo"">
    <table style=""width:100%"">
        <tr>
            <td>DC Information</td>
            <td style=""text-align:right; padding-right:50px;"" id=""DCComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" id=""DCContent"" style=""border: 1px solid black"">
    <div style=""height:20px""></div>
    <table class=""TableClick"">


        <tr class=""yes pay pdpm hmoa discharge home hospital"" id=""trDCDischarge"">
            <td id=""tdDCDischarge"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCDischarge"" onchange=""datechecknoerror('DCDischarge'); dcdischargedate()"" onkeyup=""datechecknoerror('DCDischarge'); dcdischargedate()"" />
            </td>
            <td>Discharge Date</td>
            <td id=""tdDCDischargeConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" id=""trDischargeLoc"">
            <td id=""tdDischargeLoc"" class=""tderror"">
                <select cla");
            WriteLiteral("ss=\"txtbox\" onchange=\"dcdischargeloc(); ddcheck(\'DischargeLoc\')\" id=\"ddDischargeLoc\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68868447", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68869383", async() => {
                WriteLiteral("01 - Home");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68870363", async() => {
                WriteLiteral("06 - Home w/HH");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68871348", async() => {
                WriteLiteral("02 - Hospital");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68872332", async() => {
                WriteLiteral("04 - LTC");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68873311", async() => {
                WriteLiteral("07 - AMA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68874290", async() => {
                WriteLiteral("20 - Expired");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68875273", async() => {
                WriteLiteral("Other");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Discharge Location</td>
            <td id=""tdDischargeLocConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" id=""trDrivenDischarge"">
            <td id=""tdDrivenDischarge"" class=""tderror"">
                <select class=""txtbox"" onchange=""dcyesno(); ddcheck('DrivenDischarge')"" id=""ddDrivenDischarge"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68876665", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68877601", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68878574", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Patient Driven Discharge (No LCD Given)</td>
            <td id=""tdDrivenDischargeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""dcoverride trerror"" id=""trDCNotePresent"">
            <td id=""tdDCNotePresent"" class=""tderror"">
                <input type=""checkbox"" id=""cbDCNotePresent"" onchange=""cbcheck('DCNotePresent')"" />
            </td>
            <td>Note is present to support reason No NOMNC Issued</td>
            <td id=""tdDCNotePresentConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" id=""trDCLastDay"">
            <td id=""tdDCLastDay"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCLastDay"" onchange=""datecheck('DCLastDay'); dcdaychange(); checkallmr()"" onkeyup=""datecheck('DCLastDay'); dcdaychange(); checkallmr()"" />
            </td>
            <td>Last Covered Day (LCD)</td>
            <td id=""tdDCLastDayConfirm"" class=""confirmed""></td>
        <");
            WriteLiteral(@"/tr>


        <tr class=""dcoverride trerror"" id=""trDCNOMNC"">
            <td id=""tdDCNOMNC"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCNOMNC"" onchange=""datecheck('DCNOMNC'); dcdaychange();"" onkeyup=""datecheck('DCNOMNC'); dcdaychange();"" />
            </td>
            <td>
                NOMNC Issued on
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68881014", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdDCNOMNCConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" id=""trDOOR"">
            <td id=""tdDOOR"" class=""tderror"">
                <input id=""txtDOOR"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""textcheck('DOOR')"" />
            </td>
            <td>Reason not completed timely</td>
            <td id=""tdDOORConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" style=""border:none"" id=""trDCABN"">
            <td class=""tderror"" id=""tdDCABN"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCABN"" onchange=""datecheck('DCABN'); dcdaychange()"" onkeyup=""datecheck('DCABN'); dcdaychange()"" />
            </td>
            <td>
                ABN Issued On
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68883067", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdDCABNConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""dcoverride trerror"" id=""trABNOR"">
            <td id=""tdABNOR"" class=""tderror"">
                <input id=""txtABNOR"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""textcheck('ABNOR')"" />
            </td>
            <td>Reason not completed timely</td>
            <td id=""tdABNORConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>
");
            WriteLiteral(@"<button class=""collapsible"" style=""background-color:lightblue"" id=""btnMDS"">
    <table style=""width:100%"">
        <tr>
            <td>MDS</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MDSComplete""></td>
        </tr>
    </table>
</button>
<div class=""content"" style=""border: 1px solid black"" id=""MDSContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""pay pdpm hmoa trerror"" style=""border:none"" id=""trBOPatient"">
            <td id=""tdBOPatient"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOPatient"" onchange=""patientleave(this, 'save', ''); mdsadddays('save', '')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68885549", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68886485", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68887458", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatientConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""pay pdpm hmoa levels mcb trerror"" id=""trMDSPayment"">
            <td id=""tdMDSPayment"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment"" onchange=""ddcheck('MDSPayment')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68888863", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68889799", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68890772", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>\n                Payment Information on this line Affects Billing Next Month\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68891883", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSPaymentConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARD"">
            <td id=""tdMDSARD"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD"" onchange=""datecheck('MDSARD')"" onkeyup=""datecheck('MDSARD')"" />
            </td>
            <td>ARD</td>
            <td id=""tdMDSARDConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay hmoa trerror"" id=""trMDSAssessmentType"">
            <td id=""tdMDSAssessmentType"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType"" onchange=""ddcheck('MDSAssessmentType')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68893827", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68894763", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm trerror"" id=""trMDSAssessmentTypePDPM"">
            <td id=""tdMDSAssessmentTypePDPM"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM"" onchange=""ddcheck('MDSAssessmentTypePDPM')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68896167", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a68897103", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypePDPMConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSHIPPS"">
            <td id=""tdMDSHIPPS"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS"" onkeyup=""textcheck('MDSHIPPS')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPSConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSUnbillDays"">
            <td id=""tdMDSUnbillDays"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(''); mdsadddays('save', '')"" />
            </td>
            <td>
                Number of Unbillable Days due to Interrupted Stay/Skip days
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a68899014", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSUnbillDaysConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARDStart"">
            <td id=""tdMDSARDStart"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart"" onchange=""datecheck('MDSARDStart'); mdsadddays('save', '')"" onkeyup=""datecheck('MDSARDStart'); mdsadddays('save', '')"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStartConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa"" id=""trMDSARDEnd"">
            <td id=""tdMDSARDEnd"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd"" onchange=""datechecknoerror('MDSARDEnd'); mdsadddays('save', '')"" onkeyup=""datechecknoerror('MDSARDEnd'); mdsadddays('save', '')"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEndConfirm"" class=""confirmed""></td>
        </tr>

        ");
            WriteLiteral(@"<tr class=""pay pdpm hmoa trerror"" id=""trMDSNumDays"">
            <td id=""tdMDSNumDays"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSNumDays"" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDaysConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSTransmitted"">
            <td id=""tdMDSTransmitted"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted"" onchange=""cbcheck('MDSTransmitted')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmittedConfirm"" class=""confirmed""></td>
        </tr>

");
            WriteLiteral(@"
        <tr class=""pay pdpm hmoa trerror"" id=""trMDSPTOT"">
            <td id=""tdMDSPTOT"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT"" onchange=""cbcheck('MDSPTOT')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSSLP"">
            <td id=""tdMDSSLP"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP"" onchange=""cbcheck('MDSSLP')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
            <td id=""tdMDSSLPConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSNTA"">
            <td id=""tdMDSNTA"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA"" onchange=""cbcheck('MDSNTA')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
");
            WriteLiteral(@"            <td id=""tdMDSNTAConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" style=""border:none"" id=""trMDSNursing"">
            <td id=""tdMDSNursing"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing"" onchange=""cbcheck('MDSNursing')"" />
            </td>
            <td>ARD Look-back and Care Plan documentation supports Nursing CMG </td>
            <td id=""tdMDSNursingConfirm"" class=""confirmed""></td>
        </tr>
    </table>


    <hr style=""border-top: 2px solid black;"" />


    <table class=""TableClick content MDSoverride"" id=""track1"">
        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trBOPatient1"">
            <td id=""tdBOPatient1"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOPatient1"" onchange=""patientleave(this, 'save', 1); mdsadddays('save', 1)"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688104146", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688105083", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688106057", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatient1Confirm"" class=""confirmed""></td>
        </tr>
        <tr class=""pay pdpm hmoa levels mcb trerror MDSoverride"" id=""trMDSPayment1"">
            <td id=""tdMDSPayment1"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment1"" onchange=""ddcheck('MDSPayment1')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688107480", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688108417", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688109391", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>\n                Payment Information on this line Affects Billing Next Month\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688110503", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSPayment1Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD1"">
            <td id=""tdMDSARD1"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD1"" onchange=""datecheck('MDSARD1')"" onkeyup=""datecheck('MDSARD1')"" />
            </td>
            <td>ARD</td>
            <td id=""tdMDSARD1Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType1"">
            <td id=""tdMDSAssessmentType1"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType1"" onchange=""ddcheck('MDSAssessmentType1')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688112483", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688113420", async() => {
                WriteLiteral("14 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688114398", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688115376", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688116354", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688117332", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688118307", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688119282", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentType1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM1"">
            <td id=""tdMDSAssessmentTypePDPM1"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM1"" onchange=""ddcheck('MDSAssessmentTypePDPM1')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688120702", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688121639", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypePDPM1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS1"">
            <td id=""tdMDSHIPPS1"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS1"" onkeyup=""textcheck('MDSHIPPS1')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPS1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays1"">
            <td id=""tdMDSUnbillDays1"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays1"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(1); mdsadddays('save', 1)"" />
            </td>
            <td>
                Number of Unbillable Days due to Interrupted Stay/Skip days
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688123580", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSUnbillDays1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart1"">
            <td id=""tdMDSARDStart1"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart1"" onchange=""datecheck('MDSARDStart1'); mdsadddays('save', 1)"" onkeyup=""datecheck('MDSARDStart1'); mdsadddays('save', 1)"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStart1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd1"">
            <td id=""tdMDSARDEnd1"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd1"" onchange=""datechecknoerror('MDSARDEnd1'); mdsadddays('save', 1)"" onkeyup=""datechecknoerror('MDSARDEnd1'); mdsadddays('save', 1)"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEnd1Confirm"" class=""confirm");
            WriteLiteral(@"ed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays1"">
            <td id=""tdMDSNumDays1"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSNumDays1"" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDays1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted1"">
            <td id=""tdMDSTransmitted1"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted1"" onchange=""cbcheck('MDSTransmitted1')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmitted1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT1"">
            <td id=""tdMDSPTOT1"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT1"" onchange=""cbcheck('MDSPTOT1')"" />
            </td>
            <td>A");
            WriteLiteral(@"RD look-back and Care Plan documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOT1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP1"">
            <td id=""tdMDSSLP1"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP1"" onchange=""cbcheck('MDSSLP1')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
            <td id=""tdMDSSLP1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA1"">
            <td id=""tdMDSNTA1"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA1"" onchange=""cbcheck('MDSNTA1')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
            <td id=""tdMDSNTA1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trMDSNursing1"">
            <td id=""tdMD");
            WriteLiteral(@"SNursing1"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing1"" onchange=""cbcheck('MDSNursing1')"" />
            </td>
            <td>ARD Look-back and Care Plan documentation supports Nursing CMG </td>
            <td id=""tdMDSNursing1Confirm"" class=""confirmed""></td>
        </tr>
    </table>

    <hr style=""border-top: 2px solid black;"" id=""trackhead2"" class=""hidden"" />
    <input type=""button"" class=""btn btn-primary"" value=""Add Track"" id=""addtrack1"" onclick=""addtrack(1)"" />
    <input type=""button"" class=""btn btn-primary hidden"" value=""Add Track"" id=""addtrack2"" onclick=""addtrack(2)"" />
    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack1"" onclick=""removetrack(1)"" />
    <div style=""height:20px"" id=""trackspace2""></div>




    <table class=""TableClick content MDSoverride"" id=""track2"">
        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trBOPatient2"">
            <td id=""tdBOPatient2"" class=""tderror"">
                <");
            WriteLiteral("select class=\"txtbox\" id=\"ddBOPatient2\" onchange=\"patientleave(this, \'save\', 2); mdsadddays(\'save\', 2)\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688129349", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688130286", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688131260", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatient2Confirm"" class=""confirmed""></td>
        </tr>
        <tr class=""pay pdpm hmoa levels mcb trerror MDSoverride"" id=""trMDSPayment2"">
            <td id=""tdMDSPayment2"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment2"" onchange=""ddcheck('MDSPayment2')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688132683", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688133620", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688134594", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>\n                Payment Information on this line Affects Billing Next Month\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688135706", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSPayment2Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD2"">
            <td id=""tdMDSARD2"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD2"" onchange=""datecheck('MDSARD2')"" onkeyup=""datecheck('MDSARD2')"" />
            </td>
            <td>ARD</td>
            <td id=""tdMDSARD2Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType2"">
            <td id=""tdMDSAssessmentType2"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType2"" onchange=""ddcheck('MDSAssessmentType2')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688137686", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688138623", async() => {
                WriteLiteral("24 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688139601", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688140579", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688141557", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688142535", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688143510", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688144485", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentType2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM2"">
            <td id=""tdMDSAssessmentTypePDPM2"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM2"" onchange=""ddcheck('MDSAssessmentTypePDPM2')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688145905", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688146842", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypePDPM2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS2"">
            <td id=""tdMDSHIPPS2"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS2"" onkeyup=""textcheck('MDSHIPPS2')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPS2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays2"">
            <td id=""tdMDSUnbillDays2"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays2"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(2); mdsadddays('save', 2)"" />
            </td>
            <td>
                Number of Unbillable Days due to Interrupted Stay/Skip days
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688148783", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSUnbillDays2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart2"">
            <td id=""tdMDSARDStart2"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart2"" onchange=""datecheck('MDSARDStart2'); mdsadddays('save', 2)"" onkeyup=""datecheck('MDSARDStart2'); mdsadddays('save', 2)"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStart2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd2"">
            <td id=""tdMDSARDEnd2"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd2"" onchange=""datechecknoerror('MDSARDEnd2'); mdsadddays('save', 2)"" onkeyup=""datechecknoerror('MDSARDEnd2'); mdsadddays('save', 2)"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEnd2Confirm"" class=""confirm");
            WriteLiteral(@"ed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays2"">
            <td id=""tdMDSNumDays2"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSNumDays2"" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDays2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted2"">
            <td id=""tdMDSTransmitted2"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted2"" onchange=""cbcheck('MDSTransmitted2')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmitted2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT2"">
            <td id=""tdMDSPTOT2"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT2"" onchange=""cbcheck('MDSPTOT2')"" />
            </td>
            <td>A");
            WriteLiteral(@"RD look-back and Care Plan documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOT2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP2"">
            <td id=""tdMDSSLP2"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP2"" onchange=""cbcheck('MDSSLP2')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
            <td id=""tdMDSSLP2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA2"">
            <td id=""tdMDSNTA2"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA2"" onchange=""cbcheck('MDSNTA2')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
            <td id=""tdMDSNTA2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trMDSNursing2"">
            <td id=""tdMD");
            WriteLiteral(@"SNursing2"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing2"" onchange=""cbcheck('MDSNursing2')"" />
            </td>
            <td>ARD Look-back and Care Plan documentation supports Nursing CMG </td>
            <td id=""tdMDSNursing2Confirm"" class=""confirmed""></td>
        </tr>
    </table>

    <hr style=""border-top: 2px solid black;"" id=""trackhead3"" class=""hidden"" />
    <input type=""button"" class=""btn btn-primary hidden"" value=""Add Track"" id=""addtrack3"" onclick=""addtrack(3)"" />
    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack2"" onclick=""removetrack(2)"" />
    <div style=""height:20px"" id=""trackspace3"" class=""hidden""></div>



    <table class=""TableClick content MDSoverride"" id=""track3"">
        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trBOPatient3"">
            <td id=""tdBOPatient3"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOPatient3"" onchange=""patientleave(this, 'save', 3); mdsadddays('");
            WriteLiteral("save\', 3)\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688154448", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688155385", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688156359", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatient3Confirm"" class=""confirmed""></td>
        </tr>
        <tr class=""pay pdpm hmoa levels mcb trerror MDSoverride"" id=""trMDSPayment3"">
            <td id=""tdMDSPayment3"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment3"" onchange=""ddcheck('MDSPayment3')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688157782", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688158719", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688159693", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>\n                Payment Information on this line Affects Billing Next Month\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688160805", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSPayment3Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD3"">
            <td id=""tdMDSARD3"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD3"" onchange=""datecheck('MDSARD3')"" onkeyup=""datecheck('MDSARD3')"" />
            </td>
            <td>ARD</td>
            <td id=""tdMDSARD3Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType3"">
            <td id=""tdMDSAssessmentType3"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType3"" onchange=""ddcheck('MDSAssessmentType3')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688162785", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688163722", async() => {
                WriteLiteral("34 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688164700", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688165678", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688166656", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688167634", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688168609", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688169584", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentType3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM3"">
            <td id=""tdMDSAssessmentTypePDPM3"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM3"" onchange=""ddcheck('MDSAssessmentTypePDPM3')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688171004", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688171941", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypePDPM3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS3"">
            <td id=""tdMDSHIPPS3"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS3"" onkeyup=""textcheck('MDSHIPPS3')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPS3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays3"">
            <td id=""tdMDSUnbillDays3"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays3"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(3); mdsadddays('save', 3)"" />
            </td>
            <td>
                Number of Unbillable Days due to Interrupted Stay/Skip days
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688173882", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSUnbillDays3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart3"">
            <td id=""tdMDSARDStart3"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart3"" onchange=""datecheck('MDSARDStart3'); mdsadddays('save', 3)"" onkeyup=""datecheck('MDSARDStart3'); mdsadddays('save', 3)"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStart3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd3"">
            <td id=""tdMDSARDEnd3"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd3"" onchange=""datechecknoerror('MDSARDEnd3'); mdsadddays('save', 3)"" onkeyup=""datechecknoerror('MDSARDEnd3'); mdsadddays('save', 3)"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEnd3Confirm"" class=""confirm");
            WriteLiteral(@"ed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays3"">
            <td id=""tdMDSNumDays3"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSNumDays3"" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDays3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted3"">
            <td id=""tdMDSTransmitted3"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted3"" onchange=""cbcheck('MDSTransmitted3')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmitted3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT3"">
            <td id=""tdMDSPTOT3"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT3"" onchange=""cbcheck('MDSPTOT3')"" />
            </td>
            <td>A");
            WriteLiteral(@"RD look-back and Care Plan documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOT3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP3"">
            <td id=""tdMDSSLP3"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP3"" onchange=""cbcheck('MDSSLP3')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
            <td id=""tdMDSSLP3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA3"">
            <td id=""tdMDSNTA3"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA3"" onchange=""cbcheck('MDSNTA3')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
            <td id=""tdMDSNTA3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trMDSNursing3"">
            <td id=""tdMD");
            WriteLiteral(@"SNursing3"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing3"" onchange=""cbcheck('MDSNursing3')"" />
            </td>
            <td>ARD Look-back and Care Plan documentation supports Nursing CMG </td>
            <td id=""tdMDSNursing3Confirm"" class=""confirmed""></td>
        </tr>
    </table>

    <hr style=""border-top: 2px solid black;"" id=""trackhead4"" class=""hidden"" />
    <input type=""button"" class=""btn btn-primary hidden"" value=""Add Track"" id=""addtrack4"" onclick=""addtrack(4)"" />
    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack3"" onclick=""removetrack(3)"" />
    <div style=""height:20px"" id=""trackspace4"" class=""hidden""></div>



    <table class=""TableClick content MDSoverride"" id=""track4"">
        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trBOPatient4"">
            <td id=""tdBOPatient4"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOPatient4"" onchange=""patientleave(this, 'save', 4); mdsadddays('");
            WriteLiteral("save\', 4)\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688179547", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688180484", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688181458", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatient4Confirm"" class=""confirmed""></td>
        </tr>
        <tr class=""pay pdpm hmoa levels mcb trerror MDSoverride"" id=""trMDSPayment4"">
            <td id=""tdMDSPayment4"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment4"" onchange=""ddcheck('MDSPayment4')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688182881", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688183818", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688184792", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>\n                Payment Information on this line Affects Billing Next Month\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688185904", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSPayment4Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD4"">
            <td id=""tdMDSARD4"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD4"" onchange=""datecheck('MDSARD4')"" onkeyup=""datecheck('MDSARD4')"" />
            </td>
            <td>ARD</td>
            <td id=""tdMDSARD4Confirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType4"">
            <td id=""tdMDSAssessmentType4"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType4"" onchange=""ddcheck('MDSAssessmentType4')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688187884", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688188821", async() => {
                WriteLiteral("44 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688189799", async() => {
                WriteLiteral("40 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688190777", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688191755", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688192733", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688193708", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688194683", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentType4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM4"">
            <td id=""tdMDSAssessmentTypePDPM4"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM4"" onchange=""ddcheck('MDSAssessmentTypePDPM4')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688196103", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688197040", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypePDPM4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS4"">
            <td id=""tdMDSHIPPS4"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS4"" onkeyup=""textcheck('MDSHIPPS4')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPS4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays4"">
            <td id=""tdMDSUnbillDays4"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays4"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(4); mdsadddays('save', 4)"" />
            </td>
            <td>
                Number of Unbillable Days due to Interrupted Stay/Skip days
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688198981", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdMDSUnbillDays4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart4"">
            <td id=""tdMDSARDStart4"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart4"" onchange=""datecheck('MDSARDStart4'); mdsadddays('save', 4)"" onkeyup=""datecheck('MDSARDStart4'); mdsadddays('save', 4)"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStart4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd4"">
            <td id=""tdMDSARDEnd4"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd4"" onchange=""datechecknoerror('MDSARDEnd4'); mdsadddays('save', 4)"" onkeyup=""datechecknoerror('MDSARDEnd4'); mdsadddays('save', 4)"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEnd4Confirm"" class=""confirm");
            WriteLiteral(@"ed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays4"">
            <td id=""tdMDSNumDays4"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSNumDays4"" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDays4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted4"">
            <td id=""tdMDSTransmitted4"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted4"" onchange=""cbcheck('MDSTransmitted4')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmitted4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT4"">
            <td id=""tdMDSPTOT4"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT4"" onchange=""cbcheck('MDSPTOT4')"" />
            </td>
            <td>A");
            WriteLiteral(@"RD look-back and Care Plan documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOT4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP4"">
            <td id=""tdMDSSLP4"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP4"" onchange=""cbcheck('MDSSLP4')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
            <td id=""tdMDSSLP4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA4"">
            <td id=""tdMDSNTA4"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA4"" onchange=""cbcheck('MDSNTA4')"" />
            </td>
            <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
            <td id=""tdMDSNTA4Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror MDSoverride"" style=""border:none"" id=""trMDSNursing4"">
            <td id=""tdMD");
            WriteLiteral(@"SNursing4"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing4"" onchange=""cbcheck('MDSNursing4')"" />
            </td>
            <td>ARD Look-back and Care Plan documentation supports Nursing CMG </td>
            <td id=""tdMDSNursing4Confirm"" class=""confirmed""></td>
        </tr>
    </table>

    <hr style=""border-top: 2px solid black;"" id=""trackhead5"" class=""hidden"" />
    
    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack4"" onclick=""removetrack(4)"" />


    <div style=""height:20px""></div>

</div>
");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMDSTherapy"">
    <table style=""width:100%"">
        <tr>
            <td>MDS/Therapy</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MDSTherapyComplete""></td>
        </tr>
    </table>
</button>
");
            WriteLiteral(@"<div class=""content yes"" style=""border: 1px solid black"" id=""MDSTherapyContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDST5Day"">
            <td id=""tdMDST5Day"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDST5Day"" onchange=""cbcheck('MDST5Day')"" />
            </td>
            <td>5-Day PPS - Total Days, Minutes, and Distinct Days verified  </td>
            <td id=""tdMDST5DayConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTDischarge"">
            <td id=""tdMDSTDischarge"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTDischarge"" onchange=""cbcheck('MDSTDischarge')"" />
            </td>
            <td>Discharge PPS MDS - Total Days, Minutes, and Distinct Days verified  </td>
            <td id=""tdMDSTDischargeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTST"">
           ");
            WriteLiteral(" <td id=\"tdMDSTST\" class=\"tderror\">\n                <select class=\"txtbox\" id=\"ddMDSTST\" onchange=\"ddcheck(\'MDSTST\'); nowarning(\'MDSTST\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688205746", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688206683", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688207658", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>ST Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTSTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTOT"">
            <td id=""tdMDSTOT"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTOT"" onchange=""ddcheck('MDSTOT'); nowarning('MDSTOT')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688209058", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688209995", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688210970", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>OT Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTOTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" style=""border:none"" id=""trMDSTPT"">
            <td id=""tdMDSTPT"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTPT"" onchange=""ddcheck('MDSTPT'); nowarning('MDSTPT')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688212392", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688213329", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688214304", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>PT Percent (%) of individual Minutes during stay > 75%</td>\n            <td id=\"tdMDSTPTConfirm\" class=\"confirmed\"></td>\n        </tr>\n    </table>\n    <div style=\"height:20px\"></div>\n</div>\n");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMedicalRecords"">
    <table style=""width:100%"">
        <tr>
            <td>Medical Records</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MedicalRecordsComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""MedicalRecordsContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"" id=""tblMR"">

        <tr class=""yes pay pdpm hmoa levels trerror"" id=""trMRConsent"">
            <td id=""tdMRConsent"" class=""tderror"">
                <input type=""text"" id=""txtMRConsent"" class=""txtbox txtdate"" onchange=""datecheck('MRConsent'); consentcheck()"" onkeyup=""datecheck('MRConsent'); consentcheck()"" />
            </td>
            <td>
                Date Consent to Treat Obtained
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688216475", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n            </td>\n            <td id=\"tdMRConsentConfirm\" class=\"confirmed\"></td>\n        </tr>\n\n\n        <tr class=\"yes pay pdpm hmoa\" id=\"trMRInitialDue\">\n            <td id=\"tdMRInitialDue\"");
            BeginWriteAttribute("class", " class=\"", 69824, "\"", 69832, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMRInitialDueCert\"");
            BeginWriteAttribute("value", " value=\"", 69882, "\"", 69924, 1);
#nullable restore
#line 1725 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 69890, Html.Raw(ViewData["InitialCert"]), 69890, 34, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMRInitialDue"" onchange=""datechecknoerror('MRInitialDue'); checkinitial()"" onkeyup=""datechecknoerror('MRInitialDue'); checkinitial()"" />
            </td>
            <td>Initial Certification - Date Completed (<b>Due no later than ");
#nullable restore
#line 1728 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                                                        Write(Html.Raw(ViewData["InitialCert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b>)</td>
            <td id=""tdMRInitialDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""trerror"" id=""trMRInitialReason"">
            <td id=""tdMRInitialReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMRInitialReason"" onchange=""textcheck('MRInitialReason')"" onkeyup=""textcheck('MRInitialReason')"" />
            </td>
            <td>Remedy for no Initial Certification</td>
            <td id=""tdMRInitialReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMRInitialYesNo"">
            <td id=""tdMRInitialYesNo"" class=""tderror"">
                <select id=""ddMRInitialYesNo"" class=""txtbox"" onchange=""ddcheck('MRInitialYesNo'); nowarning('MRInitialYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688220017", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688220954", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688221929", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMRInitialYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR1ReCertDue"">
            <td id=""tdMR1ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 71441, "\"", 71449, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR1ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 71499, "\"", 71536, 1);
#nullable restore
#line 1755 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 71507, Html.Raw(ViewData["ReCert"]), 71507, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR1ReCertDue"" onchange=""datechecknoerror('MR1ReCertDue'); check1st()"" onkeyup=""datechecknoerror('MR1ReCertDue'); check1st()"" />
            </td>
            <td>1st Re Certification - Date Completed (<b>Due no later than ");
#nullable restore
#line 1758 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                                                       Write(Html.Raw(ViewData["ReCert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b>)</td>
            <td id=""tdMR1ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR1ReCertReason"">
            <td id=""tdMR1ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR1ReCertReason"" onchange=""textcheck('MR1ReCertReason')"" onkeyup=""textcheck('MR1ReCertReason')"" />
            </td>
            <td>Remedy for no 1st Re Certification</td>
            <td id=""tdMR1ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR1ReCertYesNo"">
            <td id=""tdMR1ReCertYesNo"" class=""tderror"">
                <select id=""ddMR1ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR1ReCertYesNo'); nowarning('MR1ReCertYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688225304", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688226241", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688227216", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR1ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR2ReCertDue"">
            <td id=""tdMR2ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 73050, "\"", 73058, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR2ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 73108, "\"", 73116, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR2ReCertDue"" onchange=""datechecknoerror('MR2ReCertDue'); check2st()"" onkeyup=""datechecknoerror('MR2ReCertDue'); check2st()"" />
            </td>
            <td>2nd Re Certification - Date Completed (<b>Due no later than <span id=""MR2ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR2ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR2ReCertReason"">
            <td id=""tdMR2ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR2ReCertReason"" onchange=""textcheck('MR2ReCertReason')"" onkeyup=""textcheck('MR2ReCertReason')"" />
            </td>
            <td>Remedy for no 2nd Re Certification</td>
            <td id=""tdMR2ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR2ReCertYesNo"">
            <td id=""tdMR2ReCertYesNo"" class=""tderror"">
                <select id=""ddMR2Re");
            WriteLiteral("CertYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'MR2ReCertYesNo\'); nowarning(\'MR2ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688230035", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688230972", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688231947", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR2ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR3ReCertDue"">
            <td id=""tdMR3ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 74640, "\"", 74648, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR3ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 74698, "\"", 74706, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR3ReCertDue"" onchange=""datechecknoerror('MR3ReCertDue'); check3st()"" onkeyup=""datechecknoerror('MR3ReCertDue'); check3st()"" />
            </td>
            <td>3rd Re Certification - Date Completed (<b>Due no later than <span id=""MR3ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR3ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR3ReCertReason"">
            <td id=""tdMR3ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR3ReCertReason"" onchange=""textcheck('MR3ReCertReason')"" onkeyup=""textcheck('MR3ReCertReason')"" />
            </td>
            <td>Remedy for no 3rd Re Certification</td>
            <td id=""tdMR3ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR3ReCertYesNo"">
            <td id=""tdMR3ReCertYesNo"" class=""tderror"">
                <select id=""ddMR3Re");
            WriteLiteral("CertYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'MR3ReCertYesNo\'); nowarning(\'MR3ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688234766", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688235703", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688236678", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR3ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR4ReCertDue"">
            <td id=""tdMR4ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 76230, "\"", 76238, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR4ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 76288, "\"", 76296, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR4ReCertDue"" onchange=""datechecknoerror('MR4ReCertDue'); check4st()"" onkeyup=""datechecknoerror('MR4ReCertDue'); check4st()"" />
            </td>
            <td>4th Re Certification - Date Completed (<b>Due no later than <span id=""MR4ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR4ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR4ReCertReason"">
            <td id=""tdMR4ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR4ReCertReason"" onchange=""textcheck('MR4ReCertReason')"" onkeyup=""textcheck('MR4ReCertReason')"" />
            </td>
            <td>Remedy for no 4th Re Certification</td>
            <td id=""tdMR4ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR4ReCertYesNo"">
            <td id=""tdMR4ReCertYesNo"" class=""tderror"">
                <select id=""ddMR4Re");
            WriteLiteral("CertYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'MR4ReCertYesNo\'); nowarning(\'MR4ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688239497", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688240434", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688241409", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR4ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR5ReCertDue"">
            <td id=""tdMR5ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 77819, "\"", 77827, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                <input id=\"txtMR5ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 77877, "\"", 77885, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR5ReCertDue"" onchange=""datechecknoerror('MR5ReCertDue'); check5st()"" onkeyup=""datechecknoerror('MR5ReCertDue'); check5st()"" />
            </td>
            <td>5th Re Certification - Date Completed (<b>Due no later than <span id=""MR5ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR5ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR5ReCertReason"">
            <td id=""tdMR5ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR5ReCertReason"" onchange=""textcheck('MR5ReCertReason')"" onkeyup=""textcheck('MR5ReCertReason')"" />
            </td>
            <td>Remedy for no 5th Re Certification</td>
            <td id=""tdMR5ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR5ReCertYesNo"">
            <td id=""tdMR5ReCertYesNo"" class=""tderror"">
                <select id=""ddMR5Re");
            WriteLiteral("CertYesNo\" class=\"txtbox\" onchange=\"ddcheck(\'MR5ReCertYesNo\'); nowarning(\'MR5ReCertYesNo\')\">\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688244227", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688245164", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688246139", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late MD Certification Obtained</td>
            <td id=""tdMR5ReCertYesNoConfirm"" class=""confirmed""></td>
        </tr>




        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trMRPrimary"">
            <td id=""tdMRPrimary"" class=""tderror"">
                <input type=""checkbox"" id=""cbMRPrimary"" onchange=""cbcheck('MRPrimary')"" />
            </td>
            <td>Primary Dx in I0020B matches Primary Dx on UB04</td>
            <td id=""tdMRPrimaryConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trMROther"">
            <td id=""tdMROther"" class=""tderror"">
                <input type=""checkbox"" id=""cbMROther"" onchange=""cbcheck('MROther')"" />
            </td>
            <td>Other ICD-10s sequenced to support skilled services on UB04</td>
            <td id=""tdMROtherConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa levels mcb trerror"" style=""border:non");
            WriteLiteral(@"e"" id=""trMRTherapy"">
            <td id=""tdMRTherapy"" class=""tderror"">
                <input type=""checkbox"" id=""cbMRTherapy"" onchange=""cbcheck('MRTherapy')"" />
            </td>
            <td>
                Therapy Medical and Treatment Diagnosis is present to support claim
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688248505", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n            </td>\n            <td id=\"tdMRTherapyConfirm\" class=\"confirmed\"></td>\n        </tr>\n\n    </table>\n    <div style=\"height:20px\"></div>\n</div>\n");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnTherapy"">
    <table style=""width:100%"">
        <tr>
            <td>Therapy/Medical Records</td>
            <td style=""text-align:right; padding-right:50px;"" id=""TherapyComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""TherapyContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">


        <tr class=""yes"" id=""trPTEvalDate"">
            <td id=""tdPTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 81229, "\"", 81237, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDate"" onchange=""datechecknoerror('PTEvalDate'); checkevaldate('PT') "" onkeyup=""datechecknoerror('PTEvalDate'); checkevaldate('PT')"" />
            </td>
            <td>PT Evaluation Date</td>
            <td id=""tdPTEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTEvalDateSigned"">
            <td id=""tdPTEvalDateSigned"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDateSigned"" onchange=""datecheck('PTEvalDateSigned'); checkevalsign('PT')"" onkeyup=""datecheck('PTEvalDateSigned'); checkevalsign('PT')"" />
            </td>
            <td>
                PT Evaluation - Date Order MD Signed <b><span id=""PTEvalDateSignedDue""></span></b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688251477", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n            </td>\n            <td id=\"tdPTEvalDateSignedConfirm\" class=\"confirmed\"></td>\n        </tr>\n\n");
            WriteLiteral(@"
        <tr class=""yes therapyvisable trerror"" id=""trPTEvalDateSignedYesNo"">
            <td id=""tdPTEvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddPTEvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTEvalDateSignedYesNo'); nowarning('PTEvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688253143", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688254080", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPTClarDate"">
            <td id=""tdPTClarDate""");
            BeginWriteAttribute("class", " class=\"", 83476, "\"", 83484, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate"" onchange=""datechecknoerror('PTClarDate'); checkclardate('PT')"" onkeyup=""datechecknoerror('PTClarDate'); checkclardate('PT')"" />
            </td>
            <td>
                PT Clarification Date <b><span id=""PTClarDateDue""></span></b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688255828", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDateReason"">
            <td id=""tdPTClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDateReason"" onchange=""textcheck('PTClarDateReason');"" onkeyup=""textcheck('PTClarDateReason');"" />
            </td>
            <td id=""PTClarDateReasonText""></td>
            <td id=""tdPTClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDateSigned"">
            <td id=""tdPTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 84595, "\"", 84603, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDateSigned"" onchange=""datechecknoerror('PTClarDateSigned'); checkClarDateSigned('PT')"" onkeyup=""datechecknoerror('PTClarDateSigned'); checkClarDateSigned('PT')"" />
            </td>
            <td>
                PT Clarification - Date Order MD Signed <b><span id=""PTClarDateSignedDue""></span></b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688258256", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDateSignedReason"">
            <td id=""tdPTClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDateSignedReason"" onchange=""textcheck('PTClarDateSignedReason');"" onkeyup=""textcheck('PTClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDateSignedYesNo"">
            <td id=""tdPTClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDateSignedYesNo'); nowarning('PTClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688260405", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688261342", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688262317", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trPTClarDate1"">
            <td id=""tdPTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 86439, "\"", 86447, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate1"" onchange=""datechecknoerror('PTClarDate1'); checkClarDate1('PT')"" onkeyup=""datechecknoerror('PTClarDate1'); checkClarDate1('PT')"" />
            </td>
            <td>
                PT Reclarification #1 Date <b><span id=""PTClarDate1Due""></span></b>

                                           ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688264103", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate1Reason"">
            <td id=""tdPTClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate1Reason"" onchange=""textcheck('PTClarDate1Reason');"" onkeyup=""textcheck('PTClarDate1Reason');"" />
            </td>
            <td id=""PTClarDate1ReasonText""></td>
            <td id=""tdPTClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate1Signed"">
            <td id=""tdPTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 87597, "\"", 87605, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate1Signed"" onchange=""datechecknoerror('PTClarDate1Signed'); checkClarDate1Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate1Signed'); checkClarDate1Signed('PT')"" />
            </td>
            <td>
                PT Reclarification #1 - Date Order MD Signed <b><span id=""PTClarDate1SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688266548", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate1SignedReason"">
            <td id=""tdPTClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate1SignedReason"" onchange=""textcheck('PTClarDate1SignedReason');"" onkeyup=""textcheck('PTClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate1SignedYesNo"">
            <td id=""tdPTClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate1SignedYesNo'); nowarning('PTClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688268709", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688269646", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688270621", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate2"">
            <td id=""tdPTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 89460, "\"", 89468, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate2"" onchange=""datechecknoerror('PTClarDate2'); checkClarDate2('PT')"" onkeyup=""datechecknoerror('PTClarDate2'); checkClarDate2('PT')"" />
            </td>
            <td>
                PT Reclarification #2 Date <b><span id=""PTClarDate2Due""></span></b>

                                           ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688272407", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate2Reason"">
            <td id=""tdPTClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate2Reason"" onchange=""textcheck('PTClarDate2Reason');"" onkeyup=""textcheck('PTClarDate2Reason');"" />
            </td>
            <td id=""PTClarDate2ReasonText""></td>
            <td id=""tdPTClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate2Signed"">
            <td id=""tdPTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 90618, "\"", 90626, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate2Signed"" onchange=""datechecknoerror('PTClarDate2Signed'); checkClarDate2Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate2Signed'); checkClarDate2Signed('PT')"" />
            </td>
            <td>
                PT Reclarification #2 - Date Order MD Signed <b><span id=""PTClarDate2SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688274852", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate2SignedReason"">
            <td id=""tdPTClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate2SignedReason"" onchange=""textcheck('PTClarDate2SignedReason');"" onkeyup=""textcheck('PTClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate2SignedYesNo"">
            <td id=""tdPTClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate2SignedYesNo'); nowarning('PTClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688277013", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688277950", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688278925", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPTClarDate3"">
            <td id=""tdPTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 92480, "\"", 92488, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate3"" onchange=""datechecknoerror('PTClarDate3'); checkClarDate3('PT')"" onkeyup=""datechecknoerror('PTClarDate3'); checkClarDate3('PT')"" />
            </td>
            <td>
                PT Reclarification #3 Date <b><span id=""PTClarDate3Due""></span></b>

                                           ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688280710", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate3Reason"">
            <td id=""tdPTClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate3Reason"" onchange=""textcheck('PTClarDate3Reason');"" onkeyup=""textcheck('PTClarDate3Reason');"" />
            </td>
            <td id=""PTClarDate3ReasonText""></td>
            <td id=""tdPTClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTClarDate3Signed"">
            <td id=""tdPTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 93638, "\"", 93646, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate3Signed"" onchange=""datechecknoerror('PTClarDate3Signed'); checkClarDate3Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate3Signed'); checkClarDate3Signed('PT')"" />
            </td>
            <td>
                PT Reclarification #3 - Date Order MD Signed <b><span id=""PTClarDate3SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688283155", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPTClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate3SignedReason"">
            <td id=""tdPTClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDate3SignedReason"" onchange=""textcheck('PTClarDate3SignedReason');"" onkeyup=""textcheck('PTClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPTClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPTClarDate3SignedYesNo"">
            <td id=""tdPTClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddPTClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate3SignedYesNo'); nowarning('PTClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688285316", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688286253", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688287228", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPTDischargeDate"">
            <td id=""tdPTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 95509, "\"", 95517, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTDischargeDate"" onchange=""datechecknoerror('PTDischargeDate'); checkclardate('PT'); checkClarDate1('PT')"" onkeyup=""datechecknoerror('PTDischargeDate'); checkclardate('PT'); checkClarDate1('PT')"" />
            </td>
            <td>
                PT Discharge Date
            </td>
            <td id=""tdPTDischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdPT2"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another PT"" onclick=""addther('PT2')"" id=""addPT2"" />
            </td>
        </tr>
    </table>



    <table class=""TableClick content therapyvisable"" id=""PT2"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove PT"" onclick=""removether('PT2')"" id=""removePT2"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trPT2EvalDate"">
            <td id=""tdPT2EvalDate""");
            BeginWriteAttribute("class", " class=\"", 96528, "\"", 96536, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2EvalDate"" onchange=""datechecknoerror('PT2EvalDate'); checkevaldate('PT2') "" onkeyup=""datechecknoerror('PT2EvalDate'); checkevaldate('PT2')"" />
            </td>
            <td>PT2 Evaluation Date</td>
            <td id=""tdPT2EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT2EvalDateSigned"">
            <td id=""tdPT2EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 96995, "\"", 97003, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2EvalDateSigned"" onchange=""datechecknoerror('PT2EvalDateSigned'); checkevalsign('PT2')"" onkeyup=""datechecknoerror('PT2EvalDateSigned'); checkevalsign('PT2')"" />
            </td>
            <td>
                PT2 Evaluation - Date Order MD Signed <b><span id=""PT2EvalDateSignedDue""></span></b>

                                                      ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688290896", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2EvalDateSignedReason"">
            <td id=""tdPT2EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2EvalDateSignedReason"" onchange=""textcheck('PT2EvalDateSignedReason');"" onkeyup=""textcheck('PT2EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no PT2 Evaluation Order MD Signed</td>
            <td id=""tdPT2EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2EvalDateSignedYesNo"">
            <td id=""tdPT2EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT2EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2EvalDateSignedYesNo'); nowarning('PT2EvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688293055", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688293992", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688294967", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT2ClarDate"">
            <td id=""tdPT2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 98877, "\"", 98885, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate"" onchange=""datechecknoerror('PT2ClarDate'); checkclardate('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate'); checkclardate('PT2')"" />
            </td>
            <td>
                PT2 Clarification Date <b><span id=""PT2ClarDateDue""></span></b>

                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688296744", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDateReason"">
            <td id=""tdPT2ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDateReason"" onchange=""textcheck('PT2ClarDateReason');"" onkeyup=""textcheck('PT2ClarDateReason');"" />
            </td>
            <td id=""PT2ClarDateReasonText""></td>
            <td id=""tdPT2ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDateSigned"">
            <td id=""tdPT2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 100033, "\"", 100041, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDateSigned"" onchange=""datechecknoerror('PT2ClarDateSigned'); checkClarDateSigned('PT2')"" onkeyup=""datechecknoerror('PT2ClarDateSigned'); checkClarDateSigned('PT2')"" />
            </td>
            <td>
                PT2 Clarification - Date Order MD Signed <b><span id=""PT2ClarDateSignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688299187", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDateSignedReason"">
            <td id=""tdPT2ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDateSignedReason"" onchange=""textcheck('PT2ClarDateSignedReason');"" onkeyup=""textcheck('PT2ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDateSignedYesNo"">
            <td id=""tdPT2ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDateSignedYesNo'); nowarning('PT2ClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688301348", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688302285", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688303260", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trPT2ClarDate1"">
            <td id=""tdPT2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 101895, "\"", 101903, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate1"" onchange=""datechecknoerror('PT2ClarDate1'); checkClarDate1('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate1'); checkClarDate1('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #1 Date <b><span id=""PT2ClarDate1Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688305059", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate1Reason"">
            <td id=""tdPT2ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate1Reason"" onchange=""textcheck('PT2ClarDate1Reason');"" onkeyup=""textcheck('PT2ClarDate1Reason');"" />
            </td>
            <td id=""PT2ClarDate1ReasonText""></td>
            <td id=""tdPT2ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate1Signed"">
            <td id=""tdPT2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 103071, "\"", 103079, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate1Signed"" onchange=""datechecknoerror('PT2ClarDate1Signed'); checkClarDate1Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate1Signed'); checkClarDate1Signed('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #1 - Date Order MD Signed <b><span id=""PT2ClarDate1SignedDue""></span></b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688307527", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate1SignedReason"">
            <td id=""tdPT2ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate1SignedReason"" onchange=""textcheck('PT2ClarDate1SignedReason');"" onkeyup=""textcheck('PT2ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate1SignedYesNo"">
            <td id=""tdPT2ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate1SignedYesNo'); nowarning('PT2ClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688309700", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688310637", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688311612", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate2"">
            <td id=""tdPT2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 104960, "\"", 104968, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate2"" onchange=""datechecknoerror('PT2ClarDate2'); checkClarDate2('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate2'); checkClarDate2('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #2 Date <b><span id=""PT2ClarDate2Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688313411", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate2Reason"">
            <td id=""tdPT2ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate2Reason"" onchange=""textcheck('PT2ClarDate2Reason');"" onkeyup=""textcheck('PT2ClarDate2Reason');"" />
            </td>
            <td id=""PT2ClarDate2ReasonText""></td>
            <td id=""tdPT2ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate2Signed"">
            <td id=""tdPT2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 106136, "\"", 106144, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate2Signed"" onchange=""datechecknoerror('PT2ClarDate2Signed'); checkClarDate2Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate2Signed'); checkClarDate2Signed('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #2 - Date Order MD Signed <b><span id=""PT2ClarDate2SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688315875", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate2SignedReason"">
            <td id=""tdPT2ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate2SignedReason"" onchange=""textcheck('PT2ClarDate2SignedReason');"" onkeyup=""textcheck('PT2ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate2SignedYesNo"">
            <td id=""tdPT2ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate2SignedYesNo'); nowarning('PT2ClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688318048", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688318985", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688319960", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT2ClarDate3"">
            <td id=""tdPT2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 108020, "\"", 108028, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate3"" onchange=""datechecknoerror('PT2ClarDate3'); checkClarDate3('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate3'); checkClarDate3('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #3 Date <b><span id=""PT2ClarDate3Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688321758", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate3Reason"">
            <td id=""tdPT2ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate3Reason"" onchange=""textcheck('PT2ClarDate3Reason');"" onkeyup=""textcheck('PT2ClarDate3Reason');"" />
            </td>
            <td id=""PT2ClarDate3ReasonText""></td>
            <td id=""tdPT2ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2ClarDate3Signed"">
            <td id=""tdPT2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 109196, "\"", 109204, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate3Signed"" onchange=""datechecknoerror('PT2ClarDate3Signed'); checkClarDate3Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate3Signed'); checkClarDate3Signed('PT2')"" />
            </td>
            <td>
                PT2 Reclarification #3 - Date Order MD Signed <b><span id=""PT2ClarDate3SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688324222", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT2ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate3SignedReason"">
            <td id=""tdPT2ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT2ClarDate3SignedReason"" onchange=""textcheck('PT2ClarDate3SignedReason');"" onkeyup=""textcheck('PT2ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT2ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT2ClarDate3SignedYesNo"">
            <td id=""tdPT2ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddPT2ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate3SignedYesNo'); nowarning('PT2ClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688326395", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688327332", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688328307", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT2DischargeDate"">
            <td id=""tdPT2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 111089, "\"", 111097, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT2DischargeDate"" onchange=""datechecknoerror('PT2DischargeDate'); checkclardate('PT2'); checkClarDate1('PT2')"" onkeyup=""datechecknoerror('PT2DischargeDate'); checkclardate('PT2'); checkClarDate1('PT2')"" />
            </td>
            <td>
                PT2 Discharge Date
            </td>
            <td id=""tdPT2DischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdPT3"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another PT"" onclick=""addther('PT3')"" id=""addPT3"" />
            </td>
        </tr>

    </table>




    <table class=""TableClick content therapyvisable"" id=""PT3"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove PT"" onclick=""removether('PT3')"" id=""removePT3"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trPT3EvalDate"">
            <td id=""tdPT3EvalDate""");
            BeginWriteAttribute("class", " class=\"", 112119, "\"", 112127, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3EvalDate"" onchange=""datechecknoerror('PT3EvalDate'); checkevaldate('PT3') "" onkeyup=""datechecknoerror('PT3EvalDate'); checkevaldate('PT3')"" />
            </td>
            <td>PT3 Evaluation Date</td>
            <td id=""tdPT3EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT3EvalDateSigned"">
            <td id=""tdPT3EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 112586, "\"", 112594, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3EvalDateSigned"" onchange=""datechecknoerror('PT3EvalDateSigned'); checkevalsign('PT3')"" onkeyup=""datechecknoerror('PT3EvalDateSigned'); checkevalsign('PT3')"" />
            </td>
            <td>
                PT3 Evaluation - Date Order MD Signed <b><span id=""PT3EvalDateSignedDue""></span></b>

                                                      ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688331995", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3EvalDateSignedReason"">
            <td id=""tdPT3EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3EvalDateSignedReason"" onchange=""textcheck('PT3EvalDateSignedReason');"" onkeyup=""textcheck('PT3EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no PT3 Evaluation Order MD Signed</td>
            <td id=""tdPT3EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3EvalDateSignedYesNo"">
            <td id=""tdPT3EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT3EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3EvalDateSignedYesNo'); nowarning('PT3EvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688334154", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688335091", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688336066", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT3ClarDate"">
            <td id=""tdPT3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 114466, "\"", 114474, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate"" onchange=""datechecknoerror('PT3ClarDate'); checkclardate('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate'); checkclardate('PT3')"" />
            </td>
            <td>
                PT3 Clarification Date <b><span id=""PT3ClarDateDue""></span></b>

                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688337845", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDateReason"">
            <td id=""tdPT3ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDateReason"" onchange=""textcheck('PT3ClarDateReason');"" onkeyup=""textcheck('PT3ClarDateReason');"" />
            </td>
            <td id=""PT3ClarDateReasonText""></td>
            <td id=""tdPT3ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDateSigned"">
            <td id=""tdPT3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 115622, "\"", 115630, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDateSigned"" onchange=""datechecknoerror('PT3ClarDateSigned'); checkClarDateSigned('PT3')"" onkeyup=""datechecknoerror('PT3ClarDateSigned'); checkClarDateSigned('PT3')"" />
            </td>
            <td>
                PT3 Clarification - Date Order MD Signed <b><span id=""PT3ClarDateSignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688340288", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDateSignedReason"">
            <td id=""tdPT3ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDateSignedReason"" onchange=""textcheck('PT3ClarDateSignedReason');"" onkeyup=""textcheck('PT3ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDateSignedYesNo"">
            <td id=""tdPT3ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDateSignedYesNo'); nowarning('PT3ClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688342449", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688343386", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688344361", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate1"">
            <td id=""tdPT3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 117483, "\"", 117491, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate1"" onchange=""datechecknoerror('PT3ClarDate1'); checkClarDate1('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate1'); checkClarDate1('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #1 Date <b><span id=""PT3ClarDate1Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688346159", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate1Reason"">
            <td id=""tdPT3ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate1Reason"" onchange=""textcheck('PT3ClarDate1Reason');"" onkeyup=""textcheck('PT3ClarDate1Reason');"" />
            </td>
            <td id=""PT3ClarDate1ReasonText""></td>
            <td id=""tdPT3ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate1Signed"">
            <td id=""tdPT3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 118659, "\"", 118667, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate1Signed"" onchange=""datechecknoerror('PT3ClarDate1Signed'); checkClarDate1Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate1Signed'); checkClarDate1Signed('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #1 - Date Order MD Signed <b><span id=""PT3ClarDate1SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688348623", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate1SignedReason"">
            <td id=""tdPT3ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate1SignedReason"" onchange=""textcheck('PT3ClarDate1SignedReason');"" onkeyup=""textcheck('PT3ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate1SignedYesNo"">
            <td id=""tdPT3ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate1SignedYesNo'); nowarning('PT3ClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688350796", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688351733", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688352708", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate2"">
            <td id=""tdPT3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 120544, "\"", 120552, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate2"" onchange=""datechecknoerror('PT3ClarDate2'); checkClarDate2('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate2'); checkClarDate2('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #2 Date <b><span id=""PT3ClarDate2Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688354507", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate2Reason"">
            <td id=""tdPT3ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate2Reason"" onchange=""textcheck('PT3ClarDate2Reason');"" onkeyup=""textcheck('PT3ClarDate2Reason');"" />
            </td>
            <td id=""PT3ClarDate2ReasonText""></td>
            <td id=""tdPT3ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate2Signed"">
            <td id=""tdPT3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 121720, "\"", 121728, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate2Signed"" onchange=""datechecknoerror('PT3ClarDate2Signed'); checkClarDate2Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate2Signed'); checkClarDate2Signed('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #2 - Date Order MD Signed <b><span id=""PT3ClarDate2SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688356971", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate2SignedReason"">
            <td id=""tdPT3ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate2SignedReason"" onchange=""textcheck('PT3ClarDate2SignedReason');"" onkeyup=""textcheck('PT3ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate2SignedYesNo"">
            <td id=""tdPT3ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate2SignedYesNo'); nowarning('PT3ClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688359144", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688360081", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688361056", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trPT3ClarDate3"">
            <td id=""tdPT3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 123604, "\"", 123612, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate3"" onchange=""datechecknoerror('PT3ClarDate3'); checkClarDate3('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate3'); checkClarDate3('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #3 Date <b><span id=""PT3ClarDate3Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688362854", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate3Reason"">
            <td id=""tdPT3ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate3Reason"" onchange=""textcheck('PT3ClarDate3Reason');"" onkeyup=""textcheck('PT3ClarDate3Reason');"" />
            </td>
            <td id=""PT3ClarDate3ReasonText""></td>
            <td id=""tdPT3ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3ClarDate3Signed"">
            <td id=""tdPT3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 124780, "\"", 124788, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate3Signed"" onchange=""datechecknoerror('PT3ClarDate3Signed'); checkClarDate3Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate3Signed'); checkClarDate3Signed('PT3')"" />
            </td>
            <td>
                PT3 Reclarification #3 - Date Order MD Signed <b><span id=""PT3ClarDate3SignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688365318", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdPT3ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate3SignedReason"">
            <td id=""tdPT3ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPT3ClarDate3SignedReason"" onchange=""textcheck('PT3ClarDate3SignedReason');"" onkeyup=""textcheck('PT3ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdPT3ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trPT3ClarDate3SignedYesNo"">
            <td id=""tdPT3ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddPT3ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate3SignedYesNo'); nowarning('PT3ClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688367491", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688368428", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688369403", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdPT3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trPT3DischargeDate"">
            <td id=""tdPT3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 126673, "\"", 126681, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPT3DischargeDate"" onchange=""datechecknoerror('PT3DischargeDate'); checkclardate('PT3'); checkClarDate1('PT3')"" onkeyup=""datechecknoerror('PT3DischargeDate'); checkclardate('PT3'); checkClarDate1('PT3')"" />
            </td>
            <td>
                PT3 Discharge Date
            </td>
            <td id=""tdPT3DischargeDateConfirm"" class=""confirmed""></td>
        </tr>

    </table>



    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">


        <tr class=""yes"" id=""trOTEvalDate"">
            <td id=""tdOTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 127309, "\"", 127317, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTEvalDate"" onchange=""datechecknoerror('OTEvalDate'); checkevaldate('OT') "" onkeyup=""datechecknoerror('OTEvalDate'); checkevaldate('OT')"" />
            </td>
            <td>OT Evaluation Date</td>
            <td id=""tdOTEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOTEvalDateSigned"">
            <td id=""tdOTEvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 127767, "\"", 127775, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTEvalDateSigned"" onchange=""datechecknoerror('OTEvalDateSigned'); checkevalsign('OT')"" onkeyup=""datechecknoerror('OTEvalDateSigned'); checkevalsign('OT')"" />
            </td>
            <td>
                OT Evaluation - Date Order MD Signed <b><span id=""OTEvalDateSignedDue""></span></b>

                                                     ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688372654", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTEvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTEvalDateSignedReason"">
            <td id=""tdOTEvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTEvalDateSignedReason"" onchange=""textcheck('OTEvalDateSignedReason');"" onkeyup=""textcheck('OTEvalDateSignedReason');"" />
            </td>
            <td>Remedy for no OT Evaluation Order MD Signed</td>
            <td id=""tdOTEvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTEvalDateSignedYesNo"">
            <td id=""tdOTEvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddOTEvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTEvalDateSignedYesNo'); nowarning('OTEvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688374800", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688375737", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688376712", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOTClarDate"">
            <td id=""tdOTClarDate""");
            BeginWriteAttribute("class", " class=\"", 129625, "\"", 129633, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate"" onchange=""datechecknoerror('OTClarDate'); checkclardate('OT')"" onkeyup=""datechecknoerror('OTClarDate'); checkclardate('OT')"" />
            </td>
            <td>
                OT Clarification Date <b><span id=""OTClarDateDue""></span></b>

                                      ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688378480", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDateReason"">
            <td id=""tdOTClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDateReason"" onchange=""textcheck('OTClarDateReason');"" onkeyup=""textcheck('OTClarDateReason');"" />
            </td>
            <td id=""OTClarDateReasonText""></td>
            <td id=""tdOTClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDateSigned"">
            <td id=""tdOTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 130763, "\"", 130771, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDateSigned"" onchange=""datechecknoerror('OTClarDateSigned'); checkClarDateSigned('OT')"" onkeyup=""datechecknoerror('OTClarDateSigned'); checkClarDateSigned('OT')"" />
            </td>
            <td>
                OT Clarification - Date Order MD Signed <b><span id=""OTClarDateSignedDue""></span></b>
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688380906", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDateSignedReason"">
            <td id=""tdOTClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDateSignedReason"" onchange=""textcheck('OTClarDateSignedReason');"" onkeyup=""textcheck('OTClarDateSignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDateSignedYesNo"">
            <td id=""tdOTClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDateSignedYesNo'); nowarning('OTClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688383055", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688383992", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688384967", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trOTClarDate1"">
            <td id=""tdOTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 132603, "\"", 132611, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate1"" onchange=""datechecknoerror('OTClarDate1'); checkClarDate1('OT')"" onkeyup=""datechecknoerror('OTClarDate1'); checkClarDate1('OT')"" />
            </td>
            <td>
                OT Reclarification #1 Date <b><span id=""OTClarDate1Due""></span></b>

                                           ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688386755", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate1Reason"">
            <td id=""tdOTClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate1Reason"" onchange=""textcheck('OTClarDate1Reason');"" onkeyup=""textcheck('OTClarDate1Reason');"" />
            </td>
            <td id=""OTClarDate1ReasonText""></td>
            <td id=""tdOTClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate1Signed"">
            <td id=""tdOTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 133761, "\"", 133769, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate1Signed"" onchange=""datechecknoerror('OTClarDate1Signed'); checkClarDate1Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate1Signed'); checkClarDate1Signed('OT')"" />
            </td>
            <td>
                OT Reclarification #1 - Date Order MD Signed <b><span id=""OTClarDate1SignedDue""></span></b>

                                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688389248", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate1SignedReason"">
            <td id=""tdOTClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate1SignedReason"" onchange=""textcheck('OTClarDate1SignedReason');"" onkeyup=""textcheck('OTClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate1SignedYesNo"">
            <td id=""tdOTClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate1SignedYesNo'); nowarning('OTClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688391409", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688392346", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688393321", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate2"">
            <td id=""tdOTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 135670, "\"", 135678, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate2"" onchange=""datechecknoerror('OTClarDate2'); checkClarDate2('OT')"" onkeyup=""datechecknoerror('OTClarDate2'); checkClarDate2('OT')"" />
            </td>
            <td>
                OT Reclarification #2 Date <b><span id=""OTClarDate2Due""></span></b>

                                           ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688395109", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate2Reason"">
            <td id=""tdOTClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate2Reason"" onchange=""textcheck('OTClarDate2Reason');"" onkeyup=""textcheck('OTClarDate2Reason');"" />
            </td>
            <td id=""OTClarDate2ReasonText""></td>
            <td id=""tdOTClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate2Signed"">
            <td id=""tdOTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 136828, "\"", 136836, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate2Signed"" onchange=""datechecknoerror('OTClarDate2Signed'); checkClarDate2Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate2Signed'); checkClarDate2Signed('OT')"" />
            </td>
            <td>
                OT Reclarification #2 - Date Order MD Signed <b><span id=""OTClarDate2SignedDue""></span></b>

                                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688397602", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate2SignedReason"">
            <td id=""tdOTClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate2SignedReason"" onchange=""textcheck('OTClarDate2SignedReason');"" onkeyup=""textcheck('OTClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate2SignedYesNo"">
            <td id=""tdOTClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate2SignedYesNo'); nowarning('OTClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688399763", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688400700", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688401675", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOTClarDate3"">
            <td id=""tdOTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 138736, "\"", 138744, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate3"" onchange=""datechecknoerror('OTClarDate3'); checkClarDate3('OT')"" onkeyup=""datechecknoerror('OTClarDate3'); checkClarDate3('OT')"" />
            </td>
            <td>
                OT Reclarification #3 Date <b><span id=""OTClarDate3Due""></span></b>
                                           ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688403461", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate3Reason"">
            <td id=""tdOTClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate3Reason"" onchange=""textcheck('OTClarDate3Reason');"" onkeyup=""textcheck('OTClarDate3Reason');"" />
            </td>
            <td id=""OTClarDate3ReasonText""></td>
            <td id=""tdOTClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTClarDate3Signed"">
            <td id=""tdOTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 139893, "\"", 139901, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate3Signed"" onchange=""datechecknoerror('OTClarDate3Signed'); checkClarDate3Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate3Signed'); checkClarDate3Signed('OT')"" />
            </td>
            <td>
                OT Reclarification #3 - Date Order MD Signed <b><span id=""OTClarDate3SignedDue""></span></b>

                                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688405954", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOTClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate3SignedReason"">
            <td id=""tdOTClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOTClarDate3SignedReason"" onchange=""textcheck('OTClarDate3SignedReason');"" onkeyup=""textcheck('OTClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no OT Clarification Order MD Signed</td>
            <td id=""tdOTClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOTClarDate3SignedYesNo"">
            <td id=""tdOTClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddOTClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate3SignedYesNo'); nowarning('OTClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688408115", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688409052", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688410027", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOTDischargeDate"">
            <td id=""tdOTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 141810, "\"", 141818, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOTDischargeDate"" onchange=""datechecknoerror('OTDischargeDate'); checkclardate('OT'); checkClarDate1('OT')"" onkeyup=""datechecknoerror('OTDischargeDate'); checkclardate('OT'); checkClarDate1('OT')"" />
            </td>
            <td>
                OT Discharge Date
            </td>
            <td id=""tdOTDischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdOT2"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another OT"" onclick=""addther('OT2')"" id=""addOT2"" />
            </td>
        </tr>
    </table>



    <table class=""TableClick content therapyvisable"" id=""OT2"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove OT"" onclick=""removether('OT2')"" id=""removeOT2"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trOT2EvalDate"">
            <td id=""tdOT2EvalDate""");
            BeginWriteAttribute("class", " class=\"", 142829, "\"", 142837, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2EvalDate"" onchange=""datechecknoerror('OT2EvalDate'); checkevaldate('OT2') "" onkeyup=""datechecknoerror('OT2EvalDate'); checkevaldate('OT2')"" />
            </td>
            <td>OT2 Evaluation Date</td>
            <td id=""tdOT2EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT2EvalDateSigned"">
            <td id=""tdOT2EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 143296, "\"", 143304, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2EvalDateSigned"" onchange=""datechecknoerror('OT2EvalDateSigned'); checkevalsign('OT2')"" onkeyup=""datechecknoerror('OT2EvalDateSigned'); checkevalsign('OT2')"" />
            </td>
            <td>
                OT2 Evaluation - Date Order MD Signed <b><span id=""OT2EvalDateSignedDue""></span></b>

                                                      ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688413701", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2EvalDateSignedReason"">
            <td id=""tdOT2EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2EvalDateSignedReason"" onchange=""textcheck('OT2EvalDateSignedReason');"" onkeyup=""textcheck('OT2EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no OT2 Evaluation Order MD Signed</td>
            <td id=""tdOT2EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2EvalDateSignedYesNo"">
            <td id=""tdOT2EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT2EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2EvalDateSignedYesNo'); nowarning('OT2EvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688415860", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688416797", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688417772", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT2ClarDate"">
            <td id=""tdOT2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 145178, "\"", 145186, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate"" onchange=""datechecknoerror('OT2ClarDate'); checkclardate('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate'); checkclardate('OT2')"" />
            </td>
            <td>
                OT2 Clarification Date <b><span id=""OT2ClarDateDue""></span></b>

                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688419551", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDateReason"">
            <td id=""tdOT2ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDateReason"" onchange=""textcheck('OT2ClarDateReason');"" onkeyup=""textcheck('OT2ClarDateReason');"" />
            </td>
            <td id=""OT2ClarDateReasonText""></td>
            <td id=""tdOT2ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDateSigned"">
            <td id=""tdOT2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 146334, "\"", 146342, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDateSigned"" onchange=""datechecknoerror('OT2ClarDateSigned'); checkClarDateSigned('OT2')"" onkeyup=""datechecknoerror('OT2ClarDateSigned'); checkClarDateSigned('OT2')"" />
            </td>
            <td>
                OT2 Clarification - Date Order MD Signed <b><span id=""OT2ClarDateSignedDue""></span></b>
                                                         ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688422035", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDateSignedReason"">
            <td id=""tdOT2ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDateSignedReason"" onchange=""textcheck('OT2ClarDateSignedReason');"" onkeyup=""textcheck('OT2ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDateSignedYesNo"">
            <td id=""tdOT2ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDateSignedYesNo'); nowarning('OT2ClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688424196", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688425133", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688426108", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trOT2ClarDate1"">
            <td id=""tdOT2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 148237, "\"", 148245, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate1"" onchange=""datechecknoerror('OT2ClarDate1'); checkClarDate1('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate1'); checkClarDate1('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #1 Date <b><span id=""OT2ClarDate1Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688427907", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate1Reason"">
            <td id=""tdOT2ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate1Reason"" onchange=""textcheck('OT2ClarDate1Reason');"" onkeyup=""textcheck('OT2ClarDate1Reason');"" />
            </td>
            <td id=""OT2ClarDate1ReasonText""></td>
            <td id=""tdOT2ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate1Signed"">
            <td id=""tdOT2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 149413, "\"", 149421, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate1Signed"" onchange=""datechecknoerror('OT2ClarDate1Signed'); checkClarDate1Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate1Signed'); checkClarDate1Signed('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #1 - Date Order MD Signed <b><span id=""OT2ClarDate1SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688430418", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate1SignedReason"">
            <td id=""tdOT2ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate1SignedReason"" onchange=""textcheck('OT2ClarDate1SignedReason');"" onkeyup=""textcheck('OT2ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate1SignedYesNo"">
            <td id=""tdOT2ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate1SignedYesNo'); nowarning('OT2ClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688432591", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688433528", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688434503", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate2"">
            <td id=""tdOT2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 151345, "\"", 151353, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate2"" onchange=""datechecknoerror('OT2ClarDate2'); checkClarDate2('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate2'); checkClarDate2('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #2 Date <b><span id=""OT2ClarDate2Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688436302", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate2Reason"">
            <td id=""tdOT2ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate2Reason"" onchange=""textcheck('OT2ClarDate2Reason');"" onkeyup=""textcheck('OT2ClarDate2Reason');"" />
            </td>
            <td id=""OT2ClarDate2ReasonText""></td>
            <td id=""tdOT2ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate2Signed"">
            <td id=""tdOT2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 152521, "\"", 152529, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate2Signed"" onchange=""datechecknoerror('OT2ClarDate2Signed'); checkClarDate2Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate2Signed'); checkClarDate2Signed('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #2 - Date Order MD Signed <b><span id=""OT2ClarDate2SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688438813", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate2SignedReason"">
            <td id=""tdOT2ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate2SignedReason"" onchange=""textcheck('OT2ClarDate2SignedReason');"" onkeyup=""textcheck('OT2ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate2SignedYesNo"">
            <td id=""tdOT2ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate2SignedYesNo'); nowarning('OT2ClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688440986", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688441923", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688442898", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT2ClarDate3"">
            <td id=""tdOT2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 154452, "\"", 154460, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate3"" onchange=""datechecknoerror('OT2ClarDate3'); checkClarDate3('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate3'); checkClarDate3('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #3 Date <b><span id=""OT2ClarDate3Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688444696", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate3Reason"">
            <td id=""tdOT2ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate3Reason"" onchange=""textcheck('OT2ClarDate3Reason');"" onkeyup=""textcheck('OT2ClarDate3Reason');"" />
            </td>
            <td id=""OT2ClarDate3ReasonText""></td>
            <td id=""tdOT2ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2ClarDate3Signed"">
            <td id=""tdOT2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 155628, "\"", 155636, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate3Signed"" onchange=""datechecknoerror('OT2ClarDate3Signed'); checkClarDate3Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate3Signed'); checkClarDate3Signed('OT2')"" />
            </td>
            <td>
                OT2 Reclarification #3 - Date Order MD Signed <b><span id=""OT2ClarDate3SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688447207", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT2ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate3SignedReason"">
            <td id=""tdOT2ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT2ClarDate3SignedReason"" onchange=""textcheck('OT2ClarDate3SignedReason');"" onkeyup=""textcheck('OT2ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT2ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT2ClarDate3SignedYesNo"">
            <td id=""tdOT2ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddOT2ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate3SignedYesNo'); nowarning('OT2ClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688449380", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688450317", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688451292", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT2DischargeDate"">
            <td id=""tdOT2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 157568, "\"", 157576, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT2DischargeDate"" onchange=""datechecknoerror('OT2DischargeDate'); checkclardate('OT2'); checkClarDate1('OT2')"" onkeyup=""datechecknoerror('OT2DischargeDate'); checkclardate('OT2'); checkClarDate1('OT2')"" />
            </td>
            <td>
                OT2 Discharge Date
            </td>
            <td id=""tdOT2DischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdOT3"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another OT"" onclick=""addther('OT3')"" id=""addOT3"" />
            </td>
        </tr>

    </table>




    <table class=""TableClick content therapyvisable"" id=""OT3"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove OT"" onclick=""removether('OT3')"" id=""removeOT3"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trOT3EvalDate"">
            <td id=""tdOT3EvalDate""");
            BeginWriteAttribute("class", " class=\"", 158598, "\"", 158606, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3EvalDate"" onchange=""datechecknoerror('OT3EvalDate'); checkevaldate('OT3') "" onkeyup=""datechecknoerror('OT3EvalDate'); checkevaldate('OT3')"" />
            </td>
            <td>OT3 Evaluation Date</td>
            <td id=""tdOT3EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT3EvalDateSigned"">
            <td id=""tdOT3EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 159065, "\"", 159073, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3EvalDateSigned"" onchange=""datechecknoerror('OT3EvalDateSigned'); checkevalsign('OT3')"" onkeyup=""datechecknoerror('OT3EvalDateSigned'); checkevalsign('OT3')"" />
            </td>
            <td>
                OT3 Evaluation - Date Order MD Signed <b><span id=""OT3EvalDateSignedDue""></span></b>

                                                      ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688454980", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3EvalDateSignedReason"">
            <td id=""tdOT3EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3EvalDateSignedReason"" onchange=""textcheck('OT3EvalDateSignedReason');"" onkeyup=""textcheck('OT3EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no OT3 Evaluation Order MD Signed</td>
            <td id=""tdOT3EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3EvalDateSignedYesNo"">
            <td id=""tdOT3EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT3EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3EvalDateSignedYesNo'); nowarning('OT3EvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688457139", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688458076", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688459051", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT3ClarDate"">
            <td id=""tdOT3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 160947, "\"", 160955, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate"" onchange=""datechecknoerror('OT3ClarDate'); checkclardate('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate'); checkclardate('OT3')"" />
            </td>
            <td>
                OT3 Clarification Date <b><span id=""OT3ClarDateDue""></span></b>

                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688460830", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDateReason"">
            <td id=""tdOT3ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDateReason"" onchange=""textcheck('OT3ClarDateReason');"" onkeyup=""textcheck('OT3ClarDateReason');"" />
            </td>
            <td id=""OT3ClarDateReasonText""></td>
            <td id=""tdOT3ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDateSigned"">
            <td id=""tdOT3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 162103, "\"", 162111, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDateSigned"" onchange=""datechecknoerror('OT3ClarDateSigned'); checkClarDateSigned('OT3')"" onkeyup=""datechecknoerror('OT3ClarDateSigned'); checkClarDateSigned('OT3')"" />
            </td>
            <td>
                OT3 Clarification - Date Order MD Signed <b><span id=""OT3ClarDateSignedDue""></span></b>

                                                         ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688463315", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDateSignedReason"">
            <td id=""tdOT3ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDateSignedReason"" onchange=""textcheck('OT3ClarDateSignedReason');"" onkeyup=""textcheck('OT3ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDateSignedYesNo"">
            <td id=""tdOT3ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDateSignedYesNo'); nowarning('OT3ClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688465476", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688466413", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688467388", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate1"">
            <td id=""tdOT3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 164006, "\"", 164014, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate1"" onchange=""datechecknoerror('OT3ClarDate1'); checkClarDate1('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate1'); checkClarDate1('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #1 Date <b><span id=""OT3ClarDate1Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688469186", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate1Reason"">
            <td id=""tdOT3ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate1Reason"" onchange=""textcheck('OT3ClarDate1Reason');"" onkeyup=""textcheck('OT3ClarDate1Reason');"" />
            </td>
            <td id=""OT3ClarDate1ReasonText""></td>
            <td id=""tdOT3ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate1Signed"">
            <td id=""tdOT3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 165182, "\"", 165190, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate1Signed"" onchange=""datechecknoerror('OT3ClarDate1Signed'); checkClarDate1Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate1Signed'); checkClarDate1Signed('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #1 - Date Order MD Signed <b><span id=""OT3ClarDate1SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688471697", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate1SignedReason"">
            <td id=""tdOT3ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate1SignedReason"" onchange=""textcheck('OT3ClarDate1SignedReason');"" onkeyup=""textcheck('OT3ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate1SignedYesNo"">
            <td id=""tdOT3ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate1SignedYesNo'); nowarning('OT3ClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688473870", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688474807", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688475782", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate2"">
            <td id=""tdOT3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 167114, "\"", 167122, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate2"" onchange=""datechecknoerror('OT3ClarDate2'); checkClarDate2('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate2'); checkClarDate2('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #2 Date <b><span id=""OT3ClarDate2Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688477581", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate2Reason"">
            <td id=""tdOT3ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate2Reason"" onchange=""textcheck('OT3ClarDate2Reason');"" onkeyup=""textcheck('OT3ClarDate2Reason');"" />
            </td>
            <td id=""OT3ClarDate2ReasonText""></td>
            <td id=""tdOT3ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate2Signed"">
            <td id=""tdOT3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 168290, "\"", 168298, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate2Signed"" onchange=""datechecknoerror('OT3ClarDate2Signed'); checkClarDate2Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate2Signed'); checkClarDate2Signed('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #2 - Date Order MD Signed <b><span id=""OT3ClarDate2SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688480092", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate2SignedReason"">
            <td id=""tdOT3ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate2SignedReason"" onchange=""textcheck('OT3ClarDate2SignedReason');"" onkeyup=""textcheck('OT3ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate2SignedYesNo"">
            <td id=""tdOT3ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate2SignedYesNo'); nowarning('OT3ClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688482265", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688483202", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688484177", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trOT3ClarDate3"">
            <td id=""tdOT3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 170221, "\"", 170229, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate3"" onchange=""datechecknoerror('OT3ClarDate3'); checkClarDate3('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate3'); checkClarDate3('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #3 Date <b><span id=""OT3ClarDate3Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688485975", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate3Reason"">
            <td id=""tdOT3ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate3Reason"" onchange=""textcheck('OT3ClarDate3Reason');"" onkeyup=""textcheck('OT3ClarDate3Reason');"" />
            </td>
            <td id=""OT3ClarDate3ReasonText""></td>
            <td id=""tdOT3ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3ClarDate3Signed"">
            <td id=""tdOT3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 171397, "\"", 171405, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate3Signed"" onchange=""datechecknoerror('OT3ClarDate3Signed'); checkClarDate3Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate3Signed'); checkClarDate3Signed('OT3')"" />
            </td>
            <td>
                OT3 Reclarification #3 - Date Order MD Signed <b><span id=""OT3ClarDate3SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688488486", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdOT3ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate3SignedReason"">
            <td id=""tdOT3ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtOT3ClarDate3SignedReason"" onchange=""textcheck('OT3ClarDate3SignedReason');"" onkeyup=""textcheck('OT3ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdOT3ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trOT3ClarDate3SignedYesNo"">
            <td id=""tdOT3ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddOT3ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate3SignedYesNo'); nowarning('OT3ClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688490659", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688491596", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688492571", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdOT3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trOT3DischargeDate"">
            <td id=""tdOT3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 173337, "\"", 173345, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtOT3DischargeDate"" onchange=""datechecknoerror('OT3DischargeDate'); checkclardate('OT3'); checkClarDate1('OT3')"" onkeyup=""datechecknoerror('OT3DischargeDate'); checkclardate('OT3'); checkClarDate1('OT3')"" />
            </td>
            <td>
                OT3 Discharge Date
            </td>
            <td id=""tdOT3DischargeDateConfirm"" class=""confirmed""></td>
        </tr>

    </table>




    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">


        <tr class=""yes"" id=""trSLPEvalDate"">
            <td id=""tdSLPEvalDate""");
            BeginWriteAttribute("class", " class=\"", 173976, "\"", 173984, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPEvalDate"" onchange=""datechecknoerror('SLPEvalDate'); checkevaldate('SLP') "" onkeyup=""datechecknoerror('SLPEvalDate'); checkevaldate('SLP')"" />
            </td>
            <td>SLP Evaluation Date</td>
            <td id=""tdSLPEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLPEvalDateSigned"">
            <td id=""tdSLPEvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 174443, "\"", 174451, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPEvalDateSigned"" onchange=""datechecknoerror('SLPEvalDateSigned'); checkevalsign('SLP')"" onkeyup=""datechecknoerror('SLPEvalDateSigned'); checkevalsign('SLP')"" />
            </td>
            <td>
                SLP Evaluation - Date Order MD Signed <b><span id=""SLPEvalDateSignedDue""></span></b>

                                                      ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688495842", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPEvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPEvalDateSignedReason"">
            <td id=""tdSLPEvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPEvalDateSignedReason"" onchange=""textcheck('SLPEvalDateSignedReason');"" onkeyup=""textcheck('SLPEvalDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP Evaluation Order MD Signed</td>
            <td id=""tdSLPEvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPEvalDateSignedYesNo"">
            <td id=""tdSLPEvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLPEvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLPEvalDateSignedYesNo'); nowarning('SLPEvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688498001", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688498938", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688499913", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLPClarDate"">
            <td id=""tdSLPClarDate""");
            BeginWriteAttribute("class", " class=\"", 176325, "\"", 176333, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate"" onchange=""datechecknoerror('SLPClarDate'); checkclardate('SLP')"" onkeyup=""datechecknoerror('SLPClarDate'); checkclardate('SLP')"" />
            </td>
            <td>
                SLP Clarification Date <b><span id=""SLPClarDateDue""></span></b>

                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688501692", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDateReason"">
            <td id=""tdSLPClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDateReason"" onchange=""textcheck('SLPClarDateReason');"" onkeyup=""textcheck('SLPClarDateReason');"" />
            </td>
            <td id=""SLPClarDateReasonText""></td>
            <td id=""tdSLPClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDateSigned"">
            <td id=""tdSLPClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 177481, "\"", 177489, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDateSigned"" onchange=""datechecknoerror('SLPClarDateSigned'); checkClarDateSigned('SLP')"" onkeyup=""datechecknoerror('SLPClarDateSigned'); checkClarDateSigned('SLP')"" />
            </td>
            <td>
                SLP Clarification - Date Order MD Signed <b><span id=""SLPClarDateSignedDue""></span></b>

                                                         ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688504177", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDateSignedReason"">
            <td id=""tdSLPClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDateSignedReason"" onchange=""textcheck('SLPClarDateSignedReason');"" onkeyup=""textcheck('SLPClarDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDateSignedYesNo"">
            <td id=""tdSLPClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLPClarDateSignedYesNo'); nowarning('SLPClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688506339", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688507276", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688508251", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trSLPClarDate1"">
            <td id=""tdSLPClarDate1""");
            BeginWriteAttribute("class", " class=\"", 179386, "\"", 179394, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate1"" onchange=""datechecknoerror('SLPClarDate1'); checkClarDate1('SLP')"" onkeyup=""datechecknoerror('SLPClarDate1'); checkClarDate1('SLP')"" />
            </td>
            <td>
                SLP Reclarification #1 Date <b><span id=""SLPClarDate1Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688510050", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate1Reason"">
            <td id=""tdSLPClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate1Reason"" onchange=""textcheck('SLPClarDate1Reason');"" onkeyup=""textcheck('SLPClarDate1Reason');"" />
            </td>
            <td id=""SLPClarDate1ReasonText""></td>
            <td id=""tdSLPClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate1Signed"">
            <td id=""tdSLPClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 180562, "\"", 180570, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate1Signed"" onchange=""datechecknoerror('SLPClarDate1Signed'); checkClarDate1Signed('SLP')"" onkeyup=""datechecknoerror('SLPClarDate1Signed'); checkClarDate1Signed('SLP')"" />
            </td>
            <td>
                SLP Reclarification #1 - Date Order MD Signed <b><span id=""SLPClarDate1SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688512561", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate1SignedReason"">
            <td id=""tdSLPClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate1SignedReason"" onchange=""textcheck('SLPClarDate1SignedReason');"" onkeyup=""textcheck('SLPClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate1SignedYesNo"">
            <td id=""tdSLPClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLPClarDate1SignedYesNo'); nowarning('SLPClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688514735", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688515672", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688516647", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate2"">
            <td id=""tdSLPClarDate2""");
            BeginWriteAttribute("class", " class=\"", 182495, "\"", 182503, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate2"" onchange=""datechecknoerror('SLPClarDate2'); checkClarDate2('SLP')"" onkeyup=""datechecknoerror('SLPClarDate2'); checkClarDate2('SLP')"" />
            </td>
            <td>
                SLP Reclarification #2 Date <b><span id=""SLPClarDate2Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688518446", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate2Reason"">
            <td id=""tdSLPClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate2Reason"" onchange=""textcheck('SLPClarDate2Reason');"" onkeyup=""textcheck('SLPClarDate2Reason');"" />
            </td>
            <td id=""SLPClarDate2ReasonText""></td>
            <td id=""tdSLPClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate2Signed"">
            <td id=""tdSLPClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 183671, "\"", 183679, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate2Signed"" onchange=""datechecknoerror('SLPClarDate2Signed'); checkClarDate2Signed('SLP')"" onkeyup=""datechecknoerror('SLPClarDate2Signed'); checkClarDate2Signed('SLP')"" />
            </td>
            <td>
                SLP Reclarification #2 - Date Order MD Signed <b><span id=""SLPClarDate2SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688520957", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate2SignedReason"">
            <td id=""tdSLPClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate2SignedReason"" onchange=""textcheck('SLPClarDate2SignedReason');"" onkeyup=""textcheck('SLPClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate2SignedYesNo"">
            <td id=""tdSLPClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLPClarDate2SignedYesNo'); nowarning('SLPClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688523131", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688524068", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688525043", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLPClarDate3"">
            <td id=""tdSLPClarDate3""");
            BeginWriteAttribute("class", " class=\"", 185603, "\"", 185611, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate3"" onchange=""datechecknoerror('SLPClarDate3'); checkClarDate3('SLP')"" onkeyup=""datechecknoerror('SLPClarDate3'); checkClarDate3('SLP')"" />
            </td>
            <td>
                SLP Reclarification #3 Date <b><span id=""SLPClarDate3Due""></span></b>

                                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688526841", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate3Reason"">
            <td id=""tdSLPClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate3Reason"" onchange=""textcheck('SLPClarDate3Reason');"" onkeyup=""textcheck('SLPClarDate3Reason');"" />
            </td>
            <td id=""SLPClarDate3ReasonText""></td>
            <td id=""tdSLPClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPClarDate3Signed"">
            <td id=""tdSLPClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 186779, "\"", 186787, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPClarDate3Signed"" onchange=""datechecknoerror('SLPClarDate3Signed'); checkClarDate3Signed('SLP')"" onkeyup=""datechecknoerror('SLPClarDate3Signed'); checkClarDate3Signed('SLP')"" />
            </td>
            <td>
                SLP Reclarification #3 - Date Order MD Signed <b><span id=""SLPClarDate3SignedDue""></span></b>

                                                              ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688529352", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLPClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate3SignedReason"">
            <td id=""tdSLPClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLPClarDate3SignedReason"" onchange=""textcheck('SLPClarDate3SignedReason');"" onkeyup=""textcheck('SLPClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no SLP Clarification Order MD Signed</td>
            <td id=""tdSLPClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLPClarDate3SignedYesNo"">
            <td id=""tdSLPClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddSLPClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLPClarDate3SignedYesNo'); nowarning('SLPClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688531526", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688532463", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688533438", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLPClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLPDischargeDate"">
            <td id=""tdSLPDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 188720, "\"", 188728, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLPDischargeDate"" onchange=""datechecknoerror('SLPDischargeDate'); checkclardate('SLP'); checkClarDate1('SLP')"" onkeyup=""datechecknoerror('SLPDischargeDate'); checkclardate('SLP'); checkClarDate1('SLP')"" />
            </td>
            <td>
                SLP Discharge Date
            </td>
            <td id=""tdSLPDischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdSLP2"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another SLP"" onclick=""addther('SLP2')"" id=""addSLP2"" />
            </td>
        </tr>
    </table>


    <table class=""TableClick content therapyvisable"" id=""SLP2"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove SLP"" onclick=""removether('SLP2')"" id=""removeSLP2"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trSLP2EvalDate"">
            <td id=""tdSLP2EvalD");
            WriteLiteral("ate\"");
            BeginWriteAttribute("class", " class=\"", 189757, "\"", 189765, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2EvalDate"" onchange=""datechecknoerror('SLP2EvalDate'); checkevaldate('SLP2') "" onkeyup=""datechecknoerror('SLP2EvalDate'); checkevaldate('SLP2')"" />
            </td>
            <td>SLP2 Evaluation Date</td>
            <td id=""tdSLP2EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP2EvalDateSigned"">
            <td id=""tdSLP2EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 190233, "\"", 190241, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2EvalDateSigned"" onchange=""datechecknoerror('SLP2EvalDateSigned'); checkevalsign('SLP2')"" onkeyup=""datechecknoerror('SLP2EvalDateSigned'); checkevalsign('SLP2')"" />
            </td>
            <td>
                SLP2 Evaluation - Date Order MD Signed <b><span id=""SLP2EvalDateSignedDue""></span></b>

                                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688537181", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2EvalDateSignedReason"">
            <td id=""tdSLP2EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2EvalDateSignedReason"" onchange=""textcheck('SLP2EvalDateSignedReason');"" onkeyup=""textcheck('SLP2EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP2 Evaluation Order MD Signed</td>
            <td id=""tdSLP2EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2EvalDateSignedYesNo"">
            <td id=""tdSLP2EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP2EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP2EvalDateSignedYesNo'); nowarning('SLP2EvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688539353", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688540290", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688541265", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate"">
            <td id=""tdSLP2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 192139, "\"", 192147, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate"" onchange=""datechecknoerror('SLP2ClarDate'); checkclardate('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate'); checkclardate('SLP2')"" />
            </td>
            <td>
                SLP2 Clarification Date <b><span id=""SLP2ClarDateDue""></span></b>

                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688543055", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDateReason"">
            <td id=""tdSLP2ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDateReason"" onchange=""textcheck('SLP2ClarDateReason');"" onkeyup=""textcheck('SLP2ClarDateReason');"" />
            </td>
            <td id=""SLP2ClarDateReasonText""></td>
            <td id=""tdSLP2ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDateSigned"">
            <td id=""tdSLP2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 193313, "\"", 193321, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDateSigned"" onchange=""datechecknoerror('SLP2ClarDateSigned'); checkClarDateSigned('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDateSigned'); checkClarDateSigned('SLP2')"" />
            </td>
            <td>
                SLP2 Clarification - Date Order MD Signed <b><span id=""SLP2ClarDateSignedDue""></span></b>

                                                          ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688545558", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDateSignedReason"">
            <td id=""tdSLP2ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDateSignedReason"" onchange=""textcheck('SLP2ClarDateSignedReason');"" onkeyup=""textcheck('SLP2ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDateSignedYesNo"">
            <td id=""tdSLP2ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP2ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP2ClarDateSignedYesNo'); nowarning('SLP2ClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688547731", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688548668", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688549643", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate1"">
            <td id=""tdSLP2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 195240, "\"", 195248, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate1"" onchange=""datechecknoerror('SLP2ClarDate1'); checkClarDate1('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate1'); checkClarDate1('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #1 Date <b><span id=""SLP2ClarDate1Due""></span></b>

                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688551453", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate1Reason"">
            <td id=""tdSLP2ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate1Reason"" onchange=""textcheck('SLP2ClarDate1Reason');"" onkeyup=""textcheck('SLP2ClarDate1Reason');"" />
            </td>
            <td id=""SLP2ClarDate1ReasonText""></td>
            <td id=""tdSLP2ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate1Signed"">
            <td id=""tdSLP2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 196434, "\"", 196442, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate1Signed"" onchange=""datechecknoerror('SLP2ClarDate1Signed'); checkClarDate1Signed('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate1Signed'); checkClarDate1Signed('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #1 - Date Order MD Signed <b><span id=""SLP2ClarDate1SignedDue""></span></b>

                                                               ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688553982", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate1SignedReason"">
            <td id=""tdSLP2ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate1SignedReason"" onchange=""textcheck('SLP2ClarDate1SignedReason');"" onkeyup=""textcheck('SLP2ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate1SignedYesNo"">
            <td id=""tdSLP2ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddSLP2ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP2ClarDate1SignedYesNo'); nowarning('SLP2ClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688556167", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688557104", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688558079", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate2"">
            <td id=""tdSLP2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 198389, "\"", 198397, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate2"" onchange=""datechecknoerror('SLP2ClarDate2'); checkClarDate2('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate2'); checkClarDate2('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #2 Date <b><span id=""SLP2ClarDate2Due""></span></b>

                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688559889", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate2Reason"">
            <td id=""tdSLP2ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate2Reason"" onchange=""textcheck('SLP2ClarDate2Reason');"" onkeyup=""textcheck('SLP2ClarDate2Reason');"" />
            </td>
            <td id=""SLP2ClarDate2ReasonText""></td>
            <td id=""tdSLP2ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate2Signed"">
            <td id=""tdSLP2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 199583, "\"", 199591, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate2Signed"" onchange=""datechecknoerror('SLP2ClarDate2Signed'); checkClarDate2Signed('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate2Signed'); checkClarDate2Signed('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #2 - Date Order MD Signed <b><span id=""SLP2ClarDate2SignedDue""></span></b>

                                                               ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688562418", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate2SignedReason"">
            <td id=""tdSLP2ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate2SignedReason"" onchange=""textcheck('SLP2ClarDate2SignedReason');"" onkeyup=""textcheck('SLP2ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate2SignedYesNo"">
            <td id=""tdSLP2ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddSLP2ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP2ClarDate2SignedYesNo'); nowarning('SLP2ClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688564603", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688565540", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688566515", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate3"">
            <td id=""tdSLP2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 201537, "\"", 201545, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate3"" onchange=""datechecknoerror('SLP2ClarDate3'); checkClarDate3('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate3'); checkClarDate3('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #3 Date <b><span id=""SLP2ClarDate3Due""></span></b>

                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688568324", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate3Reason"">
            <td id=""tdSLP2ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate3Reason"" onchange=""textcheck('SLP2ClarDate3Reason');"" onkeyup=""textcheck('SLP2ClarDate3Reason');"" />
            </td>
            <td id=""SLP2ClarDate3ReasonText""></td>
            <td id=""tdSLP2ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2ClarDate3Signed"">
            <td id=""tdSLP2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 202731, "\"", 202739, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2ClarDate3Signed"" onchange=""datechecknoerror('SLP2ClarDate3Signed'); checkClarDate3Signed('SLP2')"" onkeyup=""datechecknoerror('SLP2ClarDate3Signed'); checkClarDate3Signed('SLP2')"" />
            </td>
            <td>
                SLP2 Reclarification #3 - Date Order MD Signed <b><span id=""SLP2ClarDate3SignedDue""></span></b>

                                                               ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688570853", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP2ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate3SignedReason"">
            <td id=""tdSLP2ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP2ClarDate3SignedReason"" onchange=""textcheck('SLP2ClarDate3SignedReason');"" onkeyup=""textcheck('SLP2ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP2ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP2ClarDate3SignedYesNo"">
            <td id=""tdSLP2ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddSLP2ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP2ClarDate3SignedYesNo'); nowarning('SLP2ClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688573038", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688573975", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688574950", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP2DischargeDate"">
            <td id=""tdSLP2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 204694, "\"", 204702, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP2DischargeDate"" onchange=""datechecknoerror('SLP2DischargeDate'); checkclardate('SLP2'); checkClarDate1('SLP2')"" onkeyup=""datechecknoerror('SLP2DischargeDate'); checkclardate('SLP2'); checkClarDate1('SLP2')"" />
            </td>
            <td>
                SLP2 Discharge Date
            </td>
            <td id=""tdSLP2DischargeDateConfirm"" class=""confirmed""></td>
        </tr>
        <tr>
            <td colspan=""3"" id=""tdSLP3"">
                <input type=""button"" class=""btn btn-primary"" value=""Add Another SLP"" onclick=""addther('SLP3')"" id=""addSLP3"" />
            </td>
        </tr>

    </table>




    <table class=""TableClick content therapyvisable"" id=""SLP3"">
        <tr>
            <td colspan=""3"">
                <input type=""button"" class=""btn btn-primary hidden"" value=""Remove SLP"" onclick=""removether('SLP3')"" id=""removeSLP3"" />
            </td>
        </tr>

        <tr class=""yes"" id=""trSLP3EvalDate"">
            <td id=");
            WriteLiteral("\"tdSLP3EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 205743, "\"", 205751, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3EvalDate"" onchange=""datechecknoerror('SLP3EvalDate'); checkevaldate('SLP3') "" onkeyup=""datechecknoerror('SLP3EvalDate'); checkevaldate('SLP3')"" />
            </td>
            <td>SLP3 Evaluation Date</td>
            <td id=""tdSLP3EvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP3EvalDateSigned"">
            <td id=""tdSLP3EvalDateSigned""");
            BeginWriteAttribute("class", " class=\"", 206219, "\"", 206227, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3EvalDateSigned"" onchange=""datechecknoerror('SLP3EvalDateSigned'); checkevalsign('SLP3')"" onkeyup=""datechecknoerror('SLP3EvalDateSigned'); checkevalsign('SLP3')"" />
            </td>
            <td>
                SLP3 Evaluation - Date Order MD Signed <b><span id=""SLP3EvalDateSignedDue""></span></b>

                                                       ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688578708", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3EvalDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3EvalDateSignedReason"">
            <td id=""tdSLP3EvalDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3EvalDateSignedReason"" onchange=""textcheck('SLP3EvalDateSignedReason');"" onkeyup=""textcheck('SLP3EvalDateSignedReason');"" />
            </td>
            <td>Remedy for no SLP3 Evaluation Order MD Signed</td>
            <td id=""tdSLP3EvalDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3EvalDateSignedYesNo"">
            <td id=""tdSLP3EvalDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP3EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP3EvalDateSignedYesNo'); nowarning('SLP3EvalDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688580880", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688581817", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688582792", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate"">
            <td id=""tdSLP3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 208125, "\"", 208133, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate"" onchange=""datechecknoerror('SLP3ClarDate'); checkclardate('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate'); checkclardate('SLP3')"" />
            </td>
            <td>
                SLP3 Clarification Date <b><span id=""SLP3ClarDateDue""></span></b>

                                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688584582", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDateReason"">
            <td id=""tdSLP3ClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDateReason"" onchange=""textcheck('SLP3ClarDateReason');"" onkeyup=""textcheck('SLP3ClarDateReason');"" />
            </td>
            <td id=""SLP3ClarDateReasonText""></td>
            <td id=""tdSLP3ClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDateSigned"">
            <td id=""tdSLP3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 209299, "\"", 209307, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDateSigned"" onchange=""datechecknoerror('SLP3ClarDateSigned'); checkClarDateSigned('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDateSigned'); checkClarDateSigned('SLP3')"" />
            </td>
            <td>
                SLP3 Clarification - Date Order MD Signed <b><span id=""SLP3ClarDateSignedDue""></span></b>

                                                          ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688587085", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDateSignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDateSignedReason"">
            <td id=""tdSLP3ClarDateSignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDateSignedReason"" onchange=""textcheck('SLP3ClarDateSignedReason');"" onkeyup=""textcheck('SLP3ClarDateSignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDateSignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDateSignedYesNo"">
            <td id=""tdSLP3ClarDateSignedYesNo"" class=""tderror"">
                <select id=""ddSLP3ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP3ClarDateSignedYesNo'); nowarning('SLP3ClarDateSignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688589258", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688590195", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688591170", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate1"">
            <td id=""tdSLP3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 211225, "\"", 211233, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate1"" onchange=""datechecknoerror('SLP3ClarDate1'); checkClarDate1('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate1'); checkClarDate1('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #1 Date <b><span id=""SLP3ClarDate1Due""></span></b>

                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688592979", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDate1Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate1Reason"">
            <td id=""tdSLP3ClarDate1Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate1Reason"" onchange=""textcheck('SLP3ClarDate1Reason');"" onkeyup=""textcheck('SLP3ClarDate1Reason');"" />
            </td>
            <td id=""SLP3ClarDate1ReasonText""></td>
            <td id=""tdSLP3ClarDate1ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate1Signed"">
            <td id=""tdSLP3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 212419, "\"", 212427, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate1Signed"" onchange=""datechecknoerror('SLP3ClarDate1Signed'); checkClarDate1Signed('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate1Signed'); checkClarDate1Signed('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #1 - Date Order MD Signed <b><span id=""SLP3ClarDate1SignedDue""></span></b>

                                                               ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688595508", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDate1SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate1SignedReason"">
            <td id=""tdSLP3ClarDate1SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate1SignedReason"" onchange=""textcheck('SLP3ClarDate1SignedReason');"" onkeyup=""textcheck('SLP3ClarDate1SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDate1SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate1SignedYesNo"">
            <td id=""tdSLP3ClarDate1SignedYesNo"" class=""tderror"">
                <select id=""ddSLP3ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP3ClarDate1SignedYesNo'); nowarning('SLP3ClarDate1SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688597693", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688598630", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688599605", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate2"">
            <td id=""tdSLP3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 214374, "\"", 214382, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate2"" onchange=""datechecknoerror('SLP3ClarDate2'); checkClarDate2('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate2'); checkClarDate2('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #2 Date <b><span id=""SLP3ClarDate2Due""></span></b>

                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688601415", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDate2Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate2Reason"">
            <td id=""tdSLP3ClarDate2Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate2Reason"" onchange=""textcheck('SLP3ClarDate2Reason');"" onkeyup=""textcheck('SLP3ClarDate2Reason');"" />
            </td>
            <td id=""SLP3ClarDate2ReasonText""></td>
            <td id=""tdSLP3ClarDate2ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate2Signed"">
            <td id=""tdSLP3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 215568, "\"", 215576, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate2Signed"" onchange=""datechecknoerror('SLP3ClarDate2Signed'); checkClarDate2Signed('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate2Signed'); checkClarDate2Signed('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #2 - Date Order MD Signed <b><span id=""SLP3ClarDate2SignedDue""></span></b>

                                                               ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688603944", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDate2SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate2SignedReason"">
            <td id=""tdSLP3ClarDate2SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate2SignedReason"" onchange=""textcheck('SLP3ClarDate2SignedReason');"" onkeyup=""textcheck('SLP3ClarDate2SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDate2SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate2SignedYesNo"">
            <td id=""tdSLP3ClarDate2SignedYesNo"" class=""tderror"">
                <select id=""ddSLP3ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP3ClarDate2SignedYesNo'); nowarning('SLP3ClarDate2SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688606129", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688607066", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688608041", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate3"">
            <td id=""tdSLP3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 217522, "\"", 217530, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate3"" onchange=""datechecknoerror('SLP3ClarDate3'); checkClarDate3('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate3'); checkClarDate3('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #3 Date <b><span id=""SLP3ClarDate3Due""></span></b>

                                             ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688609850", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDate3Confirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate3Reason"">
            <td id=""tdSLP3ClarDate3Reason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate3Reason"" onchange=""textcheck('SLP3ClarDate3Reason');"" onkeyup=""textcheck('SLP3ClarDate3Reason');"" />
            </td>
            <td id=""SLP3ClarDate3ReasonText""></td>
            <td id=""tdSLP3ClarDate3ReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3ClarDate3Signed"">
            <td id=""tdSLP3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 218716, "\"", 218724, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3ClarDate3Signed"" onchange=""datechecknoerror('SLP3ClarDate3Signed'); checkClarDate3Signed('SLP3')"" onkeyup=""datechecknoerror('SLP3ClarDate3Signed'); checkClarDate3Signed('SLP3')"" />
            </td>
            <td>
                SLP3 Reclarification #3 - Date Order MD Signed <b><span id=""SLP3ClarDate3SignedDue""></span></b>

                                                               ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "c85c9bd4708153aab2ad1921bd89a8c59b76a688612379", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </td>
            <td id=""tdSLP3ClarDate3SignedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate3SignedReason"">
            <td id=""tdSLP3ClarDate3SignedReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtSLP3ClarDate3SignedReason"" onchange=""textcheck('SLP3ClarDate3SignedReason');"" onkeyup=""textcheck('SLP3ClarDate3SignedReason');"" />
            </td>
            <td>Remedy for no PT Clarification Order MD Signed</td>
            <td id=""tdSLP3ClarDate3SignedReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes therapyvisable trerror"" id=""trSLP3ClarDate3SignedYesNo"">
            <td id=""tdSLP3ClarDate3SignedYesNo"" class=""tderror"">
                <select id=""ddSLP3ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('SLP3ClarDate3SignedYesNo'); nowarning('SLP3ClarDate3SignedYesNo')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688614564", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688615501", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688616476", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Late Therapy MD Certification Obtained</td>
            <td id=""tdSLP3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes therapyvisable"" id=""trSLP3DischargeDate"">
            <td id=""tdSLP3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 220679, "\"", 220687, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                <input type=""text"" class=""txtbox txtdate"" id=""txtSLP3DischargeDate"" onchange=""datechecknoerror('SLP3DischargeDate'); checkclardate('SLP3'); checkClarDate1('SLP3')"" onkeyup=""datechecknoerror('SLP3DischargeDate'); checkclardate('SLP3'); checkClarDate1('SLP3')"" />
            </td>
            <td>
                SLP3 Discharge Date
            </td>
            <td id=""tdSLP3DischargeDateConfirm"" class=""confirmed""></td>
        </tr>

    </table>




    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">
        <tr class=""yes trerror"" style=""border:none"" id=""trTherapyUnitsVer"">
            <td id=""tdTherapyUnitsVer"" class=""tderror"">
                <input type=""checkbox"" id=""cbTherapyUnitsVer"" onchange=""cbcheck('TherapyUnitsVer')"" />
            </td>
            <td>Therapy Units/Visits verified for each discipline with UB04</td>
            <td id=""tdTherapyUnitsVerConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div");
            WriteLiteral(">\n</div>\n");
            WriteLiteral(@"<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnNursing"">
    <table style=""width:100%"">
        <tr>
            <td>Nursing</td>
            <td style=""text-align:right; padding-right:50px;"" id=""NursingComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""NursingContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""yes  trerror"" style=""border:none"" id=""trNDailySkill"">
            <td id=""tdNDailySkill"" class=""tderror"">
                <select class=""txtbox"" id=""ddNDailySkill"" onchange=""ddcheck('NDailySkill'); nowarning('NDailySkill')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688619767", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688620704", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688621678", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Daily Skilled Documentation present during dates of service</td>
            <td id=""tdNDailySkillConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNIVCharges"">
            <td id=""tdNIVCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNIVCharges"" onchange=""ddcheck('NIVCharges'); nowarning('NIVCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688623118", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688624055", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688625029", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688626004", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>IV Charges on UB04 have MD order</td>
            <td id=""tdNIVChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNSupplies"">
            <td id=""tdNSupplies"" class=""tderror"">
                <select class=""txtbox"" id=""ddNSupplies"" onchange=""ddcheck('NSupplies'); nowarning('NSupplies')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688627411", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688628348", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688629322", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688630297", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Supplies on UB04 have MD order</td>
            <td id=""tdNSuppliesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNPharmacy"">
            <td id=""tdNPharmacy"" class=""tderror"">
                <select class=""txtbox"" id=""ddNPharmacy"" onchange=""ddcheck('NPharmacy'); nowarning('NPharmacy')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688631701", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688632638", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688633612", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688634587", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Pharmacy Charges on UB-04 have MD order</td>
            <td id=""tdNPharmacyConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNO2Charges"">
            <td id=""tdNO2Charges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNO2Charges"" onchange=""ddcheck('NO2Charges'); nowarning('NO2Charges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688636005", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688636942", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688637916", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688638891", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>O2 Charges on UB04 have MD order</td>
            <td id=""tdNO2ChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNLabCharges"">
            <td id=""tdNLabCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNLabCharges"" onchange=""ddcheck('NLabCharges'); nowarning('NLabCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688640308", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688641245", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688642219", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688643194", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Lab Charges on UB04 have MD order</td>
            <td id=""tdNLabChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNRayCharges"">
            <td id=""tdNRayCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNRayCharges"" onchange=""ddcheck('NRayCharges'); nowarning('NRayCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688644613", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688645550", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688646524", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688647499", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>X-Ray charges on UB04 have MD order</td>
            <td id=""tdNRayChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNEquipCharges"">
            <td id=""tdNEquipCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNEquipCharges"" onchange=""ddcheck('NEquipCharges'); nowarning('NEquipCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688648930", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688649867", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688650841", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c85c9bd4708153aab2ad1921bd89a8c59b76a688651816", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                </select>\n            </td>\n            <td>Equipment charges on UB04 have MD order</td>\n            <td id=\"tdNEquipChargesConfirm\" class=\"confirmed\"></td>\n        </tr>\n\n    </table>\n    <div style=\"height:20px\"></div>\n</div>\n");
            WriteLiteral("<script>\n    function showdel() {\n        $(\"#showdel\").dialog({\n            resizable: false,\n            height: \"auto\",\n            width: \"350px\",\n            modal: true\n        });\n    };\n</script>\n");
            WriteLiteral(@"<div style=""visibility:hidden; height:0px; display:none"">
    <div id=""showdel"" title=""Delete Record?"">
        <div>Are you sure you want to delete this record?</div>
        <br />
        <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-primary"" onclick=""delrecord()"">Delete</button>
            <button type=""button"" class=""btn btn-secondary"" onclick=""$('#showdel').dialog('close');"">Close</button>
        </div>
    </div>
</div>
");
            WriteLiteral(@"<script>
    function shownotes() {
        document.getElementById('txtEditNotes').innerHTML = document.getElementById('divNotes').innerHTML
        $(""#shownotes"").dialog({
            resizable: false,
            height: ""auto"",
            width: ""80%"",
            modal: true
        });
    };
</script>
");
            WriteLiteral(@"<div style=""visibility:hidden; height:0px; display:none"">
    <div id=""shownotes"" title=""Edit Notes"">
        <div data-tiny-editor id=""txtEditNotes"">

        </div>
        <script src=""https://unpkg.com/tiny-editor/dist/bundle.js""></script>
        <br />
        <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-primary"" onclick=""ajaxpost()"">Save</button>
            <button type=""button"" class=""btn btn-secondary"" onclick=""$('#shownotes').dialog('close');"">Close</button>
        </div>
    </div>
</div>
");
            WriteLiteral("<script>\n    function ajaxpost() {\n        $.ajax({\n            type: \'POST\',\n            dataType: \'json\',\n            url: \'/TripleCheck/AjaxMethod\',\n            data: {\"id\": \'");
#nullable restore
#line 4631 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                     Write(Html.Raw(ViewData["passid"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', ""notes"": document.getElementById('txtEditNotes').innerHTML },
            success: function (Data) {
                alert(data.id);
                alert(data.name);
            },
            success: function (response) {
                $('#shownotes').dialog('close');
                document.getElementById('divNotes').innerHTML = response
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {

            }
        });
    }

</script>
");
            WriteLiteral("<script>\n    function showteam() {\n\n        $(\"#showteam\").dialog({\n            resizable: false,\n            height: \"auto\",\n            width: \"500px\",\n            modal: true\n        });\n    };\n</script>\n");
            WriteLiteral("<div style=\"visibility:hidden; height:0px; display:none\">\n    <div id=\"showteam\" title=\"Edit Team\">\n        <div style=\"overflow-y:auto; max-height:200px;\" id=\"divTeamEdit\">\n            ");
#nullable restore
#line 4665 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["teameditdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div style=""height:10px""></div>
        <button type=""submit"" class=""btn btn-primary"" onclick=""removeteam()"">Remove Selected</button>
        <hr />
        <table>
            <tr>
                <td>Name</td>
                <td>
                    <input class=""txtbox"" maxlength=""99"" id=""txtTeamName"" />
                    <div id=""validateTeamName"" class=""hidden"">Name Required</div>
                </td>
            </tr>
            <tr>
                <td style=""padding-right:15px; padding-top:10px"">Credentials</td>
                <td style=""padding-top:10px;"">
                    <input class=""txtbox"" maxlength=""99"" id=""txtTeamCred"" />
                    <div id=""validateTeamCred"" class=""hidden"">Credential Required</div>
                </td>
            </tr>
        </table>

        <div style=""height:10px""></div>
        <button type=""submit"" class=""btn btn-primary"" onclick=""saveteam()"">Add Member</button>
        <div style=""height:10px""></div>
        <div class=""moda");
            WriteLiteral("l-footer\">\n            <button type=\"button\" class=\"btn btn-secondary\" onclick=\"getteam()\">Close</button>\n        </div>\n    </div>\n</div>\n");
            WriteLiteral(@"<script>
    var coll = document.getElementsByClassName(""collapsible"");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener(""click"", function () {
            this.classList.toggle(""active"");
            var content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + ""px"";
            }
        });
    }

    function delrecord() {
        document.getElementById('txtRecID').value = document.getElementById('txtID').value
        document.getElementById('delreport').click()
    }

    function getteam() {
        $.get(""/TripleCheck/getteam"", { passid: document.getElementById('txtID').value }, function (data) { document.getElementById('divTeam').innerHTML = data });
        $('#showteam').dialog('close');
    }

    function removeteam() {
        var markedCheckbox = document.getElementsByName('checkremove');
        for (var c");
            WriteLiteral(@"heckbox of markedCheckbox) {
            if (checkbox.checked)
                $.get(""/TripleCheck/removeteam"", { strid: document.getElementById('txtID').value, strTeamID: checkbox.value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
        }
    }

    function saveteam() {
        var errors = '0'

        if (document.getElementById('txtTeamName').value == '') {
            document.getElementById('validateTeamName').className = 'validation'
            errors = '1'
        } else {
            document.getElementById('validateTeamName').className = 'hidden'
        }

        if (document.getElementById('txtTeamCred').value == '') {
            document.getElementById('validateTeamCred').className = 'validation'
            errors = '1'
        } else {
            document.getElementById('validateTeamCred').className = 'hidden'
        }

        if (errors == '0') {
            $.get(""/TripleCheck/saveteam"", { strid: document.getElementById('txtID').value, strName: doc");
            WriteLiteral(@"ument.getElementById('txtTeamName').value, strCred: document.getElementById('txtTeamCred').value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
            document.getElementById('txtTeamCred').value = ''
            document.getElementById('txtTeamName').value = ''
        }
    }

    function savenotes() {
        $.get(""/TripleCheck/savenotes"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtEditNotes').innerHTML }, function (data) { });
        document.getElementById('divNotes').innerHTML = document.getElementById('txtEditNotes').innerHTML
        $('#shownotes').dialog('close')
    }

    function startdate() {
        if (moment(document.getElementById('txtStartDate').value).isValid()) {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtStartDate').value, strdetail: 'startstay' }, function (data) { });
            document.getElementById('Validation");
            WriteLiteral(@"StartDate').className = 'hidden'
        } else {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'null', strdetail: 'startstay' }, function (data) { });
            document.getElementById('ValidationStartDate').className = 'validation'
        }
    }


    function addassessment(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd.value, strdetail: 'additionalassessment' }, function (data) { });

        var y = document.getElementsByClassName(""yes"");
        var i;
        if (dd.value == ""No"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""addaddition"");
            }
        } else {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""addaddition"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document");
            WriteLiteral(@".getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classList.contains('ac");
            WriteLiteral(@"tive')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function paymenttype(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd.value, strdetail: 'paymenttype' }, function (data) { });
        var x = document.getElementsByClassName(""pay"");
        var b;
        for (b = 0; b < x.length; b++) {
            x[b].classList.add(""paytype"");
        }
        if (dd.value == ""HMO A - PDPM"" || dd.value == ""MED A - PDPM"") {
            var y = document.getElementsByClassName(""pdpm"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""HMO A - RUG"") {
            var y = document.getElementsByClassName(""hmoa"");
            var i;
            for");
            WriteLiteral(@" (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""Levels"") {
            var y = document.getElementsByClassName(""levels"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""MCB"") {
            var y = document.getElementsByClassName(""mcb"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document.getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementByI");
            WriteLiteral(@"d('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function checkqualifying() {
  ");
            WriteLiteral(@"      if (moment(document.getElementById('txtBOStayFrom').value).isValid() && moment(document.getElementById('txtBOStayTo').value).isValid()) {
            var dchange = datediff(parseDate(document.getElementById('txtBOStayFrom').value), parseDate(document.getElementById('txtBOStayTo').value))
            if (dchange < 3) {
                document.getElementById('trBOStayReason').classList.remove(""booverride"")
            } else {
                document.getElementById('tdBOStayReason').className = ""tderror""
                document.getElementById('trBOStayReason').classList.add(""trerror"")
                document.getElementById('trBOStayReason').classList.add(""booverride"")
                removechanges('BOStayReason')
            }
        } else {
            document.getElementById('tdBOStayReason').className = ""tderror""
            document.getElementById('trBOStayReason').classList.add(""trerror"")
            document.getElementById('trBOStayReason').classList.add(""booverride"")
            removechanges");
            WriteLiteral(@"('BOStayReason')
        }
        checkcomplete()
        boresize()
    }

    function patientleave(dd, type, track) {
        if (dd.value == 'Yes') {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = ""tderror""
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).disabled = false;
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).value = ''
            document.getElementById('tdBOPatient' + track.toString()).className = ''
            document.getElementById('trBOPatient' + track.toString()).classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient' + track.toString(), 'Yes', 'dropdown')
            }
            removechanges('MDSUnbillDays' + track.toString())
        } else if (dd.value == 'No') {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className ");
            WriteLiteral(@"= """"
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.remove(""trerror"")
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).disabled = true;
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).value = '0'
            document.getElementById('tdBOPatient' + track.toString()).className = ''
            document.getElementById('trBOPatient' + track.toString()).classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient' + track.toString(), 'No', 'dropdown')
                savechanges('MDSUnbillDays' + track.toString(), '0', 'textbox')
            }
        } else {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = ""tderror""
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).disabled = true;
            document.getElementById(""txtMDSUn");
            WriteLiteral(@"billDays"" + track.toString()).value = ''
            document.getElementById('tdBOPatient' + track.toString()).className = 'tderror'
            document.getElementById('trBOPatient' + track.toString()).classList.add(""trerror"")
            removechanges('BOPatient' + track.toString())
            removechanges('MDSUnbillDays' + track.toString())
        }
        checkcomplete()
    }

    function numdaysinter(track) {
        if (document.getElementById(""txtMDSUnbillDays"" + track.toString()).value == """") {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = ""tderror""
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.add(""trerror"")
            removechanges('MDSUnbillDays' + track.toString())
        } else {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = """"
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.remove(""trerror"")
            savechanges('MDSUnbillDays' + tra");
            WriteLiteral(@"ck.toString(), document.getElementById(""txtMDSUnbillDays"" + track.toString()).value, 'textbox')
        }
        checkcomplete()
    }






    function checkevaldate(type) {
        if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
            document.getElementById('tr' + type + 'EvalDateSigned').classList.remove('therapyvisable')
            //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.remove('therapyvisable')

            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))
            evaldate.setDate(evaldate.getDate() + 30)

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'EvalDateSignedDue').innerHTML = '(Due by ' + displaydate + ')'
            document.getElementById(type + 'ClarDateDue').innerHTML = '(Due by ' + docume");
            WriteLiteral(@"nt.getElementById('txt' + type + 'EvalDate').value + ')'

            document.getElementById('tr' + type + 'ClarDate').classList.remove('therapyvisable')
            //document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
            //document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'

            document.getElementById('tr' + type + 'DischargeDate').classList.remove('therapyvisable')
        } else {
            document.getElementById('tr' + type + 'EvalDateSigned').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateSigned').classList.add('trerror')
            document.getElementById('td' + type + 'EvalDateSigned').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalDateSigned').value = ''
            removechanges(type + 'EvalDateSigned')

            //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyv");
            WriteLiteral(@"isable')
            //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
            //document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
            //document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
            //removechanges(type + 'EvalDateSignedReason')

            document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
            removechanges(type + 'EvalDateSignedYesNo')

            document.getElementById('tr' + type + 'ClarDate').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate').value = ''
            removechanges(type + 'ClarDate')

         ");
            WriteLiteral(@"   document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateReason').value = ''
            removechanges(type + 'ClarDateReason')

            document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'DischargeDate').value = ''
            removechanges(type + 'DischargeDate')

            document.getElementById('tr' + type + 'ClarDateSigned').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDateSigned').value = ''
            removechanges(type + 'ClarDateSigned')

            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type ");
            WriteLiteral(@"+ 'ClarDateSignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
            removechanges(type + 'ClarDateSignedReason')


            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
            removechanges(type + 'ClarDateSignedYesNo')

            document.getElementById('tr' + type + 'ClarDate1').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1').value = ''
            removechanges(type + 'ClarDate1')

            document.getElementById('tr' + type + 'ClarDate1Reason').c");
            WriteLiteral(@"lassList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
            removechanges(type + 'ClarDate1Reason')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
            removechanges(type + 'ClarDate");
            WriteLiteral(@"1SignedReason')

            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
            removechanges(type + 'ClarDate1SignedYesNo')

            document.getElementById('tr' + type + 'ClarDate2').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2').value = ''
            removechanges(type + 'ClarDate2')

            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'Cl");
            WriteLiteral(@"arDate2Reason').value = ''
            removechanges(type + 'ClarDate2Reason')

            document.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
            removechanges(type + 'ClarDate2Signed')

            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
            removechanges(type + 'ClarDate2SignedReason')

            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + '");
            WriteLiteral(@"ClarDate2SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
            removechanges(type + 'ClarDate2SignedYesNo')

            document.getElementById('tr' + type + 'ClarDate3').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3').value = ''
            removechanges(type + 'ClarDate3')

            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
            removechanges(type + 'ClarDate3Reason')

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
           ");
            WriteLiteral(@" removechanges(type + 'ClarDate3Signed')

            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
            removechanges(type + 'ClarDate3SignedReason')

            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
            removechanges(type + 'ClarDate3SignedYesNo')
        }
        therapyresize()
        checkcomplete()
    }

    function check");
            WriteLiteral(@"evalsign(type) {
        if (moment(document.getElementById('txt' + type + 'EvalDateSigned').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDateSigned').value))

            if (signdate <= evaldate) {
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
                //document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
                //document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
                //removechanges(type + 'EvalDateSignedReason')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
           ");
            WriteLiteral(@"     document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
                removechanges(type + 'EvalDateSignedYesNo')
            } else {
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
                //document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
                //document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
                //removechanges(type + 'EvalDateSignedReason')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.remove('therapyvisable')
            }
        } else {
            if (moment(document.getElemen");
            WriteLiteral(@"tById('txt' + type + 'EvalDate').value).isValid()) {
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
                removechanges(type + 'EvalDateSignedYesNo')
            }
        }
        therapyresize()
        checkcomplete()
    }

    function checkclardate(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate').value).isValid()) {
            if (document.getElementById('txt' + type + 'ClarDate').value == document.getElementById('txt' + type + 'EvalDate').value) {
                document.getElementById('tr' + type + ");
            WriteLiteral(@"'ClarDateReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateReason').value = ''
                removechanges(type + 'ClarDateReason')
            } else {
                document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for ' + type + ' Clarification Date not on Evaluation Date'
            }

            document.getElementById('tr' + type + 'ClarDateSigned').classList.remove('therapyvisable')


            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            evaldate.setDate(e");
            WriteLiteral(@"valdate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDateSignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate1Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date");
            WriteLiteral(@"(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 28)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')

                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisa");
            WriteLiteral(@"ble')
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                    removechanges(type + 'ClarDateSignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDateSignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                        docu");
            WriteLiteral(@"ment.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                        removechanges(type + 'ClarDateSignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')

                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' ");
            WriteLiteral(@"+ type + 'ClarDateSignedYesNo').value = ''
                removechanges(type + 'ClarDateSignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                    removechanges(type + 'ClarDate1Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate1Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate1Reaso");
            WriteLiteral(@"nText').innerHTML = 'Remedy for no ' + type + ' Reclarification #1 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                removechanges(type + 'ClarDate1Reason')
            }
            document.getElementById('tr' + type + 'ClarDate1').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getEle");
            WriteLiteral(@"mentById('txt' + type + 'ClarDateSigned').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')

                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                    remo");
            WriteLiteral(@"vechanges(type + 'ClarDateSignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
                document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for no ' + type");
            WriteLiteral(@" + ' Clarification Date'

                document.getElementById('tr' + type + 'ClarDateSigned').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDateSigned').value = ''
                removechanges(type + 'ClarDateSigned')
            }

            document.getElementById('tr' + type + 'ClarDate1').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1').value = ''
            removechanges(type + 'ClarDate1')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')");
            WriteLiteral(@"
            document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
            removechanges(type + 'ClarDate1Reason')

            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
            removechanges(type + 'ClarDateSignedReason')

            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
            removechanges(type + 'ClarDateSignedYesNo')
");
            WriteLiteral(@"
            checkClarDate1('PT')
            checkClarDate2('PT')
            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDateSigned(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDateSigned').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
   ");
            WriteLiteral(@"             removechanges(type + 'ClarDateSignedReason')

                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                removechanges(type + 'ClarDateSignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type +");
            WriteLiteral(@" 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')
            }
        } else {
            checkclardate(type)
        }
        therapyresize()
        checkcomplete()
    }




    function checkClarDate1(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'Cla");
            WriteLiteral(@"rDate1Reason').value = ''
                removechanges(type + 'ClarDate1Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

         ");
            WriteLiteral(@"   document.getElementById(type + 'ClarDate1SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate2Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate");
            WriteLiteral(@") {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')

                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                    removechanges(type + 'ClarDate1SignedY");
            WriteLiteral(@"esNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                        removechanges(type + 'ClarDate1SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type");
            WriteLiteral(@" + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')

                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                removechanges(type + 'ClarDate1SignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                    document.");
            WriteLiteral(@"getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                    removechanges(type + 'ClarDate2Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate2Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #2 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
            ");
            WriteLiteral(@"    document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                removechanges(type + 'ClarDate2Reason')
            }
            document.getElementById('tr' + type + 'ClarDate2').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.");
            WriteLiteral(@"getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')

                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                    removechanges(type + 'ClarDate1SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElement");
            WriteLiteral(@"ById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'R");
            WriteLiteral(@"emedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }



                document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
                removechanges(type + 'ClarDate1Signed')
            }

            document.getElementById('tr' + type + 'ClarDate2').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2').value = ''
            removechanges(type + 'ClarDate2')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(typ");
            WriteLiteral(@"e + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
            removechanges(type + 'ClarDate2Reason')

            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
            removechanges(type + 'ClarDate1SignedReason')

            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
            docume");
            WriteLiteral(@"nt.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
            removechanges(type + 'ClarDate1SignedYesNo')

            checkClarDate2('PT')
            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate1Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
     ");
            WriteLiteral(@"           document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')

                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                removechanges(type + 'ClarDate1SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.remove('therapyvisable')


                document.getElementById('tr' + type + 'ClarDate1S");
            WriteLiteral(@"ignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')
            }
        } else {
            checkClarDate1(type)
        }
        therapyresize()
        checkcomplete()
    }



    function checkClarDate2(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate2').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + ty");
            WriteLiteral(@"pe + 'ClarDate2Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                removechanges(type + 'ClarDate2Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate2Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.g");
            WriteLiteral(@"etDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate2SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate3Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate'");
            WriteLiteral(@").value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')

                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + typ");
            WriteLiteral(@"e + 'ClarDate2SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                    removechanges(type + 'ClarDate2SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate2SignedY");
            WriteLiteral(@"esNo').value = ''
                        removechanges(type + 'ClarDate2SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')

                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ");
            WriteLiteral(@"''
                removechanges(type + 'ClarDate2SignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                    removechanges(type + 'ClarDate3Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate3Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + ");
            WriteLiteral(@"type + ' Reclarification #3 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                removechanges(type + 'ClarDate3Reason')
            }
            document.getElementById('tr' + type + 'ClarDate3').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2Sig");
            WriteLiteral(@"ned').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')

                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                    removechanges(type + 'ClarDate2");
            WriteLiteral(@"SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
                evaldate28.setDate(eval");
            WriteLiteral(@"date28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }

                document.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
                removechanges(type + 'ClarDate2Signed')
            }

            document.getElementById('tr' + type + 'ClarDate3').classList.add('therapyvisable')
            document.g");
            WriteLiteral(@"etElementById('txt' + type + 'ClarDate3').value = ''
            removechanges(type + 'ClarDate3')

            document.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
            removechanges(type + 'ClarDate2Signed')

            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
            removechanges(type + 'ClarDate3Reason')

            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate");
            WriteLiteral(@"2SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
            removechanges(type + 'ClarDate2SignedReason')

            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
            removechanges(type + 'ClarDate2SignedYesNo')

            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate2Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            evaldate.setDate(evaldate.getDate(");
            WriteLiteral(@") + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')

                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate2SignedYes");
            WriteLiteral(@"No').value = ''
                removechanges(type + 'ClarDate2SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')
            }
        } else {
            checkClarDate2(type)
        }
        therapyresize()
        checkcomplete()
    }



    function checkClarDate3(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate3').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + typ");
            WriteLiteral(@"e + 'ClarDate3').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                removechanges(type + 'ClarDate3Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById(");
            WriteLiteral(@"'tr' + type + 'ClarDate3Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate3SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
   ");
            WriteLiteral(@"         } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')

                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate");
            WriteLiteral(@"3SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                    removechanges(type + 'ClarDate3SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value ");
            WriteLiteral(@"= ''
                        removechanges(type + 'ClarDate3SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')

                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
          ");
            WriteLiteral(@"      removechanges(type + 'ClarDate3SignedYesNo')
            }


            if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')

                    document.get");
            WriteLiteral(@"ElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                    removechanges(type + 'ClarDate3SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
 ");
            WriteLiteral(@"                   removechanges(type + 'ClarDate3SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Reme");
            WriteLiteral(@"dy for no ' + type + ' Clarification Date'
                }

                document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
                removechanges(type + 'ClarDate3Signed')
            }

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
            removechanges(type + 'ClarDate3Signed')

            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
            removechanges(type + 'ClarDate3SignedReason')

            d");
            WriteLiteral(@"ocument.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
            removechanges(type + 'ClarDate3SignedYesNo')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate3Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate3SignedRe");
            WriteLiteral(@"ason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')

                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                removechanges(type + 'ClarDate3SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.remove('therapyvisable')

                docume");
            WriteLiteral(@"nt.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')
            }
        } else {
            checkClarDate3(type)
        }
        therapyresize()
        checkcomplete()
    }

    function addther(type) {
        document.getElementById(type).classList.remove('therapyvisable')
        document.getElementById('add' + type).classList.add('hidden')
        document.getElementById('td' + type).classList.add('hidden')
        document.getElementById('remove' + type).classList.remove('hidden')
        therapyresize()
        checkcomplete()
    }

    function removether(type) {
        document.getElementById('txt' + t");
            WriteLiteral(@"ype + 'EvalDate').value = ''
        removechanges(type + 'EvalDate')
        checkevaldate(type)
        document.getElementById(type).classList.add('therapyvisable')
        document.getElementById('add' + type).classList.remove('hidden')
        document.getElementById('td' + type).classList.remove('hidden')
        document.getElementById('remove' + type).classList.add('hidden')
        therapyresize()
        checkcomplete()
    }

    function nowarning(type) {
        if (document.getElementById('dd' + type).value == 'No') {
            document.getElementById('td' + type).classList.add('tdwarn')
        } else {
            document.getElementById('td' + type).classList.remove('tdwarn')
        }
    }

    function consentcheck() {
        if (moment(document.getElementById('txtMRConsent').value).isValid()) {
            if (document.getElementById('txtMRConsent').value == document.getElementById('txtStartDate').value) {
                document.getElementById('tdMRConsent').classList.remove('tdwarn'");
            WriteLiteral(@")
            } else {
                document.getElementById('tdMRConsent').classList.add('tdwarn')
            }
        } else {
            document.getElementById('tdMRConsent').classList.remove('tdwarn')
        }
    }

    function checkallmr() {
        checkinitial()
        check1st()
        check2st()
        check3st()
        check4st()
        check5st()
    }

    function checkinitial() {
        if (moment(document.getElementById('txtMRInitialDue').value).isValid()) {
            document.getElementById('trMRInitialReason').classList.add('mroverride')
            document.getElementById('trMRInitialReason').classList.add('trerror')
            document.getElementById('tdMRInitialReason').classList.add('tderror')
            document.getElementById('txtMRInitialReason').value = ''
            removechanges('MRInitialReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMRInitialDueCert').value))
            var donedate = new Date(Date.parse(document.getElement");
            WriteLiteral(@"ById('txtMRInitialDue').value))

            if (donedate > duedate) {
                document.getElementById('trMRInitialYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMRInitialYesNo').classList.add('mroverride')
                document.getElementById('trMRInitialYesNo').classList.add('trerror')
                document.getElementById('tdMRInitialYesNo').classList.add('tderror')
                document.getElementById('ddMRInitialYesNo').value = ''
                removechanges('MRInitialYesNo')
            }

            document.getElementById('trMR1ReCertDue').classList.remove('mroverride')

            var duedate1 = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))
            var todaysdate1 = new Date()

            if (duedate1 < todaysdate1) {
                document.getElementById('trMR1ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertReason').cla");
            WriteLiteral(@"ssList.add('mroverride')
                document.getElementById('trMR1ReCertReason').classList.add('trerror')
                document.getElementById('tdMR1ReCertReason').classList.add('tderror')
                document.getElementById('txtMR1ReCertReason').value = ''
                removechanges('MR1ReCertReason')
            }
        } else {
            var duedate = new Date(Date.parse(document.getElementById('txtMRInitialDueCert').value))
            var todaysdate = new Date()

            if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                if (lastday < todaysdate) {
                    todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMRInitialReason').classList.remove('mroverride')
            } else {
                doc");
            WriteLiteral(@"ument.getElementById('trMRInitialReason').classList.add('mroverride')
                document.getElementById('trMRInitialReason').classList.add('trerror')
                document.getElementById('tdMRInitialReason').classList.add('tderror')
                document.getElementById('txtMRInitialReason').value = ''
                removechanges('MRInitialReason')
            }

            document.getElementById('trMRInitialYesNo').classList.add('mroverride')
            document.getElementById('trMRInitialYesNo').classList.add('trerror')
            document.getElementById('tdMRInitialYesNo').classList.add('tderror')
            document.getElementById('ddMRInitialYesNo').value = ''
            removechanges('MRInitialYesNo')

            document.getElementById('trMR1ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR1ReCertDue').value = ''
            removechanges('MR1ReCertDue')

            document.getElementById('trMR1ReCertReason').classList.add('mroverride')
           ");
            WriteLiteral(@" document.getElementById('trMR1ReCertReason').classList.add('trerror')
            document.getElementById('tdMR1ReCertReason').classList.add('tderror')
            document.getElementById('txtMR1ReCertReason').value = ''
            removechanges('MR1ReCertReason')

            document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR1ReCertYesNo').value = ''
            removechanges('MR1ReCertYesNo')

            document.getElementById('trMR2ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR2ReCertDue').value = ''
            removechanges('MR2ReCertDue')

            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document.getElementById('tdM");
            WriteLiteral(@"R2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
");
            WriteLiteral(@"            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList");
            WriteLiteral(@".add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
           ");
            WriteLiteral(@" document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }

    function check1st() {
        if (moment(document.getElementById('txtMR1ReCertDue').value).isValid()) {
            document.getElementById('trMR1ReCertReason').classList.add('mroverride')
            document.getElementById('trMR1ReCertReason').classList.add('trerror')
            document.getElementById('tdMR1ReCertReason').classList.add('tderror')
            document.getElementById('txtMR1ReCertReason').value = ''
            removechanges('MR1ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR1ReCertYesNo').classList.remove('mroverride')
      ");
            WriteLiteral(@"      } else {
                document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR1ReCertYesNo').value = ''
                removechanges('MR1ReCertYesNo')
            }

            document.getElementById('trMR2ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR2ReCertDueCert').value = displaydate
            document.getElementById('MR2ReCertDueCertText').innerHTML = displaydate

            var duedate2 = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))
            var todaysdate");
            WriteLiteral(@"2 = new Date()

            if (duedate2 < todaysdate2) {
                document.getElementById('trMR2ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR2ReCertReason').classList.add('mroverride')
                document.getElementById('trMR2ReCertReason').classList.add('trerror')
                document.getElementById('tdMR2ReCertReason').classList.add('tderror')
                document.getElementById('txtMR2ReCertReason').value = ''
                removechanges('MR2ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR1ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = ");
            WriteLiteral(@"new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR1ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertReason').classList.add('mroverride')
                document.getElementById('trMR1ReCertReason').classList.add('trerror')
                document.getElementById('tdMR1ReCertReason').classList.add('tderror')
                document.getElementById('txtMR1ReCertReason').value = ''
                removechanges('MR1ReCertReason')
            }

            document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
            document.getElement");
            WriteLiteral(@"ById('tdMR1ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR1ReCertYesNo').value = ''
            removechanges('MR1ReCertYesNo')

            document.getElementById('trMR2ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR2ReCertDue').value = ''
            removechanges('MR2ReCertDue')

            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document.getElementById('tdMR2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value");
            WriteLiteral(@" = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classL");
            WriteLiteral(@"ist.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechang");
            WriteLiteral(@"es('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check2st() {
        if (moment(document.getElementById('txtMR2ReCertDue').value).isValid()) {
            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReas");
            WriteLiteral(@"on').classList.add('trerror')
            document.getElementById('tdMR2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR2ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR2ReCertYesNo').value = ''
                removechanges('MR2ReCertYesNo')
            }

            document.getElementById('trMR3ReCertDue').c");
            WriteLiteral(@"lassList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR3ReCertDueCert').value = displaydate
            document.getElementById('MR3ReCertDueCertText').innerHTML = displaydate

            var duedate3 = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))
            var todaysdate3 = new Date()

            if (duedate3 < todaysdate3) {
                document.getElementById('trMR3ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertReason').classList.add('mroverride')
                document.getElementById('trMR3ReCertReason').classList.add('trerror')
                document.getElementById('tdMR3ReCertReason').classList.add('tderror')
                document.getEl");
            WriteLiteral(@"ementById('txtMR3ReCertReason').value = ''
                removechanges('MR3ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR2ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR2ReCertReason').classList.remove('mroverride')
            } else {
                document.getElem");
            WriteLiteral(@"entById('trMR2ReCertReason').classList.add('mroverride')
                document.getElementById('trMR2ReCertReason').classList.add('trerror')
                document.getElementById('tdMR2ReCertReason').classList.add('tderror')
                document.getElementById('txtMR2ReCertReason').value = ''
                removechanges('MR2ReCertReason')
            }

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.get");
            WriteLiteral(@"ElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReaso");
            WriteLiteral(@"n').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            r");
            WriteLiteral(@"emovechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check3st() {
        if (moment(document.getElementById('txtMR3ReCertDue').value).isValid()) {
            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))
            var donedat");
            WriteLiteral(@"e = new Date(Date.parse(document.getElementById('txtMR3ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR3ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR3ReCertYesNo').value = ''
                removechanges('MR3ReCertYesNo')
            }

            document.getElementById('trMR4ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR4ReCertDueCert').value = displaydate
  ");
            WriteLiteral(@"          document.getElementById('MR4ReCertDueCertText').innerHTML = displaydate

            var duedate4 = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))
            var todaysdate4 = new Date()

            if (duedate4 < todaysdate4) {
                document.getElementById('trMR4ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertReason').classList.add('mroverride')
                document.getElementById('trMR4ReCertReason').classList.add('trerror')
                document.getElementById('tdMR4ReCertReason').classList.add('tderror')
                document.getElementById('txtMR4ReCertReason').value = ''
                removechanges('MR4ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR3ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
            ");
            WriteLiteral(@"    duedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR3ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertReason').classList.add('mroverride')
                document.getElementById('trMR3ReCertReason').classList.add('trerror')
                document.getElementById('tdMR3ReCertReason').classList.add('tderror')
                document.getElementById('txtMR3ReCertReason').value = ''
                removechanges('MR3ReCertReason')
");
            WriteLiteral(@"            }

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            ");
            WriteLiteral(@"document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5");
            WriteLiteral(@"ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check4st() {
        if (moment(document.getElementById('txtMR4ReCertDue').value).isValid()) {
            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR4ReCertYesNo').classList.remove('mroverride')
            } else {
              ");
            WriteLiteral(@"  document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR4ReCertYesNo').value = ''
                removechanges('MR4ReCertYesNo')
            }

            document.getElementById('trMR5ReCertDue').classList.remove('mroverride')
            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('txtMR5ReCertDueCert').value = displaydate
            document.getElementById('MR5ReCertDueCertText').innerHTML = displaydate

            var duedate5 = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))
            var todaysdate5 = new Date()

            i");
            WriteLiteral(@"f (duedate5 < todaysdate5) {
                document.getElementById('trMR5ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR5ReCertReason').classList.add('mroverride')
                document.getElementById('trMR5ReCertReason').classList.add('trerror')
                document.getElementById('tdMR5ReCertReason').classList.add('tderror')
                document.getElementById('txtMR5ReCertReason').value = ''
                removechanges('MR5ReCertReason')
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR4ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.");
            WriteLiteral(@"getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR4ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertReason').classList.add('mroverride')
                document.getElementById('trMR4ReCertReason').classList.add('trerror')
                document.getElementById('tdMR4ReCertReason').classList.add('tderror')
                document.getElementById('txtMR4ReCertReason').value = ''
                removechanges('MR4ReCertReason')
            }

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').clas");
            WriteLiteral(@"sList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechang");
            WriteLiteral(@"es('MR5ReCertYesNo')
        }
        mrresize()
    }

    function check5st() {
        if (moment(document.getElementById('txtMR5ReCertDue').value).isValid()) {
            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR5ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR5ReCertYesNo");
            WriteLiteral(@"').classList.add('trerror')
                document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR5ReCertYesNo').value = ''
                removechanges('MR5ReCertYesNo')
            }

        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR5ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
    ");
            WriteLiteral(@"            document.getElementById('trMR5ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR5ReCertReason').classList.add('mroverride')
                document.getElementById('trMR5ReCertReason').classList.add('trerror')
                document.getElementById('tdMR5ReCertReason').classList.add('tderror')
                document.getElementById('txtMR5ReCertReason').value = ''
                removechanges('MR5ReCertReason')
            }

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')

        }
        mrresize()
    }


    function checktherapyadds() {
        if (document.getElementById('txtPT2EvalDate').value != '') {
            addther");
            WriteLiteral(@"('PT2')
        }
    }

    function setdropdowns(dd, option) {
        var desiredValue = option
        var el = document.getElementById(dd);
        for (var i = 0; i < el.options.length; i++) {
            if (el.options[i].text == desiredValue) {
                el.selectedIndex = i;
            }
        }
    }


    function dcdischargedate() {
        if (moment(document.getElementById('txtDCDischarge').value).isValid()) {
            document.getElementById('tr' + 'DischargeLoc').classList.remove(""dcoverride"")
            document.getElementById('trMDSTDischarge').classList.remove(""MDSTheroverride"")
        } else {
            document.getElementById('tr' + 'MDSTDischarge').classList.add(""MDSTheroverride"")
            document.getElementById('td' + 'MDSTDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'MDSTDischarge').classList.add(""trerror"")
            document.getElementById('cb' + 'MDSTDischarge').checked = false
            removechanges('MDSTDischarge')

      ");
            WriteLiteral(@"      document.getElementById('tr' + 'DischargeLoc').classList.add(""dcoverride"")
            document.getElementById('td' + 'DischargeLoc').classList.add(""tderror"")
            document.getElementById('tr' + 'DischargeLoc').classList.add(""trerror"")
            document.getElementById('dd' + 'DischargeLoc').value = ''
            removechanges('DischargeLoc')

            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getElementById('dd' + 'DrivenDischarge').value = ''
            removechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementBy");
            WriteLiteral(@"Id('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' ");
            WriteLiteral(@"+ 'DCABN').value = ''
            removechanges('DCABN')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }
        dcresize()
        MDSTherresize()
        checkallmr()
        checkcomplete()
    }

    function dcdischargeloc() {
        var dd = document.getElementById('ddDischargeLoc')

        if (dd.value == '01 - Home' || dd.value == '06 - Home w/HH' || dd.value == '07 - AMA' || dd.value == 'Other') {
            document.getElementById('tr' + 'DrivenDischarge').classList.remove(""dcoverride"")

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.");
            WriteLiteral(@"getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            if (dd.value == '07 - AMA') {
                if (document.getElementById('ddDrivenDischarge').value == '') {
                    document.getElementById('ddDrivenDischarge').value = 'Yes'
                    ddcheck('DrivenDischarge')
                    dcyesno()
                }
            }
        }

        if (dd.value == '02 - Hospital' || dd.value == '20 - Expired') {
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getElementById('dd' + 'DrivenDischarge').value = ''
            removechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
       ");
            WriteLiteral(@"     document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
        ");
            WriteLiteral(@"    document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }

        if (dd.value == '04 - LTC') {
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getElementById('dd' + 'DrivenDischarge').value = ''
            rem");
            WriteLiteral(@"ovechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')

            document.getElementById('tr' + 'DCLastDay').classList.remove(""dcoverride"")
            document.getElementById('tr' + 'DCNOMNC').classList.remove(""dcoverride"")
            document.getElementById('tr' + 'DCABN').classList.remove(""dcoverride"")
        }

        if (dd.value == '') {

            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getElementById('dd' + 'DrivenDisc");
            WriteLiteral(@"harge').value = ''
            removechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElemen");
            WriteLiteral(@"tById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }
        dcresize()
        checkallmr()
        checkcomplete()
    }

    function dcdaychange() {
        if (moment(document.getElementById('txtDCNOMNC').value).isValid() && moment(document.getElementById('txtDCLastDay').value).isVa");
            WriteLiteral(@"lid()) {
            var donedate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
            donedate.setDate(donedate.getDate() + 2)

            var lastdate = new Date(Date.parse(document.getElementById('txtDCNOMNC').value))

            if (lastdate > donedate) {
                document.getElementById('tr' + 'DOOR').classList.remove(""dcoverride"")
                document.getElementById('tdDCNOMNC').classList.add(""tdwarn"")
            } else {
                document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
                document.getElementById('td' + 'DOOR').classList.add(""tderror"")
                document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
                document.getElementById('txt' + 'DOOR').value = ''
                removechanges('DOOR')
                document.getElementById('tdDCNOMNC').classList.remove(""tdwarn"")
            }

        } else {
            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
          ");
            WriteLiteral(@"  document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')
            document.getElementById('tdDCNOMNC').classList.remove(""tdwarn"")
        }


        if (moment(document.getElementById('txtDCABN').value).isValid() && moment(document.getElementById('txtDCLastDay').value).isValid()) {
            var donedate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
            donedate.setDate(donedate.getDate() + 2)

            var lastdate = new Date(Date.parse(document.getElementById('txtDCABN').value))

            if (lastdate > donedate) {
                document.getElementById('tdDCABN').classList.add(""tdwarn"")
                document.getElementById('tr' + 'ABNOR').classList.remove(""dcoverride"")
            } else {
                document.getElementById('tr' + 'ABNOR').classList.add(""dcoverride"")
        ");
            WriteLiteral(@"        document.getElementById('td' + 'ABNOR').classList.add(""tderror"")
                document.getElementById('tr' + 'ABNOR').classList.add(""trerror"")
                document.getElementById('txt' + 'ABNOR').value = ''
                removechanges('ABNOR')
                document.getElementById('tdDCABN').classList.remove(""tdwarn"")
            }

        } else {
            document.getElementById('tdDCABN').classList.remove(""tdwarn"")
        }

        dcresize()
        checkcomplete()
    }

    function dcyesno() {
        if (document.getElementById('ddDrivenDischarge').value == 'Yes') {
            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.");
            WriteLiteral(@"add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCNotePresent').classList.remove(""dcoverride"")
        }

        if (document.getElementById('ddDrivenDischarge').value == 'No') {
            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classL");
            WriteLiteral(@"ist.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')

            document.getElementById('tr' + 'DCLastDay').classList.remove(""dcoverride"")
            document.getElementById('tr' + 'DCNOMNC').classList.remove(""dcoverride"")
        }

        if (document.getElementById('ddDrivenDischarge').value == '') {
            if (document.getElementById('ddDischargeLoc').value != '04 - LTC') {
                document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
                document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
                document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
                document.getElementById('txt' + 'DCLastDay').value = ''
                removechanges('DCLastDay')

                document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
                document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
      ");
            WriteLiteral(@"          document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
                document.getElementById('txt' + 'DCNOMNC').value = ''
                removechanges('DCNOMNC')

                document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
                document.getElementById('td' + 'DOOR').classList.add(""tderror"")
                document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
                document.getElementById('txt' + 'DOOR').value = ''
                removechanges('DOOR')
            }
            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }
        dcresize()
        checkcomplete()
    }

    function mrresize() {
        if");
            WriteLiteral(@" (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('MedicalRecordsContent').style.maxHeight = document.getElementById('MedicalRecordsContent').scrollHeight + ""px"";
        }
    }

    function therapyresize() {
        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('TherapyContent').style.maxHeight = document.getElementById('TherapyContent').scrollHeight + ""px"";
        }
    }

    function boresize() {
        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('frmBO').style.maxHeight = document.getElementById('frmBO').scrollHeight + ""px"";
        }
    }

    function dcresize() {

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }
    }

    function MD");
            WriteLiteral(@"STherresize() {
        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('MDSTherapyContent').style.maxHeight = document.getElementById('MDSTherapyContent').scrollHeight + ""px"";
        }
    }

    function MDSresize() {
        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('MDSContent').style.maxHeight = document.getElementById('MDSContent').scrollHeight + ""px"";
        }
    }


    function ddcheck(dd) {
        if (document.getElementById('dd' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('dd' + dd).value, 'dropdown')
        }
        c");
            WriteLiteral(@"heckcomplete()

    }

    function textcheck(dd) {
        if (document.getElementById('txt' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()

    }

    function textchecknoerror(dd) {
        if (document.getElementById('txt' + dd).value == '') {
            removechanges(dd)
        } else {
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()
    }

    function cbcheck(dd) {
        if (document.getElementById('cb' + dd).checked == false) {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElem");
            WriteLiteral(@"entById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, 'Checked', 'checkbox')
        }
        checkcomplete()

    }

    function datecheck(txt) {

        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            document.getElementById('td' + txt).className = ''
            document.getElementById('tr' + txt).classList.remove(""trerror"")
            savechanges(txt, document.getElementById('txt' + txt).value, 'textbox')
        } else {
            document.getElementById('td' + txt).className = 'tderror'
            document.getElementById('tr' + txt).classList.add(""trerror"")
            removechanges(txt)
        }

        checkcomplete()

    }

    function datechecknoerror(txt) {

        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            savechanges(t");
            WriteLiteral(@"xt, document.getElementById('txt' + txt).value, 'textbox')
        } else {
            removechanges(txt)
        }

        checkcomplete()

    }

    function mdsadddays(type, track) {
        var numdays = document.getElementById('txtMDSUnbillDays' + track.toString()).value
        var startd = document.getElementById('txtMDSARDStart' + track.toString()).value
        var endd = document.getElementById('txtMDSARDEnd' + track.toString()).value




        if (numdays != '' && moment(startd).isValid()) {
            var todayd = new Date(parseDate(startd))
            var m = todayd.getMonth() + 1
            var y = todayd.getFullYear()
            todayd = new Date(y, m, 0)

            if (moment(endd).isValid()) {
                var endd = new Date(Date.parse(endd))
            } else {
                var endd = todayd
            }

            var dchange = datediff(parseDate(startd), endd)
            var ddiff = dchange - numdays + 1
            if (ddiff < 0) {
                removechanges('MDS");
            WriteLiteral(@"NumDays' + track.toString())
                document.getElementById('tdMDSNumDays' + track.toString()).className = 'tderror'
                document.getElementById('trMDSNumDays' + track.toString()).classList.add(""trerror"")
                document.getElementById('txtMDSNumDays' + track.toString()).value = ddiff
            } else {
                document.getElementById('tdMDSNumDays' + track.toString()).className = ''
                document.getElementById('trMDSNumDays' + track.toString()).classList.remove(""trerror"")
                document.getElementById('txtMDSNumDays' + track.toString()).value = ddiff
                if (type == 'save') {
                    savechanges('MDSNumDays' + track.toString(), ddiff, 'textbox')
                }

            }
        } else {
            removechanges('MDSNumDays' + track.toString())
            document.getElementById('tdMDSNumDays' + track.toString()).className = 'tderror'
            document.getElementById('trMDSNumDays' + track.toString()).classList.");
            WriteLiteral(@"add(""trerror"")
            document.getElementById('txtMDSNumDays' + track.toString()).value = ''
        }
        checkcomplete()
    }

    function addtrack(tracknum) {
        document.getElementById('track' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trBOPatient' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSPayment' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSARD' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSAssessmentType' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSAssessmentTypePDPM' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSHIPPS' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSUnbillDays' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementB");
            WriteLiteral(@"yId('trMDSARDStart' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSARDEnd' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSNumDays' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSTransmitted' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSPTOT' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSSLP' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSNTA' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSNursing' + tracknum.toString()).classList.remove('MDSoverride')


        document.getElementById('removetrack' + tracknum.toString()).classList.remove('hidden')

        document.getElementById('addtrack' + tracknum.toString()).classList.add('hidden')

        if (tracknum == 1) {
            document.get");
            WriteLiteral(@"ElementById('addtrack2').classList.remove('hidden')
            document.getElementById('trackhead2').classList.remove('hidden')
            document.getElementById('trackspace2').classList.remove('hidden')
        } else if (tracknum == 2) {
            document.getElementById('removetrack1').classList.add('hidden')
            document.getElementById('trackhead3').classList.remove('hidden')
            document.getElementById('trackspace3').classList.remove('hidden')
            document.getElementById('addtrack3').classList.remove('hidden')
        } else if (tracknum == 3) {
            document.getElementById('removetrack2').classList.add('hidden')
            document.getElementById('trackhead4').classList.remove('hidden')
            document.getElementById('trackspace4').classList.remove('hidden')
            document.getElementById('addtrack4').classList.remove('hidden')
        } else if (tracknum == 4) {
            document.getElementById('removetrack3').classList.add('hidden')
            documen");
            WriteLiteral(@"t.getElementById('trackhead5').classList.remove('hidden')
        }

        checkcomplete()
        MDSresize()
    }


    function checkopenmds() {
        var track = 1
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + '");
            WriteLiteral(@"Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }

        ");
            WriteLiteral(@"
        if (filled == 1) {
            addtrack(1)
        }


        var track = 2
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('t");
            WriteLiteral(@"d' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
            addtrack(2)
        }
");
            WriteLiteral(@"

        var track = 3
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== ");
            WriteLiteral(@"'') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
            addtrack(2)
            addtrack(3)
        }

        var track = 4
        var fil");
            WriteLiteral(@"led = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.g");
            WriteLiteral(@"etElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
            addtrack(2)
            addtrack(3)
            addtrack(4)
        }
    }

    function removetrack(track) {
        document");
            WriteLiteral(@".getElementById('track' + track.toString()).classList.add('MDSoverride')

        document.getElementById('trBOPatient' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'BOPatient' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'BOPatient' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd' + 'BOPatient' + track.toString()).value = ''
        removechanges('BOPatient' + track.toString())

        document.getElementById('trMDSPayment' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSPayment' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSPayment' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd' + 'MDSPayment' + track.toString()).value = ''
        removechanges('MDSPayment' + track.toString())

        document.getElementById('trMDSARD' + track.toString()).classList.add('MDSoverride')
        doc");
            WriteLiteral(@"ument.getElementById('td' + 'MDSARD' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSARD' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSARD' + track.toString()).value = ''
        removechanges('MDSARD' + track.toString())

        document.getElementById('trMDSAssessmentType' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSAssessmentType' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSAssessmentType' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd' + 'MDSAssessmentType' + track.toString()).value = ''
        removechanges('MDSAssessmentType' + track.toString())

        document.getElementById('trMDSAssessmentTypePDPM' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSAsse");
            WriteLiteral(@"ssmentTypePDPM' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd' + 'MDSAssessmentTypePDPM' + track.toString()).value = ''
        removechanges('MDSAssessmentTypePDPM' + track.toString())

        document.getElementById('trMDSHIPPS' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSHIPPS' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSHIPPS' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSHIPPS' + track.toString()).value = ''
        removechanges('MDSHIPPS' + track.toString())

        document.getElementById('trMDSUnbillDays' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSUnbillDays' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSUnbillDays' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSUnbillDays' + track.toString()).value = ''
  ");
            WriteLiteral(@"      removechanges('MDSUnbillDays' + track.toString())

        document.getElementById('trMDSARDStart' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSARDStart' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSARDStart' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSARDStart' + track.toString()).value = ''
        removechanges('MDSARDStart' + track.toString())

        document.getElementById('trMDSARDEnd' + track.toString()).classList.add('MDSoverride')
        document.getElementById('txt' + 'MDSARDEnd' + track.toString()).value = ''
        removechanges('MDSARDEnd' + track.toString())

        document.getElementById('trMDSNumDays' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSNumDays' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSNumDays' + track.toString()).classList.add(""trerror"")
        documen");
            WriteLiteral(@"t.getElementById('txt' + 'MDSNumDays' + track.toString()).value = ''
        removechanges('MDSNumDays' + track.toString())

        document.getElementById('trMDSTransmitted' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSTransmitted' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSTransmitted' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSTransmitted' + track.toString()).checked = false
        removechanges('MDSTransmitted' + track.toString())

        document.getElementById('trMDSPTOT' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSPTOT' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSPTOT' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSPTOT' + track.toString()).checked = false
        removechanges('MDSPTOT' + track.toString())

        document.getElementById(");
            WriteLiteral(@"'trMDSSLP' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSSLP' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSSLP' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSSLP' + track.toString()).checked = false
        removechanges('MDSSLP' + track.toString())

        document.getElementById('trMDSNTA' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSNTA' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSNTA' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSNTA' + track.toString()).checked = false
        removechanges('MDSNTA' + track.toString())

        document.getElementById('trMDSNursing' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSNursing' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSN");
            WriteLiteral(@"ursing' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSNursing' + track.toString()).checked = false
        removechanges('MDSNursing' + track.toString())

        document.getElementById('removetrack' + track.toString()).classList.add('hidden')
        document.getElementById('addtrack' + track.toString()).classList.remove('hidden')

        if (track == 1) {
            document.getElementById('addtrack1').classList.remove('hidden')
            document.getElementById('addtrack2').classList.add('hidden')
            document.getElementById('trackhead2').classList.add('hidden')
            document.getElementById('trackspace2').classList.add('hidden')
        } else if (track == 2) {
            document.getElementById('removetrack1').classList.remove('hidden')
            document.getElementById('trackhead3').classList.add('hidden')
            document.getElementById('trackspace3').classList.add('hidden')
            document.getElementById('addtrack3').classList.ad");
            WriteLiteral(@"d('hidden')
        } else if (track == 3) {
            document.getElementById('removetrack2').classList.remove('hidden')
            document.getElementById('trackhead4').classList.add('hidden')
            document.getElementById('trackspace4').classList.add('hidden')
            document.getElementById('addtrack4').classList.add('hidden')
        } else if (track == 4) {
            document.getElementById('removetrack3').classList.remove('hidden')
            document.getElementById('trackhead5').classList.add('hidden')
        }

        checkcomplete()
        MDSresize()
    }

    function savechanges(txt, pv, ptype) {
        var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
        var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUserName').value

        document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        $.get(""/TripleCheck/saverecords"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtyp");
            WriteLiteral(@"e: ptype, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });
    }

    function savechangescert(txt, pv, ptype, position) {
        if (pv != '') {
            var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
            var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUserName').value

            document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        }


        $.get(""/TripleCheck/saverecordscert"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strposition: position, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });

    }

    function removechanges(txt) {

        $.get(""/TripleCheck/removerecords"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });
        document.getElementById('td' + txt + 'Confirm').innerHTML = ");
            WriteLiteral(@""""";
    }

    function removechangescert(txt) {
        $.get(""/TripleCheck/removerecordscert"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });


    }

    function checkcomplete() {
        checkBO()
        checkDC()
        checkMDS()
        checkMDSTherapy()
        checkMedicalRecords()
        checkTherapy()
        checkNursing()
    }

    function checkBO() {
        var y = document.getElementById(""frmBO"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'booverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('BOComplete').innerHTML = 'Not Completed'
            document.getElementById('BOComplete').className = 'notco");
            WriteLiteral(@"mpleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'BusinessOffice' }, function (data) { });
        } else {
            document.getElementById('BOComplete').innerHTML = 'Completed'
            document.getElementById('BOComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'BusinessOffice' }, function (data) { });
        }
    }

    function checkDC() {
        var y = document.getElementById(""DCContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'dcoverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
          ");
            WriteLiteral(@"  document.getElementById('DCComplete').innerHTML = 'Not Completed'
            document.getElementById('DCComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'false', strdetail: 'DCInformation' }, function (data) { });
        } else {
            document.getElementById('DCComplete').innerHTML = 'Completed'
            document.getElementById('DCComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'DCInformation' }, function (data) { });
        }
    }

    function checkMDS() {
        var y = document.getElementById(""MDSContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'MDSove");
            WriteLiteral(@"rride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MDSComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDS' }, function (data) { });
        } else {
            document.getElementById('MDSComplete').innerHTML = 'Completed'
            document.getElementById('MDSComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDS' }, function (data) { });
        }
    }

    function checkMDSTherapy() {
        var y = document.getElementById(""MDSTherapyContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'p");
            WriteLiteral(@"aytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'MDSTheroverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSTherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDSTherapy' }, function (data) { });
        } else {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Completed'
            document.getElementById('MDSTherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDSTherapy' }, function (data) { });
        }
    }

    function checkMedicalRecords() {
        var y = document.getE");
            WriteLiteral(@"lementById(""MedicalRecordsContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'mroverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Not Completed'
            document.getElementById('MedicalRecordsComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MedicalRecords' }, function (data) { });
        } else {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Completed'
            document.getElementById('MedicalRecordsComplete').className = 'completed'
            $.get(""/TripleCheck/savedeta");
            WriteLiteral(@"ils"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MedicalRecords' }, function (data) { });
        }
    }

    function checkTherapy() {
        var y = document.getElementById(""TherapyContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'therapyvisable')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('TherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('TherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Therapy' }, function (data) { });
        } else {
            document.getElementById");
            WriteLiteral(@"('TherapyComplete').innerHTML = 'Completed'
            document.getElementById('TherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Therapy' }, function (data) { });
        }
    }

    function checkNursing() {
        var y = document.getElementById(""NursingContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('NursingComplete').innerHTML = 'Not Completed'
            document.getElementById('NursingComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').val");
            WriteLiteral(@"ue, stritem: 'False', strdetail: 'Nursing' }, function (data) { });
        } else {
            document.getElementById('NursingComplete').innerHTML = 'Completed'
            document.getElementById('NursingComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Nursing' }, function (data) { });
        }
    }

    function parseDate(str) {
        var mdy = str.split('/');
        return new Date(mdy[2], mdy[0] - 1, mdy[1]);
    }

    function datediff(first, second) {
        return Math.round((second - first) / (1000 * 60 * 60 * 24));
    }
</script>
");
#nullable restore
#line 7768 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
}}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
