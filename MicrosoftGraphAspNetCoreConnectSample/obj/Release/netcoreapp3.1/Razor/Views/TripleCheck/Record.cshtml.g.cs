#pragma checksum "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TripleCheck_Record), @"mvc.1.0.view", @"/Views/TripleCheck/Record.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\_ViewImports.cshtml"
using MicrosoftGraphAspNetCoreConnectSample;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6cf8c55772bfc82e653d1cb8536bf87024b0fb8c", @"/Views/TripleCheck/Record.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3ad82abc64eaf4b8b182bed96ff763a59d7fe17", @"/Views/_ViewImports.cshtml")]
    public class Views_TripleCheck_Record : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery-1.12.4.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.inputmask.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap-maxlength.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/bootstrap-datepicker3.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap-datepicker.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "TripleCheck", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DeleteReport", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "PostGoToRecord", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("hidden"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "PaymentChange", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/questionmark.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("height:15px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Alert: If the payer is changed, it will clear all fields and reset the page."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Verify Occurrence 11 is onset of 1st condition requiring therapy"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Verify Occurrence codes are present and have correct SOC dates 35(PT) 44(OT) 45(ST)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Three midnight stay required."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("2 day notice required."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Must be five characters."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 2 consecutive LOA days. May have more than 1 leave of absense during skilled stay."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 2 consecutive LOA days(May have more than 1 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_28 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 2 consecutive LOA days(May have more than 2 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_29 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 3 consecutive LOA days(May have more than 3 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_30 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Not to exceed 4 consecutive LOA days(May have more than 4 leave of absense during skilled stay)"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_31 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Should be obtained the same day as admission"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_32 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Therapy documentation of diagnosis must match UB04."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_33 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Date MD signs must be within 30 days of the date the order was obtained"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_34 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Must be the same date the evaluation is completed."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_35 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("title", new global::Microsoft.AspNetCore.Html.HtmlString("Must be within 28 days of the prior clarification order."), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
 if (!User.Identity.IsAuthenticated)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("<br />\n<p>Choose <b>Sign in</b> at the top of the page.</p>\n");
#nullable restore
#line 5 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("\n\n");
#nullable restore
#line 8 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
 if (User.Identity.IsAuthenticated)
{
    if (ViewData["checkauth"].ToString() == "0")
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("<p>You are not authorized to view this page.</p>\n");
#nullable restore
#line 13 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
    }

    if (ViewData["checkauth"].ToString() == "1")
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("<div autocomplete=\"off\">\n    ");
#nullable restore
#line 18 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
Write(Html.Raw(ViewData["sidebar"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c18406", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c19448", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c20650", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c21692", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c22892", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c23934", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c24976", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c26018", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.3.1/css/all.css\" integrity=\"sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU\" crossorigin=\"anonymous\">\n\n\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c27272", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c28391", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

    <script>
        $(function () {
            $(document).tooltip();
        });
    </script>

    <script type=""text/javascript"">
    $(window).resize(function () {
        $(""#shownotes"").dialog(""option"", ""position"", { my: ""center"", at: ""center"", of: window });
    });

    jQuery(document).ready(function ($) {
        var passdata = '");
#nullable restore
#line 46 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                   Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\'\n\n        if (passdata != \'\') {\n            var rowdata = \'");
#nullable restore
#line 49 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'.split('*^^*')

            var arrayLength = rowdata.length;
            for (var i = 0; i < arrayLength; i++) {
                var indvdata = rowdata[i].split('$||$')

                try {
                    if (indvdata[2] == 'checkbox') {
                        document.getElementById('cb' + indvdata[0]).checked = true
                    }

                    if (indvdata[2] == 'textbox') {
                        document.getElementById('txt' + indvdata[0]).value = indvdata[1]
                    }

                    if (indvdata[2] == 'dropdown') {
                        var desiredValue = indvdata[1]
                        var el = document.getElementById(""dd"" + indvdata[0]);
                        try {
                            for (var e = 0; e < el.options.length; e++) {
                                if (el.options[e].text == desiredValue) {
                                    el.selectedIndex = e;
                                }
                            }
                     ");
            WriteLiteral(@"   } catch { }
                    }

                    var datetime = ""<b>Confirmed:</b> "" + indvdata[3] + ""<br/>""
                    var user = ""<b>Confirmed By:</b> "" + indvdata[4]

                    document.getElementById('td' + indvdata[0] + 'Confirm').innerHTML = datetime + user;

                    document.getElementById('tr' + indvdata[0]).classList.remove('trerror')
                    document.getElementById('td' + indvdata[0]).classList.remove('tderror')

                    if (document.getElementById('tr' + indvdata[0]).classList.contains('trwarn')) {
                        nowarning(indvdata[0])
                    }
                } catch { }




            }
        }


        startdate()
        checkqualifying()
        addassessment(document.getElementById('ddAddAssessment'))
        paymenttype(document.getElementById('ddPaymentType'))

        dcdischargedate()
        dcdischargeloc()
        dcyesno()
        dcdaychange()

        MCBDischargeChange()



        patientleav");
            WriteLiteral(@"e(document.getElementById('ddBOPatient'), 'No', '')
        patientleave(document.getElementById('ddBOPatient1'), 'No', 1)
        patientleave(document.getElementById('ddBOPatient1'), 'No', 2)
        patientleave(document.getElementById('ddBOPatient1'), 'No', 3)
        patientleave(document.getElementById('ddBOPatient1'), 'No', 4)

        mdsadddays('no', '')
        mdsadddays('no', 1)
        mdsadddays('no', 2)
        mdsadddays('no', 3)
        mdsadddays('no', 4)

        checkopenmds()

        initialrequired()

        consentcheck()
        checkallmr()
        //checkinitial()
        //check1st()
        //check2st()
        //check3st()
        //check4st()
        //check5st()

        checkevaldate('PT')
        evalonly('PT')

        checkduedateload('PT', 'EvalDateSigned')

        checkduedateload('PT', 'ClarDate')
        checkduedateload('PT', 'ClarDate1')
        checkduedateload('PT', 'ClarDate2')
        checkduedateload('PT', 'ClarDate3')

        checkduedateload('PT', 'ClarDateS");
            WriteLiteral(@"igned')
        checkduedateload('PT', 'ClarDate1Signed')
        checkduedateload('PT', 'ClarDate2Signed')
        checkduedateload('PT', 'ClarDate3Signed')

        checkevaldate('PT2')
        evalonly('PT2')

        checkduedateload('PT2', 'EvalDateSigned')

        checkduedateload('PT2', 'ClarDate')
        checkduedateload('PT2', 'ClarDate1')
        checkduedateload('PT2', 'ClarDate2')
        checkduedateload('PT2', 'ClarDate3')

        checkduedateload('PT2', 'ClarDateSigned')
        checkduedateload('PT2', 'ClarDate1Signed')
        checkduedateload('PT2', 'ClarDate2Signed')
        checkduedateload('PT2', 'ClarDate3Signed')

        checkevaldate('PT3')
        evalonly('PT3')

        checkduedateload('PT3', 'EvalDateSigned')

        checkduedateload('PT3', 'ClarDate')
        checkduedateload('PT3', 'ClarDate1')
        checkduedateload('PT3', 'ClarDate2')
        checkduedateload('PT3', 'ClarDate3')

        checkduedateload('PT3', 'ClarDateSigned')
        checkduedateload('PT3', 'ClarDate");
            WriteLiteral(@"1Signed')
        checkduedateload('PT3', 'ClarDate2Signed')
        checkduedateload('PT3', 'ClarDate3Signed')


        checkevaldate('OT')
        evalonly('OT')

        checkduedateload('OT', 'EvalDateSigned')

        checkduedateload('OT', 'ClarDate')
        checkduedateload('OT', 'ClarDate1')
        checkduedateload('OT', 'ClarDate2')
        checkduedateload('OT', 'ClarDate3')

        checkduedateload('OT', 'ClarDateSigned')
        checkduedateload('OT', 'ClarDate1Signed')
        checkduedateload('OT', 'ClarDate2Signed')
        checkduedateload('OT', 'ClarDate3Signed')

        checkevaldate('OT2')
        evalonly('OT2')

        checkduedateload('OT2', 'EvalDateSigned')

        checkduedateload('OT2', 'ClarDate')
        checkduedateload('OT2', 'ClarDate1')
        checkduedateload('OT2', 'ClarDate2')
        checkduedateload('OT2', 'ClarDate3')

        checkduedateload('OT2', 'ClarDateSigned')
        checkduedateload('OT2', 'ClarDate1Signed')
        checkduedateload('OT2', 'ClarDate2Sign");
            WriteLiteral(@"ed')
        checkduedateload('OT2', 'ClarDate3Signed')

        checkevaldate('OT3')
        evalonly('OT3')

        checkduedateload('OT3', 'EvalDateSigned')

        checkduedateload('OT3', 'ClarDate')
        checkduedateload('OT3', 'ClarDate1')
        checkduedateload('OT3', 'ClarDate2')
        checkduedateload('OT3', 'ClarDate3')

        checkduedateload('OT3', 'ClarDateSigned')
        checkduedateload('OT3', 'ClarDate1Signed')
        checkduedateload('OT3', 'ClarDate2Signed')
        checkduedateload('OT3', 'ClarDate3Signed')


        checkevaldate('ST')
        evalonly('ST')

        checkduedateload('ST', 'EvalDateSigned')

        checkduedateload('ST', 'ClarDate')
        checkduedateload('ST', 'ClarDate1')
        checkduedateload('ST', 'ClarDate2')
        checkduedateload('ST', 'ClarDate3')

        checkduedateload('ST', 'ClarDateSigned')
        checkduedateload('ST', 'ClarDate1Signed')
        checkduedateload('ST', 'ClarDate2Signed')
        checkduedateload('ST', 'ClarDate3Signed')
");
            WriteLiteral(@"
        checkevaldate('ST2')
        evalonly('ST2')

        checkduedateload('ST2', 'EvalDateSigned')

        checkduedateload('ST2', 'ClarDate')
        checkduedateload('ST2', 'ClarDate1')
        checkduedateload('ST2', 'ClarDate2')
        checkduedateload('ST2', 'ClarDate3')

        checkduedateload('ST2', 'ClarDateSigned')
        checkduedateload('ST2', 'ClarDate1Signed')
        checkduedateload('ST2', 'ClarDate2Signed')
        checkduedateload('ST2', 'ClarDate3Signed')

        checkevaldate('ST3')
        evalonly('ST3')

        checkduedateload('ST3', 'EvalDateSigned')

        checkduedateload('ST3', 'ClarDate')
        checkduedateload('ST3', 'ClarDate1')
        checkduedateload('ST3', 'ClarDate2')
        checkduedateload('ST3', 'ClarDate3')

        checkduedateload('ST3', 'ClarDateSigned')
        checkduedateload('ST3', 'ClarDate1Signed')
        checkduedateload('ST3', 'ClarDate2Signed')
        checkduedateload('ST3', 'ClarDate3Signed')

        dischargecheck()
        dischargeche");
            WriteLiteral(@"ckLevel()
        checktherapyadds()

        checkcomplete()

        $('.TableClick td').click(function (event) {
            if (event.target.type !== 'checkbox') {
                $(':checkbox', this).trigger('click');
            }
        });
    });


    </script>

    <script>
    $(window).load(function () {

        var passid = '");
#nullable restore
#line 291 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                 Write(Html.Raw(ViewData["passid"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'
        document.getElementById(""noteslink"").href = '/api/pdfcreator?report=notes&&passid=' + passid

        $("".txtdate"").inputmask(""99/99/9999"", { 'placeholder': 'MM/DD/YYYY' });
        $("".txtdateb"").inputmask(""99/99/9999"", { 'placeholder': 'MM/DD/YYYY' });

        $(""#txtMDSUnbillDays"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });

        $(""#txtMDSUnbillDays1"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });

                $(""#txtMDSUnbillDays2"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
                });

                $(""#txtMDSUnbillDays3"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
                });

        $(""#txtMDSUnbillDays4"").inputmask({
            'alias': 'n");
            WriteLiteral(@"umeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });

    });


    function hasClass(element, cls) {
        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    }

    $(function () {
        $("".txtdate"").datepicker({ clearBtn: true, autoclose: true });
        $("".txtdateb"").datepicker({clearBtn: true, autoclose: true, orientation: ""bottom""});
    });
    </script>

    <style>
        [data-tiny-editor] {
            height: 200px;
        }

        .ui-dialog-titlebar-close {
            visibility: hidden !important;
            display: none !important;
        }

        .txtbox {
            background-color: #fff;
            border: 1px solid #aaa;
            border-radius: 4px;
            height: 28px;
            width: 100% !important;
        }

        .txtlabel {
            margin-top: 15px;
        }

        .validation {
            color: red;
        }

        .dropzone {
            border: 1px solid #aaa !important;");
            WriteLiteral(@"
            border-radius: 5px !important;
            width: 280px;
            margin-top: 15px;
        }

        .imgdiv {
            border: 1px solid #aaa;
            border-radius: 5px;
            margin-top: 10px;
        }

            .imgdiv table {
                width: 280px;
                table-layout: fixed;
            }

        .imgdivtd {
            width: 170px;
            word-wrap: break-word;
            padding-right: 10px
        }

        .yesno {
            border: 1px solid #aaa;
            background-color: white;
            padding: 5px;
            transition: 1s;
            cursor: pointer;
            width: 50px;
            border-radius: 5px;
            text-align: center;
        }


        textarea {
            max-width: 600px !important;
            height: 100px;
        }

        .formheader {
            max-width: 600px;
            background-color: #aaa;
            padding: 5px;
            font-weight: bold;
            margin-top: 20px;
     ");
            WriteLiteral(@"   }

        .cbtext {
            cursor: default
        }

        .content table {
            border-collapse: collapse;
            width: 100%;
            border: 0px;
        }

        .content th, .content td {
            text-align: left;
            padding: 9px;
            height: 50px;
        }



            .content td:first-child {
                width: 280px;
            }


        .content tr {
            border-bottom: 1px solid #f2f2f2;
        }

        .collapsible {
            background-color: #337ab7;
            color: black;
            font-weight: bold;
            cursor: pointer;
            padding: 10px;
            width: 100%;
            text-align: left;
            outline: none;
            font-size: 15px;
            border: 0px;
        }



        .content {
            padding: 0 18px;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.2s ease-out;
            width: 100%;
            border: 1px solid black;
  ");
            WriteLiteral(@"      }

        .addaddition {
            display: none;
            visibility: hidden;
        }

        .paytype {
            display: none;
            visibility: hidden;
        }

        .dischargetype {
            display: none;
            visibility: hidden;
        }

        .dcyesnotype {
            display: none;
            visibility: hidden;
        }

        .booverride {
            display: none;
            visibility: hidden;
        }

        .dcoverride {
            display: none;
            visibility: hidden;
        }

        .mroverride {
            display: none;
            visibility: hidden;
        }

        .MDSTheroverride {
            display: none;
            visibility: hidden;
        }

        .MDSoverride {
            display: none;
            visibility: hidden;
        }

        .therapyvisable {
            display: none;
            visibility: hidden;
        }

        .ui-tooltip {
            padding: 10px 20px;
            color: white;
   ");
            WriteLiteral(@"         background-color: #333;
            border-radius: 6px;
        }


        .tderror {
            background-color: red;
        }

        .tdwarn {
            background-color: yellow;
        }


        .completed {
            color: green;
        }

        .notcompleted {
            color: red;
        }

        .confirmed {
            font-size: 10px;
        }

        .largedd {
            width: auto;
            border: none;
            text-decoration: none;
            font-size: 25px;
            font-weight: bold;
        }
    </style>
    <a");
            BeginWriteAttribute("href", " href=\"", 14871, "\"", 14964, 4);
            WriteAttributeValue("", 14878, "/TripleCheck?facid=", 14878, 19, true);
#nullable restore
#line 543 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 14897, Html.Raw(ViewData["facid"]), 14897, 28, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 14925, "&monthid=", 14925, 9, true);
#nullable restore
#line 543 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 14934, Html.Raw(ViewData["monthid"]), 14934, 30, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" id=\"homeclick\">Return to Home</a>\n    <div style=\"height:10px;\"></div>\n    <div style=\"font-size:30px\"><b>");
#nullable restore
#line 545 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                              Write(Html.Raw(ViewData["patientname"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\n\n    <div>\n        ");
#nullable restore
#line 548 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
   Write(Html.Raw(ViewData["patientmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n    </div>\n    <div style=\"height:10px;\"></div>\n    <div><input type=\"button\" class=\"btn btn-primary\" value=\"Delete Record\" onclick=\"showdel()\" /></div>\n    <hr />\n\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c46169", async() => {
                WriteLiteral("\n        <input type=\"text\" id=\"txtRecID\" name=\"txtRecID\" class=\"hidden\" />\n        <input type=\"button\" id=\"delreport\" class=\"hidden\" onclick=\"submit()\" />\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_13.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c48191", async() => {
                WriteLiteral("\n        <input type=\"text\" id=\"txtPassID\" name=\"txtID\" />\n        <input type=\"button\" id=\"subedit\" onclick=\"submit()\" />\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_15.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n\n    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c50259", async() => {
                WriteLiteral("\n        <input type=\"text\" id=\"txtPassIDPayment\" name=\"txtID\"");
                BeginWriteAttribute("value", " value=\"", 15975, "\"", 16012, 1);
#nullable restore
#line 565 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 15983, Html.Raw(ViewData["passid"]), 15983, 29, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(" />\n        <input type=\"text\" id=\"txtPayType\" name=\"txtPayType\" />\n        <input type=\"button\" id=\"subpaychange\" onclick=\"submit()\" />\n    ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_17.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_14.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n\n    <script>\n        function monthchange(dd) {\n            document.getElementById(\'txtPassID\').value = dd.value\n            document.getElementById(\'subedit\').click()\n        }\n    </script>\n\n    <input type=\"text\" id=\"txtUserName\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 16411, "\"", 16450, 1);
#nullable restore
#line 577 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 16419, Html.Raw(ViewData["username"]), 16419, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n    <input type=\"text\" id=\"txtID\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 16503, "\"", 16540, 1);
#nullable restore
#line 578 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 16511, Html.Raw(ViewData["passid"]), 16511, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n    <input type=\"text\" id=\"txtINTMonth\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 16599, "\"", 16638, 1);
#nullable restore
#line 579 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 16607, Html.Raw(ViewData["intmonth"]), 16607, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\n\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <div class=\"txtlabel\">Start date of skilled stay</div>\n            <div><input type=\"text\" id=\"txtStartDate\" class=\"txtbox txtdateb\" name=\"txtStartDate\"");
            BeginWriteAttribute("value", " value=\"", 16861, "\"", 16900, 1);
#nullable restore
#line 584 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 16869, Html.Raw(ViewData["staydate"]), 16869, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" onkeyup=""startdate(); consentcheck(); initialrequired()"" onchange=""startdate(); consentcheck(); initialrequired()"" /></div>
            <div id=""ValidationStartDate"" class=""hidden"">Please enter a valid date.</div>

            <div class=""txtlabel hidden"">Additional assessment for the same stay?</div>
            <div class=""hidden"">
                ");
#nullable restore
#line 589 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
           Write(Html.Raw(ViewData["AdditionalAssessment"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\n            </div>\n\n            <div class=\"txtlabel\">\n                Payment Type&nbsp;\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c55983", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_20);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n            </div>\n            <div>\n                ");
#nullable restore
#line 597 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
           Write(Html.Raw(ViewData["PaymentType"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            </div>
        </div>
        <div class=""col-md-3"">
            <div class=""txtlabel"" style=""border-bottom: 1px solid #aaa; font-weight:bold"">Notes</div>
            <div style=""overflow-y:auto; height:100px; margin-bottom:10px;"" id=""divNotes"">
                ");
#nullable restore
#line 603 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
           Write(Html.Raw(ViewData["patientnotes"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            </div>
            <div>
                <input type=""button"" class=""btn btn-primary"" value=""Add Notes"" onclick=""shownotes()"" />
                <a href=""https://localhost:44334/api/pdfcreator?report=notes&&passid=4888"" id=""noteslink"" target=""_blank""><input type=""button"" class=""btn btn-primary"" value=""Print Notes"" /></a>
            </div>
        </div>
");
            WriteLiteral(@"    </div>

    <br />
    <br />
    

    <script>
        function paymentchange() {
            document.getElementById('txtPayType').value = document.getElementById('ddPaymentType').value
            document.getElementById('subpaychange').click()
        }
    </script>

    <button class=""collapsible"" style=""background-color:lightblue"" id=""btnBusinessOffice"">
        <table style=""width:100%"">
            <tr>
                <td>Business Office</td>
                <td style=""text-align:right; padding-right:50px;"" id=""BOComplete""></td>
            </tr>
        </table>
    </button>
    <div class=""content"" style=""border: 1px solid black"" id=""frmBO"">
        <div style=""height:20px""></div>
        <table class=""TableClick content"">
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOTypeOfBill"">
                <td id=""tdBOTypeOfBill"" class=""tderror"">
                    <select class=""txtbox"" id=""ddBOTypeOfBill"" onchange=""ddcheck('BOTypeOfBill')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c59577", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c60517", async() => {
                WriteLiteral("210");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c61495", async() => {
                WriteLiteral("211");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c62473", async() => {
                WriteLiteral("212");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c63451", async() => {
                WriteLiteral("213");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c64429", async() => {
                WriteLiteral("214");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c65407", async() => {
                WriteLiteral("21Q");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c66385", async() => {
                WriteLiteral("217");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Type of bill</td>
                <td id=""tdBOTypeOfBillConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBODOB"">
                <td id=""tdBODOB"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BODOB')"" id=""cbBODOB"" />
                </td>
                <td>DOB <b>");
#nullable restore
#line 661 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["patientdob"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
                <td id=""tdBODOBConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOSex"">
                <td id=""tdBOSex"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOSex')"" id=""cbBOSex"" />
                </td>
                <td>Sex <b>");
#nullable restore
#line 668 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["patientgender"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
                <td id=""tdBOSexConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOHIC"">
                <td id=""tdBOHIC"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOHIC')"" id=""cbBOHIC"" />
                </td>
                <td>HIC Number Verified</td>
                <td id=""tdBOHICConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOMD"">
                <td id=""tdBOMD"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOMD')"" id=""cbBOMD"" />
                </td>
                <td>MD Verified</td>
                <td id=""tdBOMDConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay levels trerror"" id=""trBOAuth"">
                <td id=""tdBOAuth"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOAuth')"" id=""cbBOAuth"" />
                </td");
            WriteLiteral(@">
                <td>Authorization is present and matches the level billed</td>
                <td id=""tdBOAuthConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay levels trerror"" id=""trBOAdd"">
                <td id=""tdBOAdd"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOAdd')"" id=""cbBOAdd"" />
                </td>
                <td>Add-ons and exclusions are on the claim if applicable</td>
                <td id=""tdBOAddConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa trerror"" id=""trBOBenefit"">
                <td id=""tdBOBenefit"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOBenefit')"" id=""cbBOBenefit"" />
                </td>
                <td>Benefit Days Available Verified</td>
                <td id=""tdBOBenefitConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa trerror"" id=""trBOCoinsurance"">
                <td id=");
            WriteLiteral(@"""tdBOCoinsurance"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOCoinsurance')"" id=""cbBOCoinsurance"" />
                </td>
                <td>Coinsurance Days Verified</td>
                <td id=""tdBOCoinsuranceConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa trerror"" id=""trBOMedicare"">
                <td id=""tdBOMedicare"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOMedicare')"" id=""cbBOMedicare"" />
                </td>
                <td>Medicare Secondary Payor Status Verified</td>
                <td id=""tdBOMedicareConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay mcb trerror"" id=""trBOOnset"">
                <td id=""tdBOOnset"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOOnset')"" id=""cbBOOnset"" />
                </td>
                <td>
                    Therapy Onset Date
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c72031", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_21);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdBOOnsetConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay mcb trerror"" id=""trBOStart"">
                <td id=""tdBOStart"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOStart')"" id=""cbBOStart"" />
                </td>
                <td>
                    Therapy Start of Care
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c73661", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdBOStartConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay mcb trerror"" id=""trBOVerify"">
                <td id=""tdBOVerify"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOVerify')"" id=""cbBOVerify"" />
                </td>
                <td>Verify Therapy HCPC code, modifier (GP, GO, GN) and dates of service</td>
                <td id=""tdBOVerifyConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay mcb trerror"" id=""trBOModifiers"">
                <td id=""tdBOModifiers"" class=""tderror"">
                    <input type=""checkbox"" onchange=""cbcheck('BOModifiers')"" id=""cbBOModifiers"" />
                </td>
                <td>Therapy modifiers are present as needed (KX, 59, CO, CQ)</td>
                <td id=""tdBOModifiersConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDates"">
              ");
            WriteLiteral(@"  <td id=""tdBOServiceDates"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDates"" onchange=""datecheck('BOServiceDates')"" onkeyup=""datecheck('BOServiceDates')"" />
                </td>
                <td>Service Dates From</td>
                <td id=""tdBOServiceDatesConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDatesTo"">
                <td id=""tdBOServiceDatesTo"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDatesTo"" onchange=""datecheck('BOServiceDatesTo')"" onkeyup=""datecheck('BOServiceDatesTo')"" />
                </td>
                <td>Service Dates To</td>
                <td id=""tdBOServiceDatesToConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm trerror"" id=""trBOStayFrom"">
                <td id=""tdBOStayFrom"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayFrom"" onc");
            WriteLiteral("hange=\"checkqualifying(); datecheck(\'BOStayFrom\')\" onkeyup=\"checkqualifying(); datecheck(\'BOStayFrom\')\" /></td>\n                <td>\n                    Qualifying Stay Dates From\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c77278", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdBOStayFromConfirm"" class=""confirmed""></td>
            </tr>
            <tr class=""yes pay pdpm trerror"" id=""trBOStayTo"">
                <td id=""tdBOStayTo"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayTo"" onchange=""checkqualifying(); datecheck('BOStayTo')"" onkeyup=""checkqualifying(); datecheck('BOStayTo')"" /></td>
                <td>Qualifying Stay Dates To</td>
                <td id=""tdBOStayToConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes pay pdpm trerror booverride"" id=""trBOStayReason"">
                <td id=""tdBOStayReason"" class=""tderror"">
                    <input type=""text"" class=""txtbox"" id=""txtBOStayReason"" onkeyup=""textcheck('BOStayReason')"" />
                </td>
                <td>Reason why 3 day hospital stay not required</td>
                <td id=""tdBOStayReasonConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes trerror booverride"" id=""trBODischarge");
            WriteLiteral("Q\">\n                <td id=\"tdBODischargeQ\" class=\"tderror\">\n                    <select class=\"txtbox\" id=\"ddBODischargeQ\" onchange=\"ddcheck(\'BODischargeQ\'); dischargecheck();\">\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c79798", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c80738", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c81715", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td id=""BODischargeQ"">
                </td>
                <td id=""tdBODischargeQConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""booverride trerror"" id=""trBODischargeQLevel"">
                <td id=""tdBODischargeQLevel"" class=""tderror"">
                    <select class=""txtbox"" id=""ddBODischargeQLevel"" onchange=""ddcheck('BODischargeQLevel'); dischargecheckLevel();"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c83180", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c84120", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c85097", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Did patient discharge from HMO Levels this month?</td>
                <td id=""tdBODischargeQLevelConfirm"" class=""confirmed""></td>
            </tr>
        </table>
        <div style=""height:20px""></div>
    </div>




    <div id=""dcwhole"">
        <button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnDCInfo"">
            <table style=""width:100%"">
                <tr>
                    <td>DC Information</td>
                    <td style=""text-align:right; padding-right:50px;"" id=""DCComplete""></td>
                </tr>
            </table>
        </button>
        <div class=""content yes"" id=""DCContent"" style=""border: 1px solid black"">
            <div style=""height:20px""></div>
            <table class=""TableClick"">


                <tr class=""yes pay pdpm hmoa discharge home hospital trerror"" id=""trDCDischarge"">
                    <td id=""tdDCDischarge"" class=""tderror"">
                        <input type");
            WriteLiteral(@"=""text"" class=""txtbox txtdate"" id=""txtDCDischarge"" onchange=""datecheck('DCDischarge'); dcdischargedate(); therdischange('')"" onkeyup=""datecheck('DCDischarge'); dcdischargedate(); therdischange('')"" />
                    </td>
                    <td>Discharge Date</td>
                    <td id=""tdDCDischargeConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay mcb trerror"" id=""trMCBDischarge"">
                    <td id=""tdMCBDischarge"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMCBDischarge"" onchange=""datecheck('MCBDischarge'); MCBDischargeChange()"" onkeyup=""datecheck('MCBDischarge'); MCBDischargeChange()"" />
                    </td>
                    <td>Enter last date of final therapy treatment for any discipline.</td>
                    <td id=""tdMCBDischargeConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trDischargeLoc"">
                ");
            WriteLiteral("    <td id=\"tdDischargeLoc\" class=\"tderror\">\n                        <select class=\"txtbox\" onchange=\"dcdischargeloc(); ddcheck(\'DischargeLoc\')\" id=\"ddDischargeLoc\">\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c88447", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c89391", async() => {
                WriteLiteral("01 - Home");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c90379", async() => {
                WriteLiteral("06 - Home w/HH");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c91372", async() => {
                WriteLiteral("02 - Hospital");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c92364", async() => {
                WriteLiteral("04 - LTC");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c93351", async() => {
                WriteLiteral("07 - AMA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c94338", async() => {
                WriteLiteral("20 - Expired");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c95329", async() => {
                WriteLiteral("Other");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Discharge Location</td>
                    <td id=""tdDischargeLocConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""dcoverride trerror"" id=""trDischargeLocLevel"">
                    <td id=""tdDischargeLocLevel"" class=""tderror"">
                        <select class=""txtbox"" onchange=""ddcheck('DischargeLocLevel')"" id=""ddDischargeLocLevel"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c96789", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c97733", async() => {
                WriteLiteral("01 - Home");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c98721", async() => {
                WriteLiteral("06 - Home w/HH");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c99714", async() => {
                WriteLiteral("02 - Hospital");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c100706", async() => {
                WriteLiteral("04 - LTC");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c101694", async() => {
                WriteLiteral("07 - AMA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c102682", async() => {
                WriteLiteral("20 - Expired");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c103674", async() => {
                WriteLiteral("Other");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Discharge Location</td>
                    <td id=""tdDischargeLocLevelConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trDrivenDischarge"">
                    <td id=""tdDrivenDischarge"" class=""tderror"">
                        <select class=""txtbox"" onchange=""dcyesno(); ddcheck('DrivenDischarge')"" id=""ddDrivenDischarge"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c105162", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c106107", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c107089", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Patient Driven Discharge (No LCD Given)</td>
                    <td id=""tdDrivenDischargeConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trDCNotePresent"">
                    <td id=""tdDCNotePresent"" class=""tderror"">
                        <input type=""checkbox"" id=""cbDCNotePresent"" onchange=""cbcheck('DCNotePresent')"" />
                    </td>
                    <td>Note is present to support reason No NOMNC Issued</td>
                    <td id=""tdDCNotePresentConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trDCLastDay"">
                    <td id=""tdDCLastDay"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtDCLastDay"" onchange=""datecheck('DCLastDay'); dcdaychange(); checkallmr()"" onkeyup=""datecheck('DCLastDay'); dcdaychange");
            WriteLiteral(@"(); checkallmr()"" />
                    </td>
                    <td>Last Covered Day (LCD)</td>
                    <td id=""tdDCLastDayConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trDCNOMNC"">
                    <td id=""tdDCNOMNC"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtDCNOMNC"" onchange=""datecheck('DCNOMNC'); dcdaychange();"" onkeyup=""datecheck('DCNOMNC'); dcdaychange();"" />
                    </td>
                    <td>
                        NOMNC Issued on
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c109788", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdDCNOMNCConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay mcb trerror"" id=""trDCNOMNCMCB"">
                    <td id=""tdDCNOMNCMCB"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtDCNOMNCMCB"" onchange=""datecheck('DCNOMNCMCB'); MCBDischargeChange();"" onkeyup=""datecheck('DCNOMNCMCB'); MCBDischargeChange();"" />
                    </td>
                    <td>
                        NOMNC Issued on
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c111572", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdDCNOMNCMCBConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trDOOR"">
                    <td id=""tdDOOR"" class=""tderror"">
                        <input id=""txtDOOR"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""textcheck('DOOR')"" />
                    </td>
                    <td>Reason not completed timely</td>
                    <td id=""tdDOORConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay mcb dcoverride trerror"" id=""trDOORMCB"">
                    <td id=""tdDOORMCB"" class=""tderror"">
                        <input id=""txtDOORMCB"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""textcheck('DOORMCB')"" />
                    </td>
                    <td>Reason not completed timely</td>
                    <td id=""tdDOORMCBConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa d");
            WriteLiteral(@"coverride trerror""  id=""trDCABN"">
                    <td class=""tderror"" id=""tdDCABN"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtDCABN"" onchange=""datecheck('DCABN'); dcdaychange()"" onkeyup=""datecheck('DCABN'); dcdaychange()"" />
                    </td>
                    <td>
                        ABN Issued On
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c114265", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_24);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdDCABNConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay pdpm hmoa dcoverride trerror"" id=""trABNOR"">
                    <td id=""tdABNOR"" class=""tderror"">
                        <input id=""txtABNOR"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""textcheck('ABNOR')"" />
                    </td>
                    <td>Reason not completed timely</td>
                    <td id=""tdABNORConfirm"" class=""confirmed""></td>
                </tr>
            </table>
            <div style=""height:20px""></div>
        </div>
    </div>

    <div id=""MDSWhole"">
        <button class=""collapsible"" style=""background-color:lightblue"" id=""btnMDS"">
            <table style=""width:100%"">
                <tr>
                    <td>MDS</td>
                    <td style=""text-align:right; padding-right:50px;"" id=""MDSComplete""></td>
                </tr>
            </table>
        </button>
        <div class=""content"" styl");
            WriteLiteral(@"e=""border: 1px solid black"" id=""MDSContent"">
            <div style=""height:20px""></div>
            <table class=""TableClick content"">
                <tr class=""pay pdpm hmoa trerror""  id=""trBOPatient"">
                    <td id=""tdBOPatient"" class=""tderror"">
                        <select class=""txtbox"" id=""ddBOPatient"" onchange=""patientleave(this, 'save', ''); mdsadddays('save', '')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c117007", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c117952", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c118934", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        </select>\n                    </td>\n                    <td>Did the patient have a leave during the billing period?</td>\n                    <td id=\"tdBOPatientConfirm\" class=\"confirmed\"></td>\n                </tr>\n");
            WriteLiteral(@"

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSARD"">
                    <td id=""tdMDSARD"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD"" onchange=""datecheck('MDSARD')"" onkeyup=""datecheck('MDSARD')"" />
                    </td>
                    <td>ARD</td>
                    <td id=""tdMDSARDConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""pay hmoa trerror"" id=""trMDSAssessmentType"">
                    <td id=""tdMDSAssessmentType"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentType"" onchange=""ddcheck('MDSAssessmentType')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c120902", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c121847", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c122832", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentTypeConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerror"" id=""trMDSAssessmentTypePDPM"">
                    <td id=""tdMDSAssessmentTypePDPM"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM"" onchange=""ddcheck('MDSAssessmentTypePDPM')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c124307", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c125252", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c126237", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentTypePDPMConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSHIPPS"">
                    <td id=""tdMDSHIPPS"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS"" maxlength=""5"" onkeyup=""textchecklength('MDSHIPPS', 5)"" />
                    </td>
                    <td>
                        HIPPS Code
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c127793", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSHIPPSConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSUnbillDays"">
                    <td id=""tdMDSUnbillDays"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(''); mdsadddays('save', '')"" />
                    </td>
                    <td>
                        Number of Unbillable Days due to Interrupted Stay/Skip days
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c129593", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_26);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSUnbillDaysConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSARDStart"">
                    <td id=""tdMDSARDStart"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart"" onchange=""datecheck('MDSARDStart'); mdsadddays('save', '')"" onkeyup=""datecheck('MDSARDStart'); mdsadddays('save', '')"" />
                    </td>
                    <td>ARD Assessment Coverage Start Date for this Month</td>
                    <td id=""tdMDSARDStartConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa"" id=""trMDSARDEnd"">
                    <td id=""tdMDSARDEnd"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd"" onchange=""datechecknoerror('MDSARDEnd'); mdsadddays('save', '')"" onkeyup=""datechecknoerror('MDSARDEnd'); mdsadddays('save', '')"" />
                    </td>
              ");
            WriteLiteral(@"      <td>ARD Assessment Coverage End Date for this Month</td>
                    <td id=""tdMDSARDEndConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSNumDays"">
                    <td id=""tdMDSNumDays"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSNumDays"" disabled=""disabled"" />
                    </td>
                    <td>ARD Number of Days Billed</td>
                    <td id=""tdMDSNumDaysConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerror"" id=""trMDSGG"">
                    <td id=""tdMDSGG"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSGG"" onchange=""cbcheck('MDSGG')"" />
                    </td>
                    <td>GG data collection present, timely, and properly signed by clinician </td>
                    <td id=""tdMDSGGConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerr");
            WriteLiteral(@"or"" id=""trMDSAttestation"">
                    <td id=""tdMDSAttestation"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSAttestation"" onchange=""cbcheck('MDSAttestation')"" />
                    </td>
                    <td>Attestation of collaboration is present on or before the ARD</td>
                    <td id=""tdMDSAttestationConfirm"" class=""confirmed""></td>
                </tr>



");
            WriteLiteral(@"
                <tr class=""pay pdpm hmoa trerror"" id=""trMDSPTOT"">
                    <td id=""tdMDSPTOT"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSPTOT"" onchange=""cbcheck('MDSPTOT')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
                    <td id=""tdMDSPTOTConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSSLP"">
                    <td id=""tdMDSSLP"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSSLP"" onchange=""cbcheck('MDSSLP')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
                    <td id=""tdMDSSLPConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSNursing"">
                    <td id=""tdMDSNursing"" class=""tderror"">
                        <input type=""checkbox"" i");
            WriteLiteral(@"d=""cbMDSNursing"" onchange=""cbcheck('MDSNursing')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports Nursing CMG </td>
                    <td id=""tdMDSNursingConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSNTA"">
                    <td id=""tdMDSNTA"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNTA"" onchange=""cbcheck('MDSNTA')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
                    <td id=""tdMDSNTAConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror"" id=""trMDSTransmitted"">
                    <td id=""tdMDSTransmitted"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSTransmitted"" onchange=""cbcheck('MDSTransmitted')"" />
                    </td>
                    <td>MDS Transmitted and Accepted</td>
       ");
            WriteLiteral(@"             <td id=""tdMDSTransmittedConfirm"" class=""confirmed""></td>
                </tr>
            </table>


            <hr style=""border-top: 2px solid black;"" />


            <table class=""TableClick content MDSoverride"" id=""track1"">
                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trBOPatient1"">
                    <td id=""tdBOPatient1"" class=""tderror"">
                        <select class=""txtbox"" id=""ddBOPatient1"" onchange=""patientleave(this, 'save', 1); mdsadddays('save', 1)"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c136219", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c137164", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c138146", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        </select>\n                    </td>\n                    <td>Did the patient have a leave during the billing period?</td>\n                    <td id=\"tdBOPatient1Confirm\" class=\"confirmed\"></td>\n                </tr>\n");
            WriteLiteral(@"

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD1"">
                    <td id=""tdMDSARD1"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD1"" onchange=""datecheck('MDSARD1')"" onkeyup=""datecheck('MDSARD1')"" />
                    </td>
                    <td>ARD</td>
                    <td id=""tdMDSARD1Confirm"" class=""confirmed""></td>
                </tr>


                <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType1"">
                    <td id=""tdMDSAssessmentType1"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentType1"" onchange=""ddcheck('MDSAssessmentType1')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c140149", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c141094", async() => {
                WriteLiteral("14 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c142080", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c143066", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c144052", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c145038", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c146021", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c147004", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentType1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM1"">
                    <td id=""tdMDSAssessmentTypePDPM1"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM1"" onchange=""ddcheck('MDSAssessmentTypePDPM1')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c148496", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c149441", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentTypePDPM1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS1"">
                    <td id=""tdMDSHIPPS1"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS1"" maxlength=""5"" onkeyup=""textchecklength('MDSHIPPS1', 5)"" />
                    </td>
                    <td>
                        HIPPS Code
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c151014", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSHIPPS1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays1"">
                    <td id=""tdMDSUnbillDays1"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays1"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(1); mdsadddays('save', 1)"" />
                    </td>
                    <td>
                        Number of Unbillable Days due to Interrupted Stay/Skip days
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c152828", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSUnbillDays1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart1"">
                    <td id=""tdMDSARDStart1"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart1"" onchange=""datecheck('MDSARDStart1'); mdsadddays('save', 1)"" onkeyup=""datecheck('MDSARDStart1'); mdsadddays('save', 1)"" />
                    </td>
                    <td>ARD Assessment Coverage Start Date for this Month</td>
                    <td id=""tdMDSARDStart1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd1"">
                    <td id=""tdMDSARDEnd1"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd1"" onchange=""datechecknoerror('MDSARDEnd1'); mdsadddays('save', 1)"" onkeyup=""datechecknoerror('MDSARDEnd1'); mdsadddays('save', 1)"" />
        ");
            WriteLiteral(@"            </td>
                    <td>ARD Assessment Coverage End Date for this Month</td>
                    <td id=""tdMDSARDEnd1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays1"">
                    <td id=""tdMDSNumDays1"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSNumDays1"" disabled=""disabled"" />
                    </td>
                    <td>ARD Number of Days Billed</td>
                    <td id=""tdMDSNumDays1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted1"">
                    <td id=""tdMDSTransmitted1"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSTransmitted1"" onchange=""cbcheck('MDSTransmitted1')"" />
                    </td>
                    <td>MDS Transmitted and Accepted</td>
                    <td id=""tdMDSTransmitted1Confirm"" class=""confir");
            WriteLiteral(@"med""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT1"">
                    <td id=""tdMDSPTOT1"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSPTOT1"" onchange=""cbcheck('MDSPTOT1')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
                    <td id=""tdMDSPTOT1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP1"">
                    <td id=""tdMDSSLP1"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSSLP1"" onchange=""cbcheck('MDSSLP1')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
                    <td id=""tdMDSSLP1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trMDSNursing1"">
                    <td id");
            WriteLiteral(@"=""tdMDSNursing1"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNursing1"" onchange=""cbcheck('MDSNursing1')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports Nursing CMG </td>
                    <td id=""tdMDSNursing1Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA1"">
                    <td id=""tdMDSNTA1"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNTA1"" onchange=""cbcheck('MDSNTA1')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
                    <td id=""tdMDSNTA1Confirm"" class=""confirmed""></td>
                </tr>


            </table>

            <hr style=""border-top: 2px solid black;"" id=""trackhead2"" class=""hidden"" />
            <input type=""button"" class=""btn btn-primary"" value=""Add Track"" id=""addtrack1"" onclick=""addtrack(1)"" />
         ");
            WriteLiteral(@"   <input type=""button"" class=""btn btn-primary hidden"" value=""Add Track"" id=""addtrack2"" onclick=""addtrack(2)"" />
            <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack1"" onclick=""removetrack(1)"" />
            <div style=""height:20px"" id=""trackspace2""></div>




            <table class=""TableClick content MDSoverride"" id=""track2"">
                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trBOPatient2"">
                    <td id=""tdBOPatient2"" class=""tderror"">
                        <select class=""txtbox"" id=""ddBOPatient2"" onchange=""patientleave(this, 'save', 2); mdsadddays('save', 2)"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c159143", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c160088", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c161070", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        </select>\n                    </td>\n                    <td>Did the patient have a leave during the billing period?</td>\n                    <td id=\"tdBOPatient2Confirm\" class=\"confirmed\"></td>\n                </tr>\n");
            WriteLiteral(@"

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD2"">
                    <td id=""tdMDSARD2"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD2"" onchange=""datecheck('MDSARD2')"" onkeyup=""datecheck('MDSARD2')"" />
                    </td>
                    <td>ARD</td>
                    <td id=""tdMDSARD2Confirm"" class=""confirmed""></td>
                </tr>


                <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType2"">
                    <td id=""tdMDSAssessmentType2"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentType2"" onchange=""ddcheck('MDSAssessmentType2')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c163073", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c164018", async() => {
                WriteLiteral("24 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c165004", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c165990", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c166976", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c167962", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c168945", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c169928", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentType2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM2"">
                    <td id=""tdMDSAssessmentTypePDPM2"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM2"" onchange=""ddcheck('MDSAssessmentTypePDPM2')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c171420", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c172365", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentTypePDPM2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS2"">
                    <td id=""tdMDSHIPPS2"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS2"" maxlength=""5"" onkeyup=""textchecklength('MDSHIPPS2', 5)"" />
                    </td>
                    <td>
                        HIPPS Code
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c173938", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSHIPPS2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays2"">
                    <td id=""tdMDSUnbillDays2"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays2"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(2); mdsadddays('save', 2)"" />
                    </td>
                    <td>
                        Number of Unbillable Days due to Interrupted Stay/Skip days
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c175752", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_28);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSUnbillDays2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart2"">
                    <td id=""tdMDSARDStart2"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart2"" onchange=""datecheck('MDSARDStart2'); mdsadddays('save', 2)"" onkeyup=""datecheck('MDSARDStart2'); mdsadddays('save', 2)"" />
                    </td>
                    <td>ARD Assessment Coverage Start Date for this Month</td>
                    <td id=""tdMDSARDStart2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd2"">
                    <td id=""tdMDSARDEnd2"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd2"" onchange=""datechecknoerror('MDSARDEnd2'); mdsadddays('save', 2)"" onkeyup=""datechecknoerror('MDSARDEnd2'); mdsadddays('save', 2)"" />
        ");
            WriteLiteral(@"            </td>
                    <td>ARD Assessment Coverage End Date for this Month</td>
                    <td id=""tdMDSARDEnd2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays2"">
                    <td id=""tdMDSNumDays2"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSNumDays2"" disabled=""disabled"" />
                    </td>
                    <td>ARD Number of Days Billed</td>
                    <td id=""tdMDSNumDays2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted2"">
                    <td id=""tdMDSTransmitted2"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSTransmitted2"" onchange=""cbcheck('MDSTransmitted2')"" />
                    </td>
                    <td>MDS Transmitted and Accepted</td>
                    <td id=""tdMDSTransmitted2Confirm"" class=""confir");
            WriteLiteral(@"med""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT2"">
                    <td id=""tdMDSPTOT2"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSPTOT2"" onchange=""cbcheck('MDSPTOT2')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
                    <td id=""tdMDSPTOT2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP2"">
                    <td id=""tdMDSSLP2"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSSLP2"" onchange=""cbcheck('MDSSLP2')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
                    <td id=""tdMDSSLP2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trMDSNursing2"">
                    <td id");
            WriteLiteral(@"=""tdMDSNursing2"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNursing2"" onchange=""cbcheck('MDSNursing2')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports Nursing CMG </td>
                    <td id=""tdMDSNursing2Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA2"">
                    <td id=""tdMDSNTA2"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNTA2"" onchange=""cbcheck('MDSNTA2')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
                    <td id=""tdMDSNTA2Confirm"" class=""confirmed""></td>
                </tr>


            </table>

            <hr style=""border-top: 2px solid black;"" id=""trackhead3"" class=""hidden"" />
            <input type=""button"" class=""btn btn-primary hidden"" value=""Add Track"" id=""addtrack3"" onclick=""addtrack(3)"" />
  ");
            WriteLiteral(@"          <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack2"" onclick=""removetrack(2)"" />
            <div style=""height:20px"" id=""trackspace3"" class=""hidden""></div>



            <table class=""TableClick content MDSoverride"" id=""track3"">
                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trBOPatient3"">
                    <td id=""tdBOPatient3"" class=""tderror"">
                        <select class=""txtbox"" id=""ddBOPatient3"" onchange=""patientleave(this, 'save', 3); mdsadddays('save', 3)"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c181958", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c182903", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c183885", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        </select>\n                    </td>\n                    <td>Did the patient have a leave during the billing period?</td>\n                    <td id=\"tdBOPatient3Confirm\" class=\"confirmed\"></td>\n                </tr>\n");
            WriteLiteral(@"

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD3"">
                    <td id=""tdMDSARD3"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD3"" onchange=""datecheck('MDSARD3')"" onkeyup=""datecheck('MDSARD3')"" />
                    </td>
                    <td>ARD</td>
                    <td id=""tdMDSARD3Confirm"" class=""confirmed""></td>
                </tr>


                <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType3"">
                    <td id=""tdMDSAssessmentType3"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentType3"" onchange=""ddcheck('MDSAssessmentType3')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c185888", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c186833", async() => {
                WriteLiteral("34 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c187819", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c188805", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c189791", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c190777", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c191760", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c192743", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentType3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM3"">
                    <td id=""tdMDSAssessmentTypePDPM3"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM3"" onchange=""ddcheck('MDSAssessmentTypePDPM3')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c194235", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c195180", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentTypePDPM3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS3"">
                    <td id=""tdMDSHIPPS3"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS3"" maxlength=""5"" onkeyup=""textchecklength('MDSHIPPS3', 5)"" />
                    </td>
                    <td>
                        HIPPS Code
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c196753", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSHIPPS3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays3"">
                    <td id=""tdMDSUnbillDays3"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays3"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(3); mdsadddays('save', 3)"" />
                    </td>
                    <td>
                        Number of Unbillable Days due to Interrupted Stay/Skip days
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c198567", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_29);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSUnbillDays3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart3"">
                    <td id=""tdMDSARDStart3"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart3"" onchange=""datecheck('MDSARDStart3'); mdsadddays('save', 3)"" onkeyup=""datecheck('MDSARDStart3'); mdsadddays('save', 3)"" />
                    </td>
                    <td>ARD Assessment Coverage Start Date for this Month for this Month</td>
                    <td id=""tdMDSARDStart3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd3"">
                    <td id=""tdMDSARDEnd3"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd3"" onchange=""datechecknoerror('MDSARDEnd3'); mdsadddays('save', 3)"" onkeyup=""datechecknoerror('MDSARDEnd3'); mdsadddays('save', ");
            WriteLiteral(@"3)"" />
                    </td>
                    <td>ARD Assessment Coverage End Date for this Month</td>
                    <td id=""tdMDSARDEnd3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays3"">
                    <td id=""tdMDSNumDays3"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSNumDays3"" disabled=""disabled"" />
                    </td>
                    <td>ARD Number of Days Billed</td>
                    <td id=""tdMDSNumDays3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted3"">
                    <td id=""tdMDSTransmitted3"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSTransmitted3"" onchange=""cbcheck('MDSTransmitted3')"" />
                    </td>
                    <td>MDS Transmitted and Accepted</td>
                    <td id=""tdMDSTransmitted3Confirm");
            WriteLiteral(@""" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT3"">
                    <td id=""tdMDSPTOT3"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSPTOT3"" onchange=""cbcheck('MDSPTOT3')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
                    <td id=""tdMDSPTOT3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP3"">
                    <td id=""tdMDSSLP3"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSSLP3"" onchange=""cbcheck('MDSSLP3')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
                    <td id=""tdMDSSLP3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trMDSNursing3"">
           ");
            WriteLiteral(@"         <td id=""tdMDSNursing3"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNursing3"" onchange=""cbcheck('MDSNursing3')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports Nursing CMG </td>
                    <td id=""tdMDSNursing3Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA3"">
                    <td id=""tdMDSNTA3"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNTA3"" onchange=""cbcheck('MDSNTA3')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
                    <td id=""tdMDSNTA3Confirm"" class=""confirmed""></td>
                </tr>


            </table>

            <hr style=""border-top: 2px solid black;"" id=""trackhead4"" class=""hidden"" />
            <input type=""button"" class=""btn btn-primary hidden"" value=""Add Track"" id=""addtrack4"" onclick=""add");
            WriteLiteral(@"track(4)"" />
            <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack3"" onclick=""removetrack(3)"" />
            <div style=""height:20px"" id=""trackspace4"" class=""hidden""></div>



            <table class=""TableClick content MDSoverride"" id=""track4"">
                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trBOPatient4"">
                    <td id=""tdBOPatient4"" class=""tderror"">
                        <select class=""txtbox"" id=""ddBOPatient4"" onchange=""patientleave(this, 'save', 4); mdsadddays('save', 4)"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c204788", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c205733", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c206715", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        </select>\n                    </td>\n                    <td>Did the patient have a leave during the billing period?</td>\n                    <td id=\"tdBOPatient4Confirm\" class=\"confirmed\"></td>\n                </tr>\n");
            WriteLiteral(@"

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARD4"">
                    <td id=""tdMDSARD4"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD4"" onchange=""datecheck('MDSARD4')"" onkeyup=""datecheck('MDSARD4')"" />
                    </td>
                    <td>ARD</td>
                    <td id=""tdMDSARD4Confirm"" class=""confirmed""></td>
                </tr>


                <tr class=""pay hmoa trerror MDSoverride"" id=""trMDSAssessmentType4"">
                    <td id=""tdMDSAssessmentType4"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentType4"" onchange=""ddcheck('MDSAssessmentType4')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c208718", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c209663", async() => {
                WriteLiteral("44 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c210649", async() => {
                WriteLiteral("40 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c211635", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c212621", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c213607", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c214590", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c215573", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentType4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm trerror MDSoverride"" id=""trMDSAssessmentTypePDPM4"">
                    <td id=""tdMDSAssessmentTypePDPM4"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSAssessmentTypePDPM4"" onchange=""ddcheck('MDSAssessmentTypePDPM4')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c217065", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c218010", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>Assessment Type</td>
                    <td id=""tdMDSAssessmentTypePDPM4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSHIPPS4"">
                    <td id=""tdMDSHIPPS4"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS4"" maxlength=""5"" onkeyup=""textchecklength('MDSHIPPS4', 5)"" />
                    </td>
                    <td>
                        HIPPS Code
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c219583", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_25);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSHIPPS4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSUnbillDays4"">
                    <td id=""tdMDSUnbillDays4"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays4"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(4); mdsadddays('save', 4)"" />
                    </td>
                    <td>
                        Number of Unbillable Days due to Interrupted Stay/Skip days
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c221397", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_30);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </td>
                    <td id=""tdMDSUnbillDays4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSARDStart4"">
                    <td id=""tdMDSARDStart4"" class=""tderror"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart4"" onchange=""datecheck('MDSARDStart4'); mdsadddays('save', 4)"" onkeyup=""datecheck('MDSARDStart4'); mdsadddays('save', 4)"" />
                    </td>
                    <td>ARD Assessment Coverage Start Date for this Month</td>
                    <td id=""tdMDSARDStart4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa MDSoverride"" id=""trMDSARDEnd4"">
                    <td id=""tdMDSARDEnd4"">
                        <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd4"" onchange=""datechecknoerror('MDSARDEnd4'); mdsadddays('save', 4)"" onkeyup=""datechecknoerror('MDSARDEnd4'); mdsadddays('save', 4)"" />
        ");
            WriteLiteral(@"            </td>
                    <td>ARD Assessment Coverage End Date for this Month</td>
                    <td id=""tdMDSARDEnd4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNumDays4"">
                    <td id=""tdMDSNumDays4"" class=""tderror"">
                        <input type=""text"" class=""txtbox"" id=""txtMDSNumDays4"" disabled=""disabled"" />
                    </td>
                    <td>ARD Number of Days Billed</td>
                    <td id=""tdMDSNumDays4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSTransmitted4"">
                    <td id=""tdMDSTransmitted4"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSTransmitted4"" onchange=""cbcheck('MDSTransmitted4')"" />
                    </td>
                    <td>MDS Transmitted and Accepted</td>
                    <td id=""tdMDSTransmitted4Confirm"" class=""confir");
            WriteLiteral(@"med""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSPTOT4"">
                    <td id=""tdMDSPTOT4"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSPTOT4"" onchange=""cbcheck('MDSPTOT4')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports PT/OT CMG </td>
                    <td id=""tdMDSPTOT4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSSLP4"">
                    <td id=""tdMDSSLP4"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSSLP4"" onchange=""cbcheck('MDSSLP4')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports SLP CMG </td>
                    <td id=""tdMDSSLP4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride""  id=""trMDSNursing4"">
                    <td id");
            WriteLiteral(@"=""tdMDSNursing4"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNursing4"" onchange=""cbcheck('MDSNursing4')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports Nursing CMG </td>
                    <td id=""tdMDSNursing4Confirm"" class=""confirmed""></td>
                </tr>

                <tr class=""pay pdpm hmoa trerror MDSoverride"" id=""trMDSNTA4"">
                    <td id=""tdMDSNTA4"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSNTA4"" onchange=""cbcheck('MDSNTA4')"" />
                    </td>
                    <td>ARD look-back and Care Plan documentation supports NTA CMG </td>
                    <td id=""tdMDSNTA4Confirm"" class=""confirmed""></td>
                </tr>


            </table>

            <hr style=""border-top: 2px solid black;"" id=""trackhead5"" class=""hidden"" />

            <input type=""button"" class=""btn btn-primary hidden"" value=""Remove Track"" id=""removetrack4"" onclick=""removetrack");
            WriteLiteral(@"(4)"" />


            <div style=""height:20px""></div>

        </div>
    </div>
    <div id=""MDSTherapyWhole"">
        <button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMDSTherapy"">
            <table style=""width:100%"">
                <tr>
                    <td>MDS/Therapy</td>
                    <td style=""text-align:right; padding-right:50px;"" id=""MDSTherapyComplete""></td>
                </tr>
            </table>
        </button>

        <div class=""content yes"" style=""border: 1px solid black"" id=""MDSTherapyContent"">
            <div style=""height:20px""></div>
            <table class=""TableClick content"">


                <tr class=""yes pay pdpm hmoa trerror"" id=""trMDST5Day"">
                    <td id=""tdMDST5Day"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDST5Day"" onchange=""cbcheck('MDST5Day')"" />
                    </td>
                    <td>5-Day PPS - Total Days, Minutes, and Distinct Days verified  </td>
                    <td id=""td");
            WriteLiteral(@"MDST5DayConfirm"" class=""confirmed""></td>
                </tr>


                <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTDischarge"">
                    <td id=""tdMDSTDischarge"" class=""tderror"">
                        <input type=""checkbox"" id=""cbMDSTDischarge"" onchange=""cbcheck('MDSTDischarge'); checkMDST()"" />
                    </td>
                    <td>Discharge PPS MDS - Total Days, Minutes, and Distinct Days verified  </td>
                    <td id=""tdMDSTDischargeConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay pdpm hmoa trerror MDSTheroverride trwarn"" id=""trMDSTST"">
                    <td id=""tdMDSTST"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSTST"" onchange=""ddcheck('MDSTST'); nowarning('MDSTST')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c228957", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c229902", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c230885", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>ST Percent (%) of individual Minutes during stay > 75%</td>
                    <td id=""tdMDSTSTConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay pdpm hmoa trerror MDSTheroverride trwarn"" id=""trMDSTOT"">
                    <td id=""tdMDSTOT"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSTOT"" onchange=""ddcheck('MDSTOT'); nowarning('MDSTOT')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c232380", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c233325", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c234308", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>OT Percent (%) of individual Minutes during stay > 75%</td>
                    <td id=""tdMDSTOTConfirm"" class=""confirmed""></td>
                </tr>

                <tr class=""yes pay pdpm hmoa trerror MDSTheroverride trwarn""  id=""trMDSTPT"">
                    <td id=""tdMDSTPT"" class=""tderror"">
                        <select class=""txtbox"" id=""ddMDSTPT"" onchange=""ddcheck('MDSTPT'); nowarning('MDSTPT')"">
                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c235804", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c236749", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                            ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c237732", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                        </select>
                    </td>
                    <td>PT Percent (%) of individual Minutes during stay > 75%</td>
                    <td id=""tdMDSTPTConfirm"" class=""confirmed""></td>
                </tr>
            </table>
            <div style=""height:20px""></div>
        </div>
    </div>

    <button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMedicalRecords"">
        <table style=""width:100%"">
            <tr>
                <td>Medical Records</td>
                <td style=""text-align:right; padding-right:50px;"" id=""MedicalRecordsComplete""></td>
            </tr>
        </table>
    </button>
    <div class=""content yes"" style=""border: 1px solid black"" id=""MedicalRecordsContent"">
        <div style=""height:20px""></div>
        <table class=""TableClick content"" id=""tblMR"">

            <tr class=""yes pay pdpm hmoa levels trerror"" id=""trMRConsent"">
                <td id=""tdMRConsent"" class=""tderror"">
                    <input type=""text"" id=""txt");
            WriteLiteral("MRConsent\" class=\"txtbox txtdate\" onchange=\"datecheck(\'MRConsent\'); consentcheck()\" onkeyup=\"datecheck(\'MRConsent\'); consentcheck()\" />\n                </td>\n                <td>\n                    Date Consent to Treat Obtained\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c240046", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_31);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdMRConsentConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes pay pdpm hmoa trerror"" id=""trMRInitialDue"">
                <td id=""tdMRInitialDue"" class=""tderror"">
                    <input id=""txtMRInitialDueCert""");
            BeginWriteAttribute("value", " value=\"", 88598, "\"", 88606, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                    <input type=""text"" class=""txtbox txtdate"" id=""txtMRInitialDue"" onchange=""datecheck('MRInitialDue'); checkinitial()"" onkeyup=""datecheck('MRInitialDue'); checkinitial()"" />
                </td>
                <td>Initial Certification - Date Completed (<span id=""initialcerttext"" style=""font-weight:bold""></span>)</td>
                <td id=""tdMRInitialDueConfirm"" class=""confirmed""></td>
            </tr>

");
            WriteLiteral(@"
            <tr class=""mroverride trerror trwarn"" id=""trMRInitialYesNo"">
                <td id=""tdMRInitialYesNo"" class=""tderror"">
                    <select id=""ddMRInitialYesNo"" class=""txtbox"" onchange=""ddcheck('MRInitialYesNo'); nowarning('MRInitialYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c242496", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c243437", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                    </select>
                </td>
                <td>Delayed Physician Certification & Re-Certification Obtained</td>
                <td id=""tdMRInitialYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes pay pdpm hmoa mroverride trerror"" id=""trMR1ReCertDue"">
                <td id=""tdMR1ReCertDue"" class=""tderror"">
                    <input id=""txtMR1ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 90259, "\"", 90267, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                    <input type=""text"" class=""txtbox txtdate"" id=""txtMR1ReCertDue"" onchange=""datecheck('MR1ReCertDue'); check1st()"" onkeyup=""datecheck('MR1ReCertDue'); check1st()"" />
                </td>
                <td>1st Re Certification - Date Completed (<b>Due no later than <span id=""recerttext""></span></b>)</td>
                <td id=""tdMR1ReCertDueConfirm"" class=""confirmed""></td>
            </tr>

");
            WriteLiteral(@"
            <tr class=""mroverride trerror trwarn"" id=""trMR1ReCertYesNo"">
                <td id=""tdMR1ReCertYesNo"" class=""tderror"">
                    <select id=""ddMR1ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR1ReCertYesNo'); nowarning('MR1ReCertYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c245759", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c246700", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                    </select>
                </td>
                <td>Delayed Physician Certification & Re-Certification Obtained</td>
                <td id=""tdMR1ReCertYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR2ReCertDue"">
                <td id=""tdMR2ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 91840, "\"", 91848, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                    <input id=\"txtMR2ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 91902, "\"", 91910, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                    <input type=""text"" class=""txtbox txtdate"" id=""txtMR2ReCertDue"" onchange=""datechecknoerror('MR2ReCertDue'); check2st()"" onkeyup=""datechecknoerror('MR2ReCertDue'); check2st()"" />
                </td>
                <td>2nd Re Certification - Date Completed (<b>Due no later than <span id=""MR2ReCertDueCertText""></span></b>)</td>
                <td id=""tdMR2ReCertDueConfirm"" class=""confirmed""></td>
            </tr>

");
            WriteLiteral(@"
            <tr class=""mroverride trerror trwarn"" id=""trMR2ReCertYesNo"">
                <td id=""tdMR2ReCertYesNo"" class=""tderror"">
                    <select id=""ddMR2ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR2ReCertYesNo'); nowarning('MR2ReCertYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c249166", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c250107", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                    </select>
                </td>
                <td>Delayed Physician Certification & Re-Certification Obtained</td>
                <td id=""tdMR2ReCertYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR3ReCertDue"">
                <td id=""tdMR3ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 93507, "\"", 93515, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                    <input id=\"txtMR3ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 93569, "\"", 93577, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                    <input type=""text"" class=""txtbox txtdate"" id=""txtMR3ReCertDue"" onchange=""datechecknoerror('MR3ReCertDue'); check3st()"" onkeyup=""datechecknoerror('MR3ReCertDue'); check3st()"" />
                </td>
                <td>3rd Re Certification - Date Completed (<b>Due no later than <span id=""MR3ReCertDueCertText""></span></b>)</td>
                <td id=""tdMR3ReCertDueConfirm"" class=""confirmed""></td>
            </tr>

");
            WriteLiteral(@"
            <tr class=""mroverride trerror trwarn"" id=""trMR3ReCertYesNo"">
                <td id=""tdMR3ReCertYesNo"" class=""tderror"">
                    <select id=""ddMR3ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR3ReCertYesNo'); nowarning('MR3ReCertYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c252573", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c253514", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                    </select>
                </td>
                <td>Delayed Physician Certification & Re-Certification Obtained</td>
                <td id=""tdMR3ReCertYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR4ReCertDue"">
                <td id=""tdMR4ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 95174, "\"", 95182, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                    <input id=\"txtMR4ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 95236, "\"", 95244, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                    <input type=""text"" class=""txtbox txtdate"" id=""txtMR4ReCertDue"" onchange=""datechecknoerror('MR4ReCertDue'); check4st()"" onkeyup=""datechecknoerror('MR4ReCertDue'); check4st()"" />
                </td>
                <td>4th Re Certification - Date Completed (<b>Due no later than <span id=""MR4ReCertDueCertText""></span></b>)</td>
                <td id=""tdMR4ReCertDueConfirm"" class=""confirmed""></td>
            </tr>

");
            WriteLiteral(@"
            <tr class=""mroverride trerror trwarn"" id=""trMR4ReCertYesNo"">
                <td id=""tdMR4ReCertYesNo"" class=""tderror"">
                    <select id=""ddMR4ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR4ReCertYesNo'); nowarning('MR4ReCertYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c255980", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c256921", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                    </select>
                </td>
                <td>Delayed Physician Certification & Re-Certification Obtained</td>
                <td id=""tdMR4ReCertYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes pay pdpm hmoa mroverride"" id=""trMR5ReCertDue"">
                <td id=""tdMR5ReCertDue""");
            BeginWriteAttribute("class", " class=\"", 96840, "\"", 96848, 0);
            EndWriteAttribute();
            WriteLiteral(">\n                    <input id=\"txtMR5ReCertDueCert\"");
            BeginWriteAttribute("value", " value=\"", 96902, "\"", 96910, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                    <input type=""text"" class=""txtbox txtdate"" id=""txtMR5ReCertDue"" onchange=""datechecknoerror('MR5ReCertDue'); check5st()"" onkeyup=""datechecknoerror('MR5ReCertDue'); check5st()"" />
                </td>
                <td>5th Re Certification - Date Completed (<b>Due no later than <span id=""MR5ReCertDueCertText""></span></b>)</td>
                <td id=""tdMR5ReCertDueConfirm"" class=""confirmed""></td>
            </tr>

");
            WriteLiteral(@"
            <tr class=""mroverride trerror trwarn"" id=""trMR5ReCertYesNo"">
                <td id=""tdMR5ReCertYesNo"" class=""tderror"">
                    <select id=""ddMR5ReCertYesNo"" class=""txtbox"" onchange=""ddcheck('MR5ReCertYesNo'); nowarning('MR5ReCertYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c259386", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c260327", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

                    </select>
                </td>
                <td>Delayed Physician Certification & Re-Certification Obtained</td>
                <td id=""tdMR5ReCertYesNoConfirm"" class=""confirmed""></td>
            </tr>




            <tr class=""yes pay pdpm hmoa trerror"" id=""trMRPrimary"">
                <td id=""tdMRPrimary"" class=""tderror"">
                    <input type=""checkbox"" id=""cbMRPrimary"" onchange=""cbcheck('MRPrimary')"" />
                </td>
                <td>Primary Dx in I0020B matches Primary Dx on UB04</td>
                <td id=""tdMRPrimaryConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa trerror"" id=""trMROther"">
                <td id=""tdMROther"" class=""tderror"">
                    <input type=""checkbox"" id=""cbMROther"" onchange=""cbcheck('MROther')"" />
                </td>
                <td>Other ICD-10 Codes are present to support skilled services on UB04</td>
                <td id=""tdMROtherConfirm"" class=""confirmed""></td>
  ");
            WriteLiteral(@"          </tr>

            <tr class=""yes pay levels trerror"" id=""trMROtherLevel"">
                <td id=""tdMROtherLevel"" class=""tderror"">
                    <input type=""checkbox"" id=""cbMROtherLevel"" onchange=""cbcheck('MROtherLevel')"" />
                </td>
                <td>ICD-10 Codes are present to support skilled services on UB04</td>
                <td id=""tdMROtherLevelConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels mcb trerror""  id=""trMRTherapy"">
                <td id=""tdMRTherapy"" class=""tderror"">
                    <input type=""checkbox"" id=""cbMRTherapy"" onchange=""cbcheck('MRTherapy')"" />
                </td>
                <td>
                    Therapy Medical and Treatment Diagnoses are present to support skilled services on UB04
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c263250", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_32);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdMRTherapyConfirm"" class=""confirmed""></td>
            </tr>

        </table>
        <div style=""height:20px""></div>
    </div>

    <button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnTherapy"">
        <table style=""width:100%"">
            <tr>
                <td>Therapy/Medical Records</td>
                <td style=""text-align:right; padding-right:50px;"" id=""TherapyComplete""></td>
            </tr>
        </table>
    </button>
    <div class=""content yes"" style=""border: 1px solid black"" id=""TherapyContent"">
        <div style=""height:20px""></div>
        <table class=""TableClick content"">

            <tr class=""yes"" id=""trPTEvalDate"">
                <td id=""tdPTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 100905, "\"", 100913, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDate"" onchange=""datechecknoerror('PTEvalDate'); checkevaldate('PT') "" onkeyup=""datechecknoerror('PTEvalDate'); checkevaldate('PT')"" />
                </td>
                <td>PT Evaluation Date</td>
                <td id=""tdPTEvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPTEvalOnly"">
                <td id=""tdPTEvalOnly"">
                    <input type=""checkbox"" id=""cbPTEvalOnly"" onchange=""cbchecknoerror('PTEvalOnly'); evalonly('PT')"" />
                </td>
                <td>PT Evaluation Only</td>
                <td id=""tdPTEvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trPTEvalDateSigned"">
                <td id=""tdPTEvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDateSigned"" />
                </td>
                <td>
             ");
            WriteLiteral("       PT Evaluation - Date MD Signed Order <b>(Due by <span id=\"PTEvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c266610", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTEvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTEvalDateSignedYesNo"">
                <td id=""tdPTEvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddPTEvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTEvalDateSignedYesNo'); nowarning('PTEvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c268274", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c269215", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPTClarDate"">
                <td id=""tdPTClarDate""");
            BeginWriteAttribute("class", " class=\"", 103032, "\"", 103040, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate"" onchange=""datecheck('PTClarDate'); checkduedate('PT' , 'ClarDate')"" onkeyup=""datecheck('PTClarDate'); checkduedate('PT' , 'ClarDate')"" />
                </td>
                <td>
                    PT Clarification Order Date <b>(Due by <span id=""PTClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c271045", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDateYesNo"">
                <td id=""tdPTClarDateYesNo"" class=""tderror"">
                    <select id=""ddPTClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDateYesNo'); nowarning('PTClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c272673", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c273614", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPTClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPTClarDateSigned"">
                <td id=""tdPTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 104337, "\"", 104345, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDateSigned"" onchange=""datechecknoerror('PTClarDateSigned'); checkClarDateSigned('PT')"" onkeyup=""datechecknoerror('PTClarDateSigned'); checkClarDateSigned('PT')"" />
                </td>
                <td>
                    PT Clarification - Date MD Signed Order <b>(Due by<span id=""PTClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c275478", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDateSignedYesNo"">
                <td id=""tdPTClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddPTClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDateSignedYesNo'); nowarning('PTClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c277142", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c278083", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trPTClarDate1"">
                <td id=""tdPTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 105743, "\"", 105751, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate1"" onchange=""datechecknoerror('PTClarDate1'); checkClarDate1('PT')"" onkeyup=""datechecknoerror('PTClarDate1'); checkClarDate1('PT')"" />
                </td>
                <td>
                    PT Reclarification #1 Date <b>(Due by <span id=""PTClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c279913", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDate1YesNo"">
                <td id=""tdPTClarDate1YesNo"" class=""tderror"">
                    <select id=""ddPTClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate1YesNo'); nowarning('PTClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c281547", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c282488", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPTClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPTClarDate1Signed"">
                <td id=""tdPTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 107059, "\"", 107067, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate1Signed"" onchange=""datechecknoerror('PTClarDate1Signed'); checkClarDate1Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate1Signed'); checkClarDate1Signed('PT')"" />
                </td>
                <td>
                    PT Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""PTClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c284367", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDate1SignedYesNo"">
                <td id=""tdPTClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddPTClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate1SignedYesNo'); nowarning('PTClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c286037", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c286978", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPTClarDate2"">
                <td id=""tdPTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 108483, "\"", 108491, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate2"" onchange=""datechecknoerror('PTClarDate2'); checkClarDate2('PT')"" onkeyup=""datechecknoerror('PTClarDate2'); checkClarDate2('PT')"" />
                </td>
                <td>
                    PT Reclarification #2 Date <b>(Due by <span id=""PTClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c288808", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDate2YesNo"">
                <td id=""tdPTClarDate2YesNo"" class=""tderror"">
                    <select id=""ddPTClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate2YesNo'); nowarning('PTClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c290442", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c291383", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPTClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPTClarDate2Signed"">
                <td id=""tdPTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 109799, "\"", 109807, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate2Signed"" onchange=""datechecknoerror('PTClarDate2Signed'); checkClarDate2Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate2Signed'); checkClarDate2Signed('PT')"" />
                </td>
                <td>
                    PT Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""PTClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c293262", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDate2SignedYesNo"">
                <td id=""tdPTClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddPTClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate2SignedYesNo'); nowarning('PTClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c294932", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c295873", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPTClarDate3"">
                <td id=""tdPTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 111222, "\"", 111230, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate3"" onchange=""datechecknoerror('PTClarDate3'); checkClarDate3('PT')"" onkeyup=""datechecknoerror('PTClarDate3'); checkClarDate3('PT')"" />
                </td>
                <td>
                    PT Reclarification #3 Date <b>(Due by <span id=""PTClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c297702", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDate3YesNo"">
                <td id=""tdPTClarDate3YesNo"" class=""tderror"">
                    <select id=""ddPTClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate3YesNo'); nowarning('PTClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c299336", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c300277", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPTClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPTClarDate3Signed"">
                <td id=""tdPTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 112538, "\"", 112546, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate3Signed"" onchange=""datechecknoerror('PTClarDate3Signed'); checkClarDate3Signed('PT')"" onkeyup=""datechecknoerror('PTClarDate3Signed'); checkClarDate3Signed('PT')"" />
                </td>
                <td>
                    PT Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""PTClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c302156", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPTClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPTClarDate3SignedYesNo"">
                <td id=""tdPTClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddPTClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PTClarDate3SignedYesNo'); nowarning('PTClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c303826", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c304767", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPTDischargeDate"">
                <td id=""tdPTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 113970, "\"", 113978, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPTDischargeDate"" onchange=""datechecknoerror('PTDischargeDate'); therdischange('PT');"" onkeyup=""datechecknoerror('PTDischargeDate'); therdischange('PT');"" />
                </td>
                <td>
                    PT Discharge Date
                </td>
                <td id=""tdPTDischargeDateConfirm"" class=""confirmed""></td>
            </tr>
            <tr>
                <td colspan=""3"" id=""tdPT2"">
                    <input type=""button"" class=""btn btn-primary"" value=""Add Another PT"" onclick=""addther('PT2')"" id=""addPT2"" />
                </td>
            </tr>
        </table>



        <table class=""TableClick content therapyvisable"" id=""PT2"">
            <tr>
                <td colspan=""3"">
                    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove PT"" onclick=""removether('PT2')"" id=""removePT2"" />
                </td>
            </tr>

            <tr class=""yes"" id=""trPT2EvalDate"">
          ");
            WriteLiteral("      <td id=\"tdPT2EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 115031, "\"", 115039, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2EvalDate"" onchange=""datechecknoerror('PT2EvalDate'); checkevaldate('PT2') "" onkeyup=""datechecknoerror('PT2EvalDate'); checkevaldate('PT2')"" />
                </td>
                <td>PT2 Evaluation Date</td>
                <td id=""tdPT2EvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPT2EvalOnly"">
                <td id=""tdPT2EvalOnly"">
                    <input type=""checkbox"" id=""cbPT2EvalOnly"" onchange=""cbchecknoerror('PT2EvalOnly'); evalonly('PT2')"" />
                </td>
                <td>PT2 Evaluation Only</td>
                <td id=""tdPT2EvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trPT2EvalDateSigned"">
                <td id=""tdPT2EvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2EvalDateSigned"" />
                </td>
                <");
            WriteLiteral("td>\n                    PT2 Evaluation - Date MD Signed Order <b>(Due by <span id=\"PT2EvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c308737", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2EvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2EvalDateSignedYesNo"">
                <td id=""tdPT2EvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddPT2EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2EvalDateSignedYesNo'); nowarning('PT2EvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c310407", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c311348", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPT2ClarDate"">
                <td id=""tdPT2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 117186, "\"", 117194, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate"" onchange=""datecheck('PT2ClarDate'); checkduedate('PT2' , 'ClarDate')"" onkeyup=""datecheck('PT2ClarDate'); checkduedate('PT2' , 'ClarDate')"" />
                </td>
                <td>
                    PT2 Clarification Order Date <b>(Due by <span id=""PT2ClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c313188", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDateYesNo"">
                <td id=""tdPT2ClarDateYesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDateYesNo'); nowarning('PT2ClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c314822", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c315763", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT2ClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT2ClarDateSigned"">
                <td id=""tdPT2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 118507, "\"", 118515, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDateSigned"" onchange=""datechecknoerror('PT2ClarDateSigned'); checkClarDateSigned('PT2')"" onkeyup=""datechecknoerror('PT2ClarDateSigned'); checkClarDateSigned('PT2')"" />
                </td>
                <td>
                    PT2 Clarification - Date MD Signed Order <b>(Due by<span id=""PT2ClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c317637", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDateSignedYesNo"">
                <td id=""tdPT2ClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDateSignedYesNo'); nowarning('PT2ClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c319307", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c320248", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trPT2ClarDate1"">
                <td id=""tdPT2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 119929, "\"", 119937, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate1"" onchange=""datechecknoerror('PT2ClarDate1'); checkClarDate1('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate1'); checkClarDate1('PT2')"" />
                </td>
                <td>
                    PT2 Reclarification #1 Date <b>(Due by <span id=""PT2ClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c322088", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDate1YesNo"">
                <td id=""tdPT2ClarDate1YesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate1YesNo'); nowarning('PT2ClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c323728", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c324669", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT2ClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT2ClarDate1Signed"">
                <td id=""tdPT2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 121261, "\"", 121269, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate1Signed"" onchange=""datechecknoerror('PT2ClarDate1Signed'); checkClarDate1Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate1Signed'); checkClarDate1Signed('PT2')"" />
                </td>
                <td>
                    PT2 Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""PT2ClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c326558", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDate1SignedYesNo"">
                <td id=""tdPT2ClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate1SignedYesNo'); nowarning('PT2ClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c328234", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c329175", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT2ClarDate2"">
                <td id=""tdPT2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 122701, "\"", 122709, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate2"" onchange=""datechecknoerror('PT2ClarDate2'); checkClarDate2('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate2'); checkClarDate2('PT2')"" />
                </td>
                <td>
                    PT2 Reclarification #2 Date <b>(Due by <span id=""PT2ClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c331015", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDate2YesNo"">
                <td id=""tdPT2ClarDate2YesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate2YesNo'); nowarning('PT2ClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c332655", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c333596", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT2ClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT2ClarDate2Signed"">
                <td id=""tdPT2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 124033, "\"", 124041, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate2Signed"" onchange=""datechecknoerror('PT2ClarDate2Signed'); checkClarDate2Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate2Signed'); checkClarDate2Signed('PT2')"" />
                </td>
                <td>
                    PT2 Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""PT2ClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c335485", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDate2SignedYesNo"">
                <td id=""tdPT2ClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate2SignedYesNo'); nowarning('PT2ClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c337161", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c338102", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPT2ClarDate3"">
                <td id=""tdPT2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 125472, "\"", 125480, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate3"" onchange=""datechecknoerror('PT2ClarDate3'); checkClarDate3('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate3'); checkClarDate3('PT2')"" />
                </td>
                <td>
                    PT2 Reclarification #3 Date <b>(Due by <span id=""PT2ClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c339941", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDate3YesNo"">
                <td id=""tdPT2ClarDate3YesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate3YesNo'); nowarning('PT2ClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c341581", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c342522", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT2ClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT2ClarDate3Signed"">
                <td id=""tdPT2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 126804, "\"", 126812, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2ClarDate3Signed"" onchange=""datechecknoerror('PT2ClarDate3Signed'); checkClarDate3Signed('PT2')"" onkeyup=""datechecknoerror('PT2ClarDate3Signed'); checkClarDate3Signed('PT2')"" />
                </td>
                <td>
                    PT2 Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""PT2ClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c344411", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT2ClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT2ClarDate3SignedYesNo"">
                <td id=""tdPT2ClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddPT2ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT2ClarDate3SignedYesNo'); nowarning('PT2ClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c346087", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c347028", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT2DischargeDate"">
                <td id=""tdPT2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 128252, "\"", 128260, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT2DischargeDate"" onchange=""datechecknoerror('PT2DischargeDate'); therdischange('PT2')"" onkeyup=""datechecknoerror('PT2DischargeDate'); therdischange('PT2')"" />
                </td>
                <td>
                    PT2 Discharge Date
                </td>
                <td id=""tdPT2DischargeDateConfirm"" class=""confirmed""></td>
            </tr>
            <tr>
                <td colspan=""3"" id=""tdPT3"">
                    <input type=""button"" class=""btn btn-primary"" value=""Add Another PT"" onclick=""addther('PT3')"" id=""addPT3"" />
                </td>
            </tr>

        </table>




        <table class=""TableClick content therapyvisable"" id=""PT3"">
            <tr>
                <td colspan=""3"">
                    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove PT"" onclick=""removether('PT3')"" id=""removePT3"" />
                </td>
            </tr>

            <tr class=""yes"" id=""trPT3EvalDate"">
   ");
            WriteLiteral("             <td id=\"tdPT3EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 129320, "\"", 129328, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3EvalDate"" onchange=""datechecknoerror('PT3EvalDate'); checkevaldate('PT3') "" onkeyup=""datechecknoerror('PT3EvalDate'); checkevaldate('PT3')"" />
                </td>
                <td>PT3 Evaluation Date</td>
                <td id=""tdPT3EvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPT3EvalOnly"">
                <td id=""tdPT3EvalOnly"">
                    <input type=""checkbox"" id=""cbPT3EvalOnly"" onchange=""cbchecknoerror('PT3EvalOnly'); evalonly('PT3')"" />
                </td>
                <td>PT3 Evaluation Only</td>
                <td id=""tdPT3EvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trPT3EvalDateSigned"">
                <td id=""tdPT3EvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3EvalDateSigned"" />
                </td>
                <");
            WriteLiteral("td>\n                    PT3 Evaluation - Date MD Signed Order <b>(Due by <span id=\"PT3EvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c351008", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3EvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3EvalDateSignedYesNo"">
                <td id=""tdPT3EvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddPT3EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3EvalDateSignedYesNo'); nowarning('PT3EvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c352678", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c353619", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPT3ClarDate"">
                <td id=""tdPT3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 131475, "\"", 131483, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate"" onchange=""datecheck('PT3ClarDate'); checkduedate('PT3' , 'ClarDate')"" onkeyup=""datecheck('PT3ClarDate'); checkduedate('PT3' , 'ClarDate')"" />
                </td>
                <td>
                    PT3 Clarification Order Date <b>(Due by <span id=""PT3ClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c355459", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDateYesNo"">
                <td id=""tdPT3ClarDateYesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDateYesNo'); nowarning('PT3ClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c357093", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c358034", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT3ClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT3ClarDateSigned"">
                <td id=""tdPT3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 132796, "\"", 132804, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDateSigned"" onchange=""datechecknoerror('PT3ClarDateSigned'); checkClarDateSigned('PT3')"" onkeyup=""datechecknoerror('PT3ClarDateSigned'); checkClarDateSigned('PT3')"" />
                </td>
                <td>
                    PT3 Clarification - Date MD Signed Order <b>(Due by<span id=""PT3ClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c359908", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDateSignedYesNo"">
                <td id=""tdPT3ClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDateSignedYesNo'); nowarning('PT3ClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c361578", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c362519", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trPT3ClarDate1"">
                <td id=""tdPT3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 134218, "\"", 134226, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate1"" onchange=""datechecknoerror('PT3ClarDate1'); checkClarDate1('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate1'); checkClarDate1('PT3')"" />
                </td>
                <td>
                    PT3 Reclarification #1 Date <b>(Due by <span id=""PT3ClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c364359", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDate1YesNo"">
                <td id=""tdPT3ClarDate1YesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate1YesNo'); nowarning('PT3ClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c365999", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c366940", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT3ClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT3ClarDate1Signed"">
                <td id=""tdPT3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 135550, "\"", 135558, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate1Signed"" onchange=""datechecknoerror('PT3ClarDate1Signed'); checkClarDate1Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate1Signed'); checkClarDate1Signed('PT3')"" />
                </td>
                <td>
                    PT3 Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""PT3ClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c368829", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDate1SignedYesNo"">
                <td id=""tdPT3ClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate1SignedYesNo'); nowarning('PT3ClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c370505", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c371446", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT3ClarDate2"">
                <td id=""tdPT3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 136990, "\"", 136998, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate2"" onchange=""datechecknoerror('PT3ClarDate2'); checkClarDate2('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate2'); checkClarDate2('PT3')"" />
                </td>
                <td>
                    PT3 Reclarification #2 Date <b>(Due by <span id=""PT3ClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c373286", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDate2YesNo"">
                <td id=""tdPT3ClarDate2YesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate2YesNo'); nowarning('PT3ClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c374926", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c375867", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT3ClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT3ClarDate2Signed"">
                <td id=""tdPT3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 138322, "\"", 138330, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate2Signed"" onchange=""datechecknoerror('PT3ClarDate2Signed'); checkClarDate2Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate2Signed'); checkClarDate2Signed('PT3')"" />
                </td>
                <td>
                    PT3 Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""PT3ClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c377756", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDate2SignedYesNo"">
                <td id=""tdPT3ClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate2SignedYesNo'); nowarning('PT3ClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c379432", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c380373", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trPT3ClarDate3"">
                <td id=""tdPT3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 139761, "\"", 139769, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate3"" onchange=""datechecknoerror('PT3ClarDate3'); checkClarDate3('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate3'); checkClarDate3('PT3')"" />
                </td>
                <td>
                    PT3 Reclarification #3 Date <b>(Due by <span id=""PT3ClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c382212", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDate3YesNo"">
                <td id=""tdPT3ClarDate3YesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate3YesNo'); nowarning('PT3ClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c383852", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c384793", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdPT3ClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT3ClarDate3Signed"">
                <td id=""tdPT3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 141093, "\"", 141101, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3ClarDate3Signed"" onchange=""datechecknoerror('PT3ClarDate3Signed'); checkClarDate3Signed('PT3')"" onkeyup=""datechecknoerror('PT3ClarDate3Signed'); checkClarDate3Signed('PT3')"" />
                </td>
                <td>
                    PT3 Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""PT3ClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c386682", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdPT3ClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trPT3ClarDate3SignedYesNo"">
                <td id=""tdPT3ClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddPT3ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('PT3ClarDate3SignedYesNo'); nowarning('PT3ClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c388358", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c389299", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdPT3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trPT3DischargeDate"">
                <td id=""tdPT3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 142541, "\"", 142549, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtPT3DischargeDate"" onchange=""datechecknoerror('PT3DischargeDate'); therdischange('PT3')"" onkeyup=""datechecknoerror('PT3DischargeDate'); therdischange('PT3')"" />
                </td>
                <td>
                    PT3 Discharge Date
                </td>
                <td id=""tdPT3DischargeDateConfirm"" class=""confirmed""></td>
            </tr>

        </table>



        <hr style=""border-top: 2px solid black"" />
        <table class=""TableClick content"">

            <tr class=""yes"" id=""trOTEvalDate"">
                <td id=""tdOTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 143178, "\"", 143186, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTEvalDate"" onchange=""datechecknoerror('OTEvalDate'); checkevaldate('OT') "" onkeyup=""datechecknoerror('OTEvalDate'); checkevaldate('OT')"" />
                </td>
                <td>OT Evaluation Date</td>
                <td id=""tdOTEvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOTEvalOnly"">
                <td id=""tdOTEvalOnly"">
                    <input type=""checkbox"" id=""cbOTEvalOnly"" onchange=""cbchecknoerror('OTEvalOnly'); evalonly('OT')"" />
                </td>
                <td>OT Evaluation Only</td>
                <td id=""tdOTEvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trOTEvalDateSigned"">
                <td id=""tdOTEvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTEvalDateSigned"" />
                </td>
                <td>
             ");
            WriteLiteral("       OT Evaluation - Date MD Signed Order <b>(Due by <span id=\"OTEvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c392771", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTEvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTEvalDateSignedYesNo"">
                <td id=""tdOTEvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddOTEvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTEvalDateSignedYesNo'); nowarning('OTEvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c394435", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c395376", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOTClarDate"">
                <td id=""tdOTClarDate""");
            BeginWriteAttribute("class", " class=\"", 145305, "\"", 145313, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate"" onchange=""datecheck('OTClarDate'); checkduedate('OT' , 'ClarDate')"" onkeyup=""datecheck('OTClarDate'); checkduedate('OT' , 'ClarDate')"" />
                </td>
                <td>
                    OT Clarification Order Date <b>(Due by <span id=""OTClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c397206", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDateYesNo"">
                <td id=""tdOTClarDateYesNo"" class=""tderror"">
                    <select id=""ddOTClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDateYesNo'); nowarning('OTClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c398834", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c399775", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOTClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOTClarDateSigned"">
                <td id=""tdOTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 146610, "\"", 146618, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDateSigned"" onchange=""datechecknoerror('OTClarDateSigned'); checkClarDateSigned('OT')"" onkeyup=""datechecknoerror('OTClarDateSigned'); checkClarDateSigned('OT')"" />
                </td>
                <td>
                    OT Clarification - Date MD Signed Order <b>(Due by<span id=""OTClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c401639", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDateSignedYesNo"">
                <td id=""tdOTClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddOTClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDateSignedYesNo'); nowarning('OTClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c403303", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c404244", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trOTClarDate1"">
                <td id=""tdOTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 148016, "\"", 148024, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate1"" onchange=""datechecknoerror('OTClarDate1'); checkClarDate1('OT')"" onkeyup=""datechecknoerror('OTClarDate1'); checkClarDate1('OT')"" />
                </td>
                <td>
                    OT Reclarification #1 Date <b>(Due by <span id=""OTClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c406074", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDate1YesNo"">
                <td id=""tdOTClarDate1YesNo"" class=""tderror"">
                    <select id=""ddOTClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate1YesNo'); nowarning('OTClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c407708", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c408649", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOTClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOTClarDate1Signed"">
                <td id=""tdOTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 149332, "\"", 149340, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate1Signed"" onchange=""datechecknoerror('OTClarDate1Signed'); checkClarDate1Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate1Signed'); checkClarDate1Signed('OT')"" />
                </td>
                <td>
                    OT Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""OTClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c410528", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDate1SignedYesNo"">
                <td id=""tdOTClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddOTClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate1SignedYesNo'); nowarning('OTClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c412198", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c413139", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOTClarDate2"">
                <td id=""tdOTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 150756, "\"", 150764, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate2"" onchange=""datechecknoerror('OTClarDate2'); checkClarDate2('OT')"" onkeyup=""datechecknoerror('OTClarDate2'); checkClarDate2('OT')"" />
                </td>
                <td>
                    OT Reclarification #2 Date <b>(Due by <span id=""OTClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c414969", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDate2YesNo"">
                <td id=""tdOTClarDate2YesNo"" class=""tderror"">
                    <select id=""ddOTClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate2YesNo'); nowarning('OTClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c416603", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c417544", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOTClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOTClarDate2Signed"">
                <td id=""tdOTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 152072, "\"", 152080, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate2Signed"" onchange=""datechecknoerror('OTClarDate2Signed'); checkClarDate2Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate2Signed'); checkClarDate2Signed('OT')"" />
                </td>
                <td>
                    OT Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""OTClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c419423", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDate2SignedYesNo"">
                <td id=""tdOTClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddOTClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate2SignedYesNo'); nowarning('OTClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c421093", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c422034", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOTClarDate3"">
                <td id=""tdOTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 153495, "\"", 153503, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate3"" onchange=""datechecknoerror('OTClarDate3'); checkClarDate3('OT')"" onkeyup=""datechecknoerror('OTClarDate3'); checkClarDate3('OT')"" />
                </td>
                <td>
                    OT Reclarification #3 Date <b>(Due by <span id=""OTClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c423863", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDate3YesNo"">
                <td id=""tdOTClarDate3YesNo"" class=""tderror"">
                    <select id=""ddOTClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate3YesNo'); nowarning('OTClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c425497", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c426438", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOTClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOTClarDate3Signed"">
                <td id=""tdOTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 154811, "\"", 154819, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTClarDate3Signed"" onchange=""datechecknoerror('OTClarDate3Signed'); checkClarDate3Signed('OT')"" onkeyup=""datechecknoerror('OTClarDate3Signed'); checkClarDate3Signed('OT')"" />
                </td>
                <td>
                    OT Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""OTClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c428317", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOTClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOTClarDate3SignedYesNo"">
                <td id=""tdOTClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddOTClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OTClarDate3SignedYesNo'); nowarning('OTClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c429987", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c430928", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOTDischargeDate"">
                <td id=""tdOTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 156243, "\"", 156251, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOTDischargeDate"" onchange=""datechecknoerror('OTDischargeDate'); therdischange('OT')"" onkeyup=""datechecknoerror('OTDischargeDate'); therdischange('OT')"" />
                </td>
                <td>
                    OT Discharge Date
                </td>
                <td id=""tdOTDischargeDateConfirm"" class=""confirmed""></td>
            </tr>
            <tr>
                <td colspan=""3"" id=""tdOT2"">
                    <input type=""button"" class=""btn btn-primary"" value=""Add Another OT"" onclick=""addther('OT2')"" id=""addOT2"" />
                </td>
            </tr>
        </table>



        <table class=""TableClick content therapyvisable"" id=""OT2"">
            <tr>
                <td colspan=""3"">
                    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove OT"" onclick=""removether('OT2')"" id=""removeOT2"" />
                </td>
            </tr>

            <tr class=""yes"" id=""trOT2EvalDate"">
            ");
            WriteLiteral("    <td id=\"tdOT2EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 157302, "\"", 157310, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2EvalDate"" onchange=""datechecknoerror('OT2EvalDate'); checkevaldate('OT2') "" onkeyup=""datechecknoerror('OT2EvalDate'); checkevaldate('OT2')"" />
                </td>
                <td>OT2 Evaluation Date</td>
                <td id=""tdOT2EvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOT2EvalOnly"">
                <td id=""tdOT2EvalOnly"">
                    <input type=""checkbox"" id=""cbOT2EvalOnly"" onchange=""cbchecknoerror('OT2EvalOnly'); evalonly('OT2')"" />
                </td>
                <td>OT2 Evaluation Only</td>
                <td id=""tdOT2EvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trOT2EvalDateSigned"">
                <td id=""tdOT2EvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2EvalDateSigned"" />
                </td>
                <");
            WriteLiteral("td>\n                    OT2 Evaluation - Date MD Signed Order <b>(Due by <span id=\"OT2EvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c434896", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2EvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2EvalDateSignedYesNo"">
                <td id=""tdOT2EvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddOT2EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2EvalDateSignedYesNo'); nowarning('OT2EvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c436566", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c437507", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOT2ClarDate"">
                <td id=""tdOT2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 159457, "\"", 159465, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate"" onchange=""datecheck('OT2ClarDate'); checkduedate('OT2' , 'ClarDate')"" onkeyup=""datecheck('OT2ClarDate'); checkduedate('OT2' , 'ClarDate')"" />
                </td>
                <td>
                    OT2 Clarification Order Date <b>(Due by <span id=""OT2ClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c439347", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDateYesNo"">
                <td id=""tdOT2ClarDateYesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDateYesNo'); nowarning('OT2ClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c440981", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c441922", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT2ClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT2ClarDateSigned"">
                <td id=""tdOT2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 160778, "\"", 160786, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDateSigned"" onchange=""datechecknoerror('OT2ClarDateSigned'); checkClarDateSigned('OT2')"" onkeyup=""datechecknoerror('OT2ClarDateSigned'); checkClarDateSigned('OT2')"" />
                </td>
                <td>
                    OT2 Clarification - Date MD Signed Order <b>(Due by<span id=""OT2ClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c443796", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDateSignedYesNo"">
                <td id=""tdOT2ClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDateSignedYesNo'); nowarning('OT2ClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c445466", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c446407", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trOT2ClarDate1"">
                <td id=""tdOT2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 162200, "\"", 162208, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate1"" onchange=""datechecknoerror('OT2ClarDate1'); checkClarDate1('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate1'); checkClarDate1('OT2')"" />
                </td>
                <td>
                    OT2 Reclarification #1 Date <b>(Due by <span id=""OT2ClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c448247", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDate1YesNo"">
                <td id=""tdOT2ClarDate1YesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate1YesNo'); nowarning('OT2ClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c449887", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c450828", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT2ClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT2ClarDate1Signed"">
                <td id=""tdOT2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 163532, "\"", 163540, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate1Signed"" onchange=""datechecknoerror('OT2ClarDate1Signed'); checkClarDate1Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate1Signed'); checkClarDate1Signed('OT2')"" />
                </td>
                <td>
                    OT2 Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""OT2ClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c452717", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDate1SignedYesNo"">
                <td id=""tdOT2ClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate1SignedYesNo'); nowarning('OT2ClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c454393", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c455334", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT2ClarDate2"">
                <td id=""tdOT2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 164972, "\"", 164980, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate2"" onchange=""datechecknoerror('OT2ClarDate2'); checkClarDate2('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate2'); checkClarDate2('OT2')"" />
                </td>
                <td>
                    OT2 Reclarification #2 Date <b>(Due by <span id=""OT2ClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c457174", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDate2YesNo"">
                <td id=""tdOT2ClarDate2YesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate2YesNo'); nowarning('OT2ClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c458814", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c459755", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT2ClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT2ClarDate2Signed"">
                <td id=""tdOT2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 166304, "\"", 166312, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate2Signed"" onchange=""datechecknoerror('OT2ClarDate2Signed'); checkClarDate2Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate2Signed'); checkClarDate2Signed('OT2')"" />
                </td>
                <td>
                    OT2 Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""OT2ClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c461644", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDate2SignedYesNo"">
                <td id=""tdOT2ClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate2SignedYesNo'); nowarning('OT2ClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c463320", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c464261", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOT2ClarDate3"">
                <td id=""tdOT2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 167743, "\"", 167751, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate3"" onchange=""datechecknoerror('OT2ClarDate3'); checkClarDate3('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate3'); checkClarDate3('OT2')"" />
                </td>
                <td>
                    OT2 Reclarification #3 Date <b>(Due by <span id=""OT2ClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c466100", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDate3YesNo"">
                <td id=""tdOT2ClarDate3YesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate3YesNo'); nowarning('OT2ClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c467740", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c468681", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT2ClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT2ClarDate3Signed"">
                <td id=""tdOT2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 169075, "\"", 169083, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2ClarDate3Signed"" onchange=""datechecknoerror('OT2ClarDate3Signed'); checkClarDate3Signed('OT2')"" onkeyup=""datechecknoerror('OT2ClarDate3Signed'); checkClarDate3Signed('OT2')"" />
                </td>
                <td>
                    OT2 Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""OT2ClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c470570", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT2ClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT2ClarDate3SignedYesNo"">
                <td id=""tdOT2ClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddOT2ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT2ClarDate3SignedYesNo'); nowarning('OT2ClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c472246", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c473187", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT2DischargeDate"">
                <td id=""tdOT2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 170523, "\"", 170531, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT2DischargeDate"" onchange=""datechecknoerror('OT2DischargeDate'); therdischange('OT2')"" onkeyup=""datechecknoerror('OT2DischargeDate'); therdischange('OT2')"" />
                </td>
                <td>
                    OT2 Discharge Date
                </td>
                <td id=""tdOT2DischargeDateConfirm"" class=""confirmed""></td>
            </tr>
            <tr>
                <td colspan=""3"" id=""tdOT3"">
                    <input type=""button"" class=""btn btn-primary"" value=""Add Another OT"" onclick=""addther('OT3')"" id=""addOT3"" />
                </td>
            </tr>

        </table>




        <table class=""TableClick content therapyvisable"" id=""OT3"">
            <tr>
                <td colspan=""3"">
                    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove OT"" onclick=""removether('OT3')"" id=""removeOT3"" />
                </td>
            </tr>

            <tr class=""yes"" id=""trOT3EvalDate"">
   ");
            WriteLiteral("             <td id=\"tdOT3EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 171591, "\"", 171599, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3EvalDate"" onchange=""datechecknoerror('OT3EvalDate'); checkevaldate('OT3') "" onkeyup=""datechecknoerror('OT3EvalDate'); checkevaldate('OT3')"" />
                </td>
                <td>OT3 Evaluation Date</td>
                <td id=""tdOT3EvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOT3EvalOnly"">
                <td id=""tdOT3EvalOnly"">
                    <input type=""checkbox"" id=""cbOT3EvalOnly"" onchange=""cbchecknoerror('OT3EvalOnly'); evalonly('OT3')"" />
                </td>
                <td>OT3 Evaluation Only</td>
                <td id=""tdOT3EvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trOT3EvalDateSigned"">
                <td id=""tdOT3EvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3EvalDateSigned"" />
                </td>
                <");
            WriteLiteral("td>\n                    OT3 Evaluation - Date MD Signed Order <b>(Due by <span id=\"OT3EvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c477167", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3EvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3EvalDateSignedYesNo"">
                <td id=""tdOT3EvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddOT3EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3EvalDateSignedYesNo'); nowarning('OT3EvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c478837", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c479778", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOT3ClarDate"">
                <td id=""tdOT3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 173746, "\"", 173754, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate"" onchange=""datecheck('OT3ClarDate'); checkduedate('OT3' , 'ClarDate')"" onkeyup=""datecheck('OT3ClarDate'); checkduedate('OT3' , 'ClarDate')"" />
                </td>
                <td>
                    OT3 Clarification Order Date <b>(Due by <span id=""OT3ClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c481618", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDateYesNo"">
                <td id=""tdOT3ClarDateYesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDateYesNo'); nowarning('OT3ClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c483252", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c484193", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT3ClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT3ClarDateSigned"">
                <td id=""tdOT3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 175067, "\"", 175075, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDateSigned"" onchange=""datechecknoerror('OT3ClarDateSigned'); checkClarDateSigned('OT3')"" onkeyup=""datechecknoerror('OT3ClarDateSigned'); checkClarDateSigned('OT3')"" />
                </td>
                <td>
                    OT3 Clarification - Date MD Signed Order <b>(Due by<span id=""OT3ClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c486067", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDateSignedYesNo"">
                <td id=""tdOT3ClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDateSignedYesNo'); nowarning('OT3ClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c487737", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c488678", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trOT3ClarDate1"">
                <td id=""tdOT3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 176489, "\"", 176497, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate1"" onchange=""datechecknoerror('OT3ClarDate1'); checkClarDate1('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate1'); checkClarDate1('OT3')"" />
                </td>
                <td>
                    OT3 Reclarification #1 Date <b>(Due by <span id=""OT3ClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c490518", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDate1YesNo"">
                <td id=""tdOT3ClarDate1YesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate1YesNo'); nowarning('OT3ClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c492158", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c493099", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT3ClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT3ClarDate1Signed"">
                <td id=""tdOT3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 177821, "\"", 177829, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate1Signed"" onchange=""datechecknoerror('OT3ClarDate1Signed'); checkClarDate1Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate1Signed'); checkClarDate1Signed('OT3')"" />
                </td>
                <td>
                    OT3 Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""OT3ClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c494988", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDate1SignedYesNo"">
                <td id=""tdOT3ClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate1SignedYesNo'); nowarning('OT3ClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c496664", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c497605", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT3ClarDate2"">
                <td id=""tdOT3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 179261, "\"", 179269, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate2"" onchange=""datechecknoerror('OT3ClarDate2'); checkClarDate2('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate2'); checkClarDate2('OT3')"" />
                </td>
                <td>
                    OT3 Reclarification #2 Date <b>(Due by <span id=""OT3ClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c499445", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDate2YesNo"">
                <td id=""tdOT3ClarDate2YesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate2YesNo'); nowarning('OT3ClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c501085", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c502026", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT3ClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT3ClarDate2Signed"">
                <td id=""tdOT3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 180593, "\"", 180601, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate2Signed"" onchange=""datechecknoerror('OT3ClarDate2Signed'); checkClarDate2Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate2Signed'); checkClarDate2Signed('OT3')"" />
                </td>
                <td>
                    OT3 Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""OT3ClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c503915", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDate2SignedYesNo"">
                <td id=""tdOT3ClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate2SignedYesNo'); nowarning('OT3ClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c505591", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c506532", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trOT3ClarDate3"">
                <td id=""tdOT3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 182032, "\"", 182040, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate3"" onchange=""datechecknoerror('OT3ClarDate3'); checkClarDate3('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate3'); checkClarDate3('OT3')"" />
                </td>
                <td>
                    OT3 Reclarification #3 Date <b>(Due by <span id=""OT3ClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c508371", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDate3YesNo"">
                <td id=""tdOT3ClarDate3YesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate3YesNo'); nowarning('OT3ClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c510011", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c510952", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdOT3ClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT3ClarDate3Signed"">
                <td id=""tdOT3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 183364, "\"", 183372, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3ClarDate3Signed"" onchange=""datechecknoerror('OT3ClarDate3Signed'); checkClarDate3Signed('OT3')"" onkeyup=""datechecknoerror('OT3ClarDate3Signed'); checkClarDate3Signed('OT3')"" />
                </td>
                <td>
                    OT3 Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""OT3ClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c512841", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdOT3ClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trOT3ClarDate3SignedYesNo"">
                <td id=""tdOT3ClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddOT3ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('OT3ClarDate3SignedYesNo'); nowarning('OT3ClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c514517", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c515458", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdOT3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trOT3DischargeDate"">
                <td id=""tdOT3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 184812, "\"", 184820, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtOT3DischargeDate"" onchange=""datechecknoerror('OT3DischargeDate'); therdischange('OT3')"" onkeyup=""datechecknoerror('OT3DischargeDate'); therdischange('OT3')"" />
                </td>
                <td>
                    OT3 Discharge Date
                </td>
                <td id=""tdOT3DischargeDateConfirm"" class=""confirmed""></td>
            </tr>

        </table>




        <hr style=""border-top: 2px solid black"" />
        <table class=""TableClick content"">

            <tr class=""yes"" id=""trSTEvalDate"">
                <td id=""tdSTEvalDate""");
            BeginWriteAttribute("class", " class=\"", 185450, "\"", 185458, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTEvalDate"" onchange=""datechecknoerror('STEvalDate'); checkevaldate('ST') "" onkeyup=""datechecknoerror('STEvalDate'); checkevaldate('ST')"" />
                </td>
                <td>ST Evaluation Date</td>
                <td id=""tdSTEvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trSTEvalOnly"">
                <td id=""tdSTEvalOnly"">
                    <input type=""checkbox"" id=""cbSTEvalOnly"" onchange=""cbchecknoerror('STEvalOnly'); evalonly('ST')"" />
                </td>
                <td>ST Evaluation Only</td>
                <td id=""tdSTEvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trSTEvalDateSigned"">
                <td id=""tdSTEvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTEvalDateSigned"" />
                </td>
                <td>
             ");
            WriteLiteral("       ST Evaluation - Date MD Signed Order <b>(Due by <span id=\"STEvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c518931", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTEvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTEvalDateSignedYesNo"">
                <td id=""tdSTEvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddSTEvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('STEvalDateSignedYesNo'); nowarning('STEvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c520595", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c521536", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdSTEvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trSTClarDate"">
                <td id=""tdSTClarDate""");
            BeginWriteAttribute("class", " class=\"", 187577, "\"", 187585, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate"" onchange=""datecheck('STClarDate'); checkduedate('ST' , 'ClarDate')"" onkeyup=""datecheck('STClarDate'); checkduedate('ST' , 'ClarDate')"" />
                </td>
                <td>
                    ST Clarification Order Date <b>(Due by <span id=""STClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c523366", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDateYesNo"">
                <td id=""tdSTClarDateYesNo"" class=""tderror"">
                    <select id=""ddSTClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('STClarDateYesNo'); nowarning('STClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c524994", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c525935", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdSTClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trSTClarDateSigned"">
                <td id=""tdSTClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 188882, "\"", 188890, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDateSigned"" onchange=""datechecknoerror('STClarDateSigned'); checkClarDateSigned('ST')"" onkeyup=""datechecknoerror('STClarDateSigned'); checkClarDateSigned('ST')"" />
                </td>
                <td>
                    ST Clarification - Date MD Signed Order <b>(Due by<span id=""STClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c527799", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDateSignedYesNo"">
                <td id=""tdSTClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddSTClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('STClarDateSignedYesNo'); nowarning('STClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c529463", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c530404", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdSTClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trSTClarDate1"">
                <td id=""tdSTClarDate1""");
            BeginWriteAttribute("class", " class=\"", 190288, "\"", 190296, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate1"" onchange=""datechecknoerror('STClarDate1'); checkClarDate1('ST')"" onkeyup=""datechecknoerror('STClarDate1'); checkClarDate1('ST')"" />
                </td>
                <td>
                    ST Reclarification #1 Date <b>(Due by <span id=""STClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c532234", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDate1YesNo"">
                <td id=""tdSTClarDate1YesNo"" class=""tderror"">
                    <select id=""ddSTClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('STClarDate1YesNo'); nowarning('STClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c533868", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c534809", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdSTClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trSTClarDate1Signed"">
                <td id=""tdSTClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 191604, "\"", 191612, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate1Signed"" onchange=""datechecknoerror('STClarDate1Signed'); checkClarDate1Signed('ST')"" onkeyup=""datechecknoerror('STClarDate1Signed'); checkClarDate1Signed('ST')"" />
                </td>
                <td>
                    ST Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""STClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c536688", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDate1SignedYesNo"">
                <td id=""tdSTClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddSTClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('STClarDate1SignedYesNo'); nowarning('STClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c538358", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c539299", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdSTClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trSTClarDate2"">
                <td id=""tdSTClarDate2""");
            BeginWriteAttribute("class", " class=\"", 193028, "\"", 193036, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate2"" onchange=""datechecknoerror('STClarDate2'); checkClarDate2('ST')"" onkeyup=""datechecknoerror('STClarDate2'); checkClarDate2('ST')"" />
                </td>
                <td>
                    ST Reclarification #2 Date <b>(Due by <span id=""STClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c541129", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDate2YesNo"">
                <td id=""tdSTClarDate2YesNo"" class=""tderror"">
                    <select id=""ddSTClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('STClarDate2YesNo'); nowarning('STClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c542763", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c543704", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdSTClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trSTClarDate2Signed"">
                <td id=""tdSTClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 194344, "\"", 194352, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate2Signed"" onchange=""datechecknoerror('STClarDate2Signed'); checkClarDate2Signed('ST')"" onkeyup=""datechecknoerror('STClarDate2Signed'); checkClarDate2Signed('ST')"" />
                </td>
                <td>
                    ST Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""STClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c545583", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDate2SignedYesNo"">
                <td id=""tdSTClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddSTClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('STClarDate2SignedYesNo'); nowarning('STClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c547253", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c548194", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdSTClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trSTClarDate3"">
                <td id=""tdSTClarDate3""");
            BeginWriteAttribute("class", " class=\"", 195767, "\"", 195775, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate3"" onchange=""datechecknoerror('STClarDate3'); checkClarDate3('ST')"" onkeyup=""datechecknoerror('STClarDate3'); checkClarDate3('ST')"" />
                </td>
                <td>
                    ST Reclarification #3 Date <b>(Due by <span id=""STClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c550023", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDate3YesNo"">
                <td id=""tdSTClarDate3YesNo"" class=""tderror"">
                    <select id=""ddSTClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('STClarDate3YesNo'); nowarning('STClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c551657", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c552598", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdSTClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trSTClarDate3Signed"">
                <td id=""tdSTClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 197083, "\"", 197091, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTClarDate3Signed"" onchange=""datechecknoerror('STClarDate3Signed'); checkClarDate3Signed('ST')"" onkeyup=""datechecknoerror('STClarDate3Signed'); checkClarDate3Signed('ST')"" />
                </td>
                <td>
                    ST Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""STClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c554477", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdSTClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trSTClarDate3SignedYesNo"">
                <td id=""tdSTClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddSTClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('STClarDate3SignedYesNo'); nowarning('STClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c556147", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c557088", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdSTClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trSTDischargeDate"">
                <td id=""tdSTDischargeDate""");
            BeginWriteAttribute("class", " class=\"", 198515, "\"", 198523, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtSTDischargeDate"" onchange=""datechecknoerror('STDischargeDate'); therdischange('ST')"" onkeyup=""datechecknoerror('STDischargeDate'); therdischange('ST')"" />
                </td>
                <td>
                    ST Discharge Date
                </td>
                <td id=""tdSTDischargeDateConfirm"" class=""confirmed""></td>
            </tr>
            <tr>
                <td colspan=""3"" id=""tdST2"">
                    <input type=""button"" class=""btn btn-primary"" value=""Add Another ST"" onclick=""addther('ST2')"" id=""addST2"" />
                </td>
            </tr>
        </table>



        <table class=""TableClick content therapyvisable"" id=""ST2"">
            <tr>
                <td colspan=""3"">
                    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove ST"" onclick=""removether('ST2')"" id=""removeST2"" />
                </td>
            </tr>

            <tr class=""yes"" id=""trST2EvalDate"">
            ");
            WriteLiteral("    <td id=\"tdST2EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 199574, "\"", 199582, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2EvalDate"" onchange=""datechecknoerror('ST2EvalDate'); checkevaldate('ST2') "" onkeyup=""datechecknoerror('ST2EvalDate'); checkevaldate('ST2')"" />
                </td>
                <td>ST2 Evaluation Date</td>
                <td id=""tdST2EvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trST2EvalOnly"">
                <td id=""tdST2EvalOnly"">
                    <input type=""checkbox"" id=""cbST2EvalOnly"" onchange=""cbchecknoerror('ST2EvalOnly'); evalonly('ST2')"" />
                </td>
                <td>ST2 Evaluation Only</td>
                <td id=""tdST2EvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trST2EvalDateSigned"">
                <td id=""tdST2EvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2EvalDateSigned"" />
                </td>
                <");
            WriteLiteral("td>\n                    ST2 Evaluation - Date MD Signed Order <b>(Due by <span id=\"ST2EvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c561056", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2EvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2EvalDateSignedYesNo"">
                <td id=""tdST2EvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddST2EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST2EvalDateSignedYesNo'); nowarning('ST2EvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c562726", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c563667", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST2EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trST2ClarDate"">
                <td id=""tdST2ClarDate""");
            BeginWriteAttribute("class", " class=\"", 201729, "\"", 201737, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate"" onchange=""datecheck('ST2ClarDate'); checkduedate('ST2' , 'ClarDate')"" onkeyup=""datecheck('ST2ClarDate'); checkduedate('ST2' , 'ClarDate')"" />
                </td>
                <td>
                    ST2 Clarification Order Date <b>(Due by <span id=""ST2ClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c565507", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDateYesNo"">
                <td id=""tdST2ClarDateYesNo"" class=""tderror"">
                    <select id=""ddST2ClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDateYesNo'); nowarning('ST2ClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c567141", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c568082", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST2ClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST2ClarDateSigned"">
                <td id=""tdST2ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 203050, "\"", 203058, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDateSigned"" onchange=""datechecknoerror('ST2ClarDateSigned'); checkClarDateSigned('ST2')"" onkeyup=""datechecknoerror('ST2ClarDateSigned'); checkClarDateSigned('ST2')"" />
                </td>
                <td>
                    ST2 Clarification - Date MD Signed Order <b>(Due by<span id=""ST2ClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c569956", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDateSignedYesNo"">
                <td id=""tdST2ClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddST2ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDateSignedYesNo'); nowarning('ST2ClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c571626", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c572567", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST2ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trST2ClarDate1"">
                <td id=""tdST2ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 204472, "\"", 204480, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate1"" onchange=""datechecknoerror('ST2ClarDate1'); checkClarDate1('ST2')"" onkeyup=""datechecknoerror('ST2ClarDate1'); checkClarDate1('ST2')"" />
                </td>
                <td>
                    ST2 Reclarification #1 Date <b>(Due by <span id=""ST2ClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c574407", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDate1YesNo"">
                <td id=""tdST2ClarDate1YesNo"" class=""tderror"">
                    <select id=""ddST2ClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDate1YesNo'); nowarning('ST2ClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c576047", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c576988", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST2ClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST2ClarDate1Signed"">
                <td id=""tdST2ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 205804, "\"", 205812, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate1Signed"" onchange=""datechecknoerror('ST2ClarDate1Signed'); checkClarDate1Signed('ST2')"" onkeyup=""datechecknoerror('ST2ClarDate1Signed'); checkClarDate1Signed('ST2')"" />
                </td>
                <td>
                    ST2 Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""ST2ClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c578877", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDate1SignedYesNo"">
                <td id=""tdST2ClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddST2ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDate1SignedYesNo'); nowarning('ST2ClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c580553", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c581494", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST2ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST2ClarDate2"">
                <td id=""tdST2ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 207244, "\"", 207252, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate2"" onchange=""datechecknoerror('ST2ClarDate2'); checkClarDate2('ST2')"" onkeyup=""datechecknoerror('ST2ClarDate2'); checkClarDate2('ST2')"" />
                </td>
                <td>
                    ST2 Reclarification #2 Date <b>(Due by <span id=""ST2ClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c583334", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDate2YesNo"">
                <td id=""tdST2ClarDate2YesNo"" class=""tderror"">
                    <select id=""ddST2ClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDate2YesNo'); nowarning('ST2ClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c584974", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c585915", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST2ClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST2ClarDate2Signed"">
                <td id=""tdST2ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 208576, "\"", 208584, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate2Signed"" onchange=""datechecknoerror('ST2ClarDate2Signed'); checkClarDate2Signed('ST2')"" onkeyup=""datechecknoerror('ST2ClarDate2Signed'); checkClarDate2Signed('ST2')"" />
                </td>
                <td>
                    ST2 Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""ST2ClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c587804", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDate2SignedYesNo"">
                <td id=""tdST2ClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddST2ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDate2SignedYesNo'); nowarning('ST2ClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c589480", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c590421", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST2ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trST2ClarDate3"">
                <td id=""tdST2ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 210015, "\"", 210023, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate3"" onchange=""datechecknoerror('ST2ClarDate3'); checkClarDate3('ST2')"" onkeyup=""datechecknoerror('ST2ClarDate3'); checkClarDate3('ST2')"" />
                </td>
                <td>
                    ST2 Reclarification #3 Date <b>(Due by <span id=""ST2ClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c592260", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDate3YesNo"">
                <td id=""tdST2ClarDate3YesNo"" class=""tderror"">
                    <select id=""ddST2ClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDate3YesNo'); nowarning('ST2ClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c593900", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c594841", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST2ClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST2ClarDate3Signed"">
                <td id=""tdST2ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 211347, "\"", 211355, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2ClarDate3Signed"" onchange=""datechecknoerror('ST2ClarDate3Signed'); checkClarDate3Signed('ST2')"" onkeyup=""datechecknoerror('ST2ClarDate3Signed'); checkClarDate3Signed('ST2')"" />
                </td>
                <td>
                    ST2 Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""ST2ClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c596730", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST2ClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST2ClarDate3SignedYesNo"">
                <td id=""tdST2ClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddST2ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST2ClarDate3SignedYesNo'); nowarning('ST2ClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c598406", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c599347", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST2ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST2DischargeDate"">
                <td id=""tdST2DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 212795, "\"", 212803, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST2DischargeDate"" onchange=""datechecknoerror('ST2DischargeDate'); therdischange('ST2')"" onkeyup=""datechecknoerror('ST2DischargeDate'); therdischange('ST2')"" />
                </td>
                <td>
                    ST2 Discharge Date
                </td>
                <td id=""tdST2DischargeDateConfirm"" class=""confirmed""></td>
            </tr>
            <tr>
                <td colspan=""3"" id=""tdST3"">
                    <input type=""button"" class=""btn btn-primary"" value=""Add Another ST"" onclick=""addther('ST3')"" id=""addST3"" />
                </td>
            </tr>

        </table>




        <table class=""TableClick content therapyvisable"" id=""ST3"">
            <tr>
                <td colspan=""3"">
                    <input type=""button"" class=""btn btn-primary hidden"" value=""Remove ST"" onclick=""removether('ST3')"" id=""removeST3"" />
                </td>
            </tr>

            <tr class=""yes"" id=""trST3EvalDate"">
   ");
            WriteLiteral("             <td id=\"tdST3EvalDate\"");
            BeginWriteAttribute("class", " class=\"", 213863, "\"", 213871, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3EvalDate"" onchange=""datechecknoerror('ST3EvalDate'); checkevaldate('ST3') "" onkeyup=""datechecknoerror('ST3EvalDate'); checkevaldate('ST3')"" />
                </td>
                <td>ST3 Evaluation Date</td>
                <td id=""tdST3EvalDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trST3EvalOnly"">
                <td id=""tdST3EvalOnly"">
                    <input type=""checkbox"" id=""cbST3EvalOnly"" onchange=""cbchecknoerror('ST3EvalOnly'); evalonly('ST3')"" />
                </td>
                <td>ST3 Evaluation Only</td>
                <td id=""tdST3EvalOnlyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror"" id=""trST3EvalDateSigned"">
                <td id=""tdST3EvalDateSigned"" class=""tderror"">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3EvalDateSigned"" />
                </td>
                <");
            WriteLiteral("td>\n                    ST3 Evaluation - Date MD Signed Order <b>(Due by <span id=\"ST3EvalDateSignedDue\"></span>)</b>\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c603327", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3EvalDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3EvalDateSignedYesNo"">
                <td id=""tdST3EvalDateSignedYesNo"" class=""tderror"">
                    <select id=""ddST3EvalDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST3EvalDateSignedYesNo'); nowarning('ST3EvalDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c604997", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c605938", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST3EvalDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trST3ClarDate"">
                <td id=""tdST3ClarDate""");
            BeginWriteAttribute("class", " class=\"", 216018, "\"", 216026, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate"" onchange=""datecheck('ST3ClarDate'); checkduedate('ST3' , 'ClarDate')"" onkeyup=""datecheck('ST3ClarDate'); checkduedate('ST3' , 'ClarDate')"" />
                </td>
                <td>
                    ST3 Clarification Order Date <b>(Due by <span id=""ST3ClarDateDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c607778", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_34);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDateConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDateYesNo"">
                <td id=""tdST3ClarDateYesNo"" class=""tderror"">
                    <select id=""ddST3ClarDateYesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDateYesNo'); nowarning('ST3ClarDateYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c609412", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c610353", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST3ClarDateYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST3ClarDateSigned"">
                <td id=""tdST3ClarDateSigned""");
            BeginWriteAttribute("class", " class=\"", 217339, "\"", 217347, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDateSigned"" onchange=""datechecknoerror('ST3ClarDateSigned'); checkClarDateSigned('ST3')"" onkeyup=""datechecknoerror('ST3ClarDateSigned'); checkClarDateSigned('ST3')"" />
                </td>
                <td>
                    ST3 Clarification - Date MD Signed Order <b>(Due by<span id=""ST3ClarDateSignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c612227", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDateSignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDateSignedYesNo"">
                <td id=""tdST3ClarDateSignedYesNo"" class=""tderror"">
                    <select id=""ddST3ClarDateSignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDateSignedYesNo'); nowarning('ST3ClarDateSignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c613897", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c614838", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST3ClarDateSignedYesNoConfirm"" class=""confirmed""></td>
            </tr>



            <tr class=""yes therapyvisable"" id=""trST3ClarDate1"">
                <td id=""tdST3ClarDate1""");
            BeginWriteAttribute("class", " class=\"", 218761, "\"", 218769, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate1"" onchange=""datechecknoerror('ST3ClarDate1'); checkClarDate1('ST3')"" onkeyup=""datechecknoerror('ST3ClarDate1'); checkClarDate1('ST3')"" />
                </td>
                <td>
                    ST3 Reclarification #1 Date <b>(Due by <span id=""ST3ClarDate1Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c616678", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDate1Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDate1YesNo"">
                <td id=""tdST3ClarDate1YesNo"" class=""tderror"">
                    <select id=""ddST3ClarDate1YesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDate1YesNo'); nowarning('ST3ClarDate1YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c618318", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c619259", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST3ClarDate1YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST3ClarDate1Signed"">
                <td id=""tdST3ClarDate1Signed""");
            BeginWriteAttribute("class", " class=\"", 220093, "\"", 220101, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate1Signed"" onchange=""datechecknoerror('ST3ClarDate1Signed'); checkClarDate1Signed('ST3')"" onkeyup=""datechecknoerror('ST3ClarDate1Signed'); checkClarDate1Signed('ST3')"" />
                </td>
                <td>
                    ST3 Reclarification #1 - Date MD Signed Order <b>(Due by <span id=""ST3ClarDate1SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c621148", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDate1SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDate1SignedYesNo"">
                <td id=""tdST3ClarDate1SignedYesNo"" class=""tderror"">
                    <select id=""ddST3ClarDate1SignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDate1SignedYesNo'); nowarning('ST3ClarDate1SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c622824", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c623765", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST3ClarDate1SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST3ClarDate2"">
                <td id=""tdST3ClarDate2""");
            BeginWriteAttribute("class", " class=\"", 221533, "\"", 221541, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate2"" onchange=""datechecknoerror('ST3ClarDate2'); checkClarDate2('ST3')"" onkeyup=""datechecknoerror('ST3ClarDate2'); checkClarDate2('ST3')"" />
                </td>
                <td>
                    ST3 Reclarification #2 Date <b>(Due by <span id=""ST3ClarDate2Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c625605", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDate2Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDate2YesNo"">
                <td id=""tdST3ClarDate2YesNo"" class=""tderror"">
                    <select id=""ddST3ClarDate2YesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDate2YesNo'); nowarning('ST3ClarDate2YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c627245", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c628186", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST3ClarDate2YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST3ClarDate2Signed"">
                <td id=""tdST3ClarDate2Signed""");
            BeginWriteAttribute("class", " class=\"", 222865, "\"", 222873, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate2Signed"" onchange=""datechecknoerror('ST3ClarDate2Signed'); checkClarDate2Signed('ST3')"" onkeyup=""datechecknoerror('ST3ClarDate2Signed'); checkClarDate2Signed('ST3')"" />
                </td>
                <td>
                    ST3 Reclarification #2 - Date MD Signed Order <b>(Due by <span id=""ST3ClarDate2SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c630075", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDate2SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDate2SignedYesNo"">
                <td id=""tdST3ClarDate2SignedYesNo"" class=""tderror"">
                    <select id=""ddST3ClarDate2SignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDate2SignedYesNo'); nowarning('ST3ClarDate2SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c631751", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c632692", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST3ClarDate2SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable"" id=""trST3ClarDate3"">
                <td id=""tdST3ClarDate3""");
            BeginWriteAttribute("class", " class=\"", 224304, "\"", 224312, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate3"" onchange=""datechecknoerror('ST3ClarDate3'); checkClarDate3('ST3')"" onkeyup=""datechecknoerror('ST3ClarDate3'); checkClarDate3('ST3')"" />
                </td>
                <td>
                    ST3 Reclarification #3 Date <b>(Due by <span id=""ST3ClarDate3Due""></span>)</b>

                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c634531", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_35);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDate3Confirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDate3YesNo"">
                <td id=""tdST3ClarDate3YesNo"" class=""tderror"">
                    <select id=""ddST3ClarDate3YesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDate3YesNo'); nowarning('ST3ClarDate3YesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c636171", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c637112", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late entry clarification order obtained</td>
                <td id=""tdST3ClarDate3YesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST3ClarDate3Signed"">
                <td id=""tdST3ClarDate3Signed""");
            BeginWriteAttribute("class", " class=\"", 225636, "\"", 225644, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3ClarDate3Signed"" onchange=""datechecknoerror('ST3ClarDate3Signed'); checkClarDate3Signed('ST3')"" onkeyup=""datechecknoerror('ST3ClarDate3Signed'); checkClarDate3Signed('ST3')"" />
                </td>
                <td>
                    ST3 Reclarification #3 - Date MD Signed Order <b>(Due by <span id=""ST3ClarDate3SignedDue""></span>)</b>
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c639001", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_19);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_33);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </td>
                <td id=""tdST3ClarDate3SignedConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes therapyvisable trerror trwarn"" id=""trST3ClarDate3SignedYesNo"">
                <td id=""tdST3ClarDate3SignedYesNo"" class=""tderror"">
                    <select id=""ddST3ClarDate3SignedYesNo"" class=""txtbox"" onchange=""ddcheck('ST3ClarDate3SignedYesNo'); nowarning('ST3ClarDate3SignedYesNo')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c640677", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c641618", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Late MD Certification for Rehab Services obtained</td>
                <td id=""tdST3ClarDate3SignedYesNoConfirm"" class=""confirmed""></td>
            </tr>


            <tr class=""yes therapyvisable"" id=""trST3DischargeDate"">
                <td id=""tdST3DischargeDate""");
            BeginWriteAttribute("class", " class=\"", 227084, "\"", 227092, 0);
            EndWriteAttribute();
            WriteLiteral(@">
                    <input type=""text"" class=""txtbox txtdate"" id=""txtST3DischargeDate"" onchange=""datechecknoerror('ST3DischargeDate'); therdischange('ST3')"" onkeyup=""datechecknoerror('ST3DischargeDate'); therdischange('ST3')"" />
                </td>
                <td>
                    ST3 Discharge Date
                </td>
                <td id=""tdST3DischargeDateConfirm"" class=""confirmed""></td>
            </tr>

        </table>




        <hr style=""border-top: 2px solid black"" />
        <table class=""TableClick content"">
            <tr class=""yes trerror""  id=""trTherapyUnitsVer"">
                <td id=""tdTherapyUnitsVer"" class=""tderror"">
                    <input type=""checkbox"" id=""cbTherapyUnitsVer"" onchange=""cbcheck('TherapyUnitsVer')"" />
                </td>
                <td>Therapy Units/Visits verified for each discipline with UB04</td>
                <td id=""tdTherapyUnitsVerConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay levels trerror"" id=""t");
            WriteLiteral(@"rTherapyTreatment"">
                <td id=""tdTherapyTreatment"" class=""tderror"">
                    <input type=""checkbox"" id=""cbTherapyTreatment"" onchange=""cbcheck('TherapyTreatment')"" />
                </td>
                <td>Therapy treatment delivery is consistent with the level billed</td>
                <td id=""tdTherapyTreatmentConfirm"" class=""confirmed""></td>
            </tr>
        </table>
        <div style=""height:20px""></div>
    </div>

    <button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnNursing"">
        <table style=""width:100%"">
            <tr>
                <td>Nursing</td>
                <td style=""text-align:right; padding-right:50px;"" id=""NursingComplete""></td>
            </tr>
        </table>
    </button>
    <div class=""content yes"" style=""border: 1px solid black"" id=""NursingContent"">
        <div style=""height:20px""></div>
        <table class=""TableClick content"">
            <tr class=""yes pay pdpm hmoa levels trerror trwarn"" id=""trNDailySkill""");
            WriteLiteral(">\n                <td id=\"tdNDailySkill\" class=\"tderror\">\n                    <select class=\"txtbox\" id=\"ddNDailySkill\" onchange=\"ddcheck(\'NDailySkill\'); nowarning(\'NDailySkill\')\">\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c645485", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c646426", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c647404", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>A Daily Skilled Nursing note is present for each date of service billed</td>
                <td id=""tdNDailySkillConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNIVCharges"">
                <td id=""tdNIVCharges"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNIVCharges"" onchange=""ddcheck('NIVCharges'); nowarning('NIVCharges')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c648898", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c649839", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c650817", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c651796", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>IV Charges on UB04 have MD order</td>
                <td id=""tdNIVChargesConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNSupplies"">
                <td id=""tdNSupplies"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNSupplies"" onchange=""ddcheck('NSupplies'); nowarning('NSupplies')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c653245", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c654186", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c655164", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c656143", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Supplies on UB04 have MD order</td>
                <td id=""tdNSuppliesConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNPharmacy"">
                <td id=""tdNPharmacy"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNPharmacy"" onchange=""ddcheck('NPharmacy'); nowarning('NPharmacy')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c657589", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c658530", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c659508", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c660487", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Pharmacy Charges on UB04 have MD order</td>
                <td id=""tdNPharmacyConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNO2Charges"">
                <td id=""tdNO2Charges"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNO2Charges"" onchange=""ddcheck('NO2Charges'); nowarning('NO2Charges')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c661946", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c662887", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c663865", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c664844", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>O2 Charges on UB04 have MD order</td>
                <td id=""tdNO2ChargesConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNLabCharges"">
                <td id=""tdNLabCharges"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNLabCharges"" onchange=""ddcheck('NLabCharges'); nowarning('NLabCharges')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c666303", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c667244", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c668222", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c669201", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Lab Charges on UB04 have MD order</td>
                <td id=""tdNLabChargesConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNRayCharges"">
                <td id=""tdNRayCharges"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNRayCharges"" onchange=""ddcheck('NRayCharges'); nowarning('NRayCharges')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c670662", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c671603", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c672581", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c673560", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Radiology charges on UB04 have MD order</td>
                <td id=""tdNRayChargesConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay pdpm hmoa levels trerror trwarn""  id=""trNEquipCharges"">
                <td id=""tdNEquipCharges"" class=""tderror"">
                    <select class=""txtbox"" id=""ddNEquipCharges"" onchange=""ddcheck('NEquipCharges'); nowarning('NEquipCharges')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c675037", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c675978", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c676956", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c677935", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Equipment charges on UB04 have MD order</td>
                <td id=""tdNEquipChargesConfirm"" class=""confirmed""></td>
            </tr>

            <tr class=""yes pay mcb trerror trwarn""  id=""trMCBTherRef"">
                <td id=""tdMCBTherRef"" class=""tderror"">
                    <select class=""txtbox"" id=""ddMCBTherRef"" onchange=""ddcheck('MCBTherRef'); nowarning('MCBTherRef')"">
                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c679386", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c680327", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n                        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6cf8c55772bfc82e653d1cb8536bf87024b0fb8c681305", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    </select>
                </td>
                <td>Nursing documentation supports reason for therapy referral</td>
                <td id=""tdMCBTherRefConfirm"" class=""confirmed""></td>
            </tr>

        </table>
        <div style=""height:20px""></div>
    </div>

    <script>
        function showdel() {
            $(""#showdel"").dialog({
                resizable: false,
                height: ""auto"",
                width: ""350px"",
                modal: true
            });
        };
    </script>

    <div style=""visibility:hidden; height:0px; display:none"">
        <div id=""showdel"" title=""Delete Record?"">
            <div>Are you sure you want to delete this record?</div>
            <br />
            <div class=""modal-footer"">
                <button type=""submit"" class=""btn btn-primary"" onclick=""delrecord()"">Delete</button>
                <button type=""button"" class=""btn btn-secondary"" onclick=""$('#showdel').dialog('close');"">Close</button>
            </div>
        ");
            WriteLiteral(@"</div>
    </div>


    <script>
        function shownotes() {
            document.getElementById('txtEditNotes').innerHTML = document.getElementById('divNotes').innerHTML
            $(""#shownotes"").dialog({
                resizable: false,
                height: ""auto"",
                width: ""80%"",
                modal: true
            });
        };
    </script>

    <div style=""visibility:hidden; height:0px; display:none"">
        <div id=""shownotes"" title=""Add Notes"">
            <div data-tiny-editor id=""txtEditNotes"">

            </div>
            <script src=""https://unpkg.com/tiny-editor/dist/bundle.js""></script>
            <br />
            <div class=""modal-footer"">
                <button type=""submit"" class=""btn btn-primary"" onclick=""ajaxpost()"">Save</button>
                <button type=""button"" class=""btn btn-secondary"" onclick=""$('#shownotes').dialog('close');"">Close</button>
            </div>
        </div>
    </div>




    <script>
    function ajaxpost() {
        $.ajax({
  ");
            WriteLiteral("          type: \'POST\',\n            dataType: \'json\',\n            url: \'/TripleCheck/AjaxMethod\',\n            data: {\"id\": \'");
#nullable restore
#line 4593 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                     Write(Html.Raw(ViewData["passid"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"', ""notes"": document.getElementById('txtEditNotes').innerHTML },
            success: function (Data) {

            },
            success: function (response) {
                $('#shownotes').dialog('close');
                document.getElementById('divNotes').innerHTML = response
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {

            }
        });
    }

    </script>



    <script>
        function showteam() {

            $(""#showteam"").dialog({
                resizable: false,
                height: ""auto"",
                width: ""500px"",
                modal: true
            });
        };
    </script>

    <div style=""visibility:hidden; height:0px; display:none"">
        <div id=""showteam"" title=""Add Team"">
            <div style=""overflow-y:auto; max-height:200px;"" id=""divTeamEdit"">
                ");
#nullable restore
#line 4626 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
           Write(Html.Raw(ViewData["teameditdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
            </div>
            <div style=""height:10px""></div>
            <button type=""submit"" class=""btn btn-primary"" onclick=""removeteam()"">Remove Selected</button>
            <hr />
            <table>
                <tr>
                    <td>Name</td>
                    <td>
                        <input class=""txtbox"" maxlength=""99"" id=""txtTeamName"" />
                        <div id=""validateTeamName"" class=""hidden"">Name Required</div>
                    </td>
                </tr>
                <tr>
                    <td style=""padding-right:15px; padding-top:10px"">Credentials</td>
                    <td style=""padding-top:10px;"">
                        <input class=""txtbox"" maxlength=""99"" id=""txtTeamCred"" />
                        <div id=""validateTeamCred"" class=""hidden"">Credential Required</div>
                    </td>
                </tr>
            </table>

            <div style=""height:10px""></div>
            <button type=""submit"" class=""btn btn-primary"" onclick=""saveteam");
            WriteLiteral(@"()"">Add Member</button>
            <div style=""height:10px""></div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" onclick=""getteam()"">Close</button>
            </div>
        </div>
    </div>


    <script>
    var coll = document.getElementsByClassName(""collapsible"");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener(""click"", function () {
            this.classList.toggle(""active"");
            var content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + ""px"";
            }
        });
    }

    function delrecord() {
        document.getElementById('txtRecID').value = document.getElementById('txtID').value
        document.getElementById('delreport').click()
    }

    function getteam() {
        $.get(""/TripleCheck/getteam"", { passid: document.getElementById(");
            WriteLiteral(@"'txtID').value }, function (data) { document.getElementById('divTeam').innerHTML = data });
        $('#showteam').dialog('close');
    }

    function removeteam() {
        var markedCheckbox = document.getElementsByName('checkremove');
        for (var checkbox of markedCheckbox) {
            if (checkbox.checked)
                $.get(""/TripleCheck/removeteam"", { strid: document.getElementById('txtID').value, strTeamID: checkbox.value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
        }
    }

    function saveteam() {
        var errors = '0'

        if (document.getElementById('txtTeamName').value == '') {
            document.getElementById('validateTeamName').className = 'validation'
            errors = '1'
        } else {
            document.getElementById('validateTeamName').className = 'hidden'
        }

        if (document.getElementById('txtTeamCred').value == '') {
            document.getElementById('validateTeamCred').className = 'validation'
      ");
            WriteLiteral(@"      errors = '1'
        } else {
            document.getElementById('validateTeamCred').className = 'hidden'
        }

        if (errors == '0') {
            $.get(""/TripleCheck/saveteam"", { strid: document.getElementById('txtID').value, strName: document.getElementById('txtTeamName').value, strCred: document.getElementById('txtTeamCred').value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
            document.getElementById('txtTeamCred').value = ''
            document.getElementById('txtTeamName').value = ''
        }
    }

    function savenotes() {
        $.get(""/TripleCheck/savenotes"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtEditNotes').innerHTML }, function (data) { });
        document.getElementById('divNotes').innerHTML = document.getElementById('txtEditNotes').innerHTML
        $('#shownotes').dialog('close')
    }

    function startdate() {
        if (moment(document.getElementById('txtStartDate').value).is");
            WriteLiteral(@"Valid()) {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtStartDate').value, strdetail: 'startstay' }, function (data) { });

            document.getElementById('ValidationStartDate').className = 'hidden'
            document.getElementById('txtMRInitialDue').disabled = false

            var sdate = new Date(Date.parse(document.getElementById('txtStartDate').value))
            sdate.setDate(sdate.getDate() + 3)

            var displaydate = sdate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('initialcerttext').innerHTML = 'Due no later than ' + displaydate
            document.getElementById('txtMRInitialDueCert').value = displaydate

            var sdate = new Date(Date.parse(document.getElementById('txtStartDate').value))
            sdate.setDate(sdate.getDate() + 13)

            var");
            WriteLiteral(@" displaydate = sdate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('recerttext').innerHTML = displaydate
            document.getElementById('txtMR1ReCertDueCert').value = displaydate

        } else {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'null', strdetail: 'startstay' }, function (data) { });
            document.getElementById('ValidationStartDate').className = 'validation'
            document.getElementById('txtMRInitialDue').value = ''
            document.getElementById('txtMRInitialDue').disabled = true
            document.getElementById('txtMRInitialDueCert').value = ''
            document.getElementById('initialcerttext').innerHTML = 'Start date required prior to entry'
            checkinitial()
        }
    }


    function addassessment(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: do");
            WriteLiteral(@"cument.getElementById('txtID').value, stritem: dd.value, strdetail: 'additionalassessment' }, function (data) { });

        var y = document.getElementsByClassName(""yes"");
        var i;
        if (dd.value == ""No"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""addaddition"");
            }
        } else {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""addaddition"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""HMO Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document.getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classLi");
            WriteLiteral(@"st.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function paymenttype(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd");
            WriteLiteral(@".value, strdetail: 'paymenttype' }, function (data) { });
        var x = document.getElementsByClassName(""pay"");
        var b;
        for (b = 0; b < x.length; b++) {
            x[b].classList.add(""paytype"");
        }
        if (dd.value == ""HMO A - PDPM"" || dd.value == ""MED A - PDPM"") {
            var y = document.getElementsByClassName(""pdpm"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""HMO A - RUG"") {
            var y = document.getElementsByClassName(""hmoa"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""HMO Levels"") {
            var y = document.getElementsByClassName(""levels"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
            document.getElementById('trBODischargeQLevel').");
            WriteLiteral(@"classList.remove(""booverride"")
            document.getElementById('ddBODischargeQ').value = ''
            document.getElementById('tdBODischargeQ').className = ""tderror""
            document.getElementById('trBODischargeQ').classList.add(""trerror"")
            document.getElementById('trBODischargeQ').classList.add(""booverride"")
            
        } else {
            document.getElementById('trBODischargeQ').classList.remove(""booverride"")
            document.getElementById('ddBODischargeQLevel').value = ''
            document.getElementById('tdBODischargeQLevel').className = ""tderror""
            document.getElementById('trBODischargeQLevel').classList.add(""trerror"")
            document.getElementById('trBODischargeQLevel').classList.add(""booverride"")
        }
        if (dd.value == ""MCB"") {
            var y = document.getElementsByClassName(""mcb"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
            document.ge");
            WriteLiteral(@"tElementById('txtDCDischarge').value = ''
            document.getElementById('tdDCDischarge').className = ""tderror""
            document.getElementById('trDCDischarge').classList.add(""trerror"")
        } else {
            document.getElementById('txtMCBDischarge').value = ''
            document.getElementById('tdMCBDischarge').className = ""tderror""
            document.getElementById('trMCBDischarge').classList.add(""trerror"")
        }

        if (dd.value == ""MCB""|| dd.value == ""HMO Levels"") {
            document.getElementById('MDSWhole').classList.add('hidden')
        } else {
            document.getElementById('MDSWhole').classList.remove('hidden')
        }

        if (dd.value == ""MCB"" || dd.value == ""HMO Levels"") {
            document.getElementById('MDSTherapyWhole').classList.add('hidden')
        } else {
            document.getElementById('MDSTherapyWhole').classList.remove('hidden')
        }


        if (document.getElementById('ddPaymentType').value == ""HMO Levels"" && document.getElem");
            WriteLiteral(@"entById('ddAddAssessment').value == 'Yes') {
            document.getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

       ");
            WriteLiteral(@" if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        document.getElementById('BODischargeQ').innerHTML = 'Did patient discharge from ' + dd.value + ' this month?'

        checkcomplete()
    }

        function dischargecheckLevel() {
            if (document.getElementById('ddBODischargeQLevel').value == '' || document.getElementById('ddBODischargeQLevel').value == 'No' ) {
                document.getElementById('ddDischargeLocLevel').value = ''
                document.getElementById('tdDischargeLocLevel').className = ""tderror""
                document.getElementById('trDischargeLocLevel').classList.add(""trerror"")
                document.getElementById('trDischargeLocLevel').classList.add(""dcoverride"")
                removechanges('DischargeLocLevel')
      ");
            WriteLiteral(@"          document.getElementById('dcwhole').classList.add('hidden')
            }

            if (document.getElementById('ddBODischargeQLevel').value == 'Yes') {
                document.getElementById('trDischargeLocLevel').classList.remove(""dcoverride"")
                document.getElementById('dcwhole').classList.remove('hidden')
            }
            checkcomplete()
        }

    function dischargecheck() {
        if (document.getElementById('ddBODischargeQ').value == '' && document.getElementById('ddBODischargeQLevel').value == '') {
            document.getElementById('txtDCDischarge').value = ''
            document.getElementById('tdDCDischarge').className = ""tderror""
            document.getElementById('trDCDischarge').classList.add(""trerror"")
            removechanges('DCDischarge')
            document.getElementById('txtMCBDischarge').value = ''
            document.getElementById('tdMCBDischarge').className = ""tderror""
            document.getElementById('trMCBDischarge').classList.add(""t");
            WriteLiteral(@"rerror"")
            removechanges('MCBDischarge')
            MCBDischargeChange()
            dcdischargedate()
            therdischange('')
            document.getElementById('dcwhole').classList.add('hidden')
        }

        if (document.getElementById('ddBODischargeQ').value == 'No' && document.getElementById('ddBODischargeQLevel').value == 'No') {
            document.getElementById('txtDCDischarge').value = ''
            document.getElementById('tdDCDischarge').classList.remove = ""tderror""
            document.getElementById('trDCDischarge').classList.remove(""trerror"")
            removechanges('DCDischarge')
            document.getElementById('txtMCBDischarge').value = ''
            document.getElementById('tdMCBDischarge').classList.remove = ""tderror""
            document.getElementById('trMCBDischarge').classList.remove(""trerror"")
            removechanges('MCBDischarge')

            MCBDischargeChange()

            dcdischargedate()

            therdischange('')

            document.get");
            WriteLiteral(@"ElementById('dcwhole').classList.add('hidden')
        }

        if (document.getElementById('ddBODischargeQ').value == 'Yes' || document.getElementById('ddBODischargeQLevel').value == 'Yes') {
            document.getElementById('dcwhole').classList.remove('hidden')

            if (document.getElementById('txtMCBDischarge').value == '') {
                document.getElementById('tdMCBDischarge').className = ""tderror""
                document.getElementById('trMCBDischarge').classList.add(""trerror"")
            }

            if (document.getElementById('txtDCDischarge').value == '') {
                document.getElementById('tdDCDischarge').className = ""tderror""
                document.getElementById('trDCDischarge').classList.add(""trerror"")
            }

        }
        checkcomplete()
        MDSTherresize()
    }

    function checkqualifying() {
        if (moment(document.getElementById('txtBOStayFrom').value).isValid() && moment(document.getElementById('txtBOStayTo').value).isValid()) {
         ");
            WriteLiteral(@"   var dchange = datediff(parseDate(document.getElementById('txtBOStayFrom').value), parseDate(document.getElementById('txtBOStayTo').value))
            if (dchange < 3) {
                document.getElementById('trBOStayReason').classList.remove(""booverride"")
            } else {
                document.getElementById('tdBOStayReason').className = ""tderror""
                document.getElementById('trBOStayReason').classList.add(""trerror"")
                document.getElementById('trBOStayReason').classList.add(""booverride"")
                removechanges('BOStayReason')
            }
        } else {
            document.getElementById('tdBOStayReason').className = ""tderror""
            document.getElementById('trBOStayReason').classList.add(""trerror"")
            document.getElementById('trBOStayReason').classList.add(""booverride"")
            removechanges('BOStayReason')
        }
        checkcomplete()
        boresize()
    }

    function patientleave(dd, type, track) {
        if (dd.value == 'Yes') ");
            WriteLiteral(@"{
            if (document.getElementById(""txtMDSUnbillDays"" + track.toString()).value == '') {
                document.getElementById('tdMDSUnbillDays' + track.toString()).className = ""tderror""
                document.getElementById('trMDSUnbillDays' + track.toString()).classList.add(""trerror"")
            } else {
                document.getElementById('tdMDSUnbillDays' + track.toString()).classList.remove(""tderror"")
                document.getElementById('trMDSUnbillDays' + track.toString()).classList.remove(""trerror"")
            }


            document.getElementById(""txtMDSUnbillDays"" + track.toString()).disabled = false;

            document.getElementById('tdBOPatient' + track.toString()).className = ''
            document.getElementById('trBOPatient' + track.toString()).classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient' + track.toString(), 'Yes', 'dropdown')
                document.getElementById(""txtMDSUnbillDays"" + track.toString()).value =");
            WriteLiteral(@" ''
                removechanges('MDSUnbillDays' + track.toString())
            }

        } else if (dd.value == 'No') {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = """"
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.remove(""trerror"")
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).disabled = true;
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).value = '0'
            document.getElementById('tdBOPatient' + track.toString()).className = ''
            document.getElementById('trBOPatient' + track.toString()).classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient' + track.toString(), 'No', 'dropdown')
                savechanges('MDSUnbillDays' + track.toString(), '0', 'textbox')
            }
        } else {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = ""tderror""
            document.getElem");
            WriteLiteral(@"entById('trMDSUnbillDays' + track.toString()).classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).disabled = true;
            document.getElementById(""txtMDSUnbillDays"" + track.toString()).value = ''
            document.getElementById('tdBOPatient' + track.toString()).className = 'tderror'
            document.getElementById('trBOPatient' + track.toString()).classList.add(""trerror"")
            removechanges('BOPatient' + track.toString())
            removechanges('MDSUnbillDays' + track.toString())
        }
        checkcomplete()
    }

    function numdaysinter(track) {
        if (document.getElementById(""txtMDSUnbillDays"" + track.toString()).value == """") {
            document.getElementById('tdMDSUnbillDays' + track.toString()).className = ""tderror""
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.add(""trerror"")
            removechanges('MDSUnbillDays' + track.toString())
        } else {
            document.getElem");
            WriteLiteral(@"entById('tdMDSUnbillDays' + track.toString()).className = """"
            document.getElementById('trMDSUnbillDays' + track.toString()).classList.remove(""trerror"")
            savechanges('MDSUnbillDays' + track.toString(), document.getElementById(""txtMDSUnbillDays"" + track.toString()).value, 'textbox')
        }
        checkcomplete()
    }



    function checkduedateload(base, type) {
        var txtdate = new Date(Date.parse(document.getElementById('txt' + base + type).value))
        var duedate = new Date(Date.parse(document.getElementById(base + type + 'Due').innerHTML))





        if (moment(document.getElementById('txt' + base + type).value).isValid()) {
            var signdate = new Date(Date.parse(document.getElementById('txt' + base + type).value))
            signdate.setDate(signdate.getDate() + 30)

            var displaydatesign = signdate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

      ");
            WriteLiteral(@"      var reclardate = new Date(Date.parse(document.getElementById('txt' + base + type).value))
            reclardate.setDate(reclardate.getDate() + 28)

            var displaydatereclar = reclardate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            if (moment(document.getElementById('txtDCDischarge').value).isValid()) {
                var DCDate = new Date(Date.parse(document.getElementById('txtDCDischarge').value))
            } else {
                var DCDate = new Date()
            }

            if (moment(document.getElementById('txt'+base+'DischargeDate').value).isValid()) {
                var INDDCDate = new Date(Date.parse(document.getElementById('txt' + base + 'DischargeDate').value))
            } else {
                var INDDCDate = new Date()
            }

            var todaydate = new Date()
            var intmonth = new Date(Date.parse('");
#nullable restore
#line 5115 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                           Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))

            if (DCDate < todaydate) {
                todaydate = DCDate
            }

            if (INDDCDate < todaydate) {
                todaydate = INDDCDate
            }

            if (intmonth < todaydate) {
                todaydate = intmonth
            }



            if (type == 'ClarDate' || type == 'ClarDate1' || type == 'ClarDate2' || type == 'ClarDate3') {
                document.getElementById('tr' + base + type + 'Signed').classList.remove('therapyvisable')
                document.getElementById(base + type + 'SignedDue').innerHTML = displaydatesign

                if (signdate > todaydate) {
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onchange', 'datechecknoerror(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', \'' + type + 'Signed\')');
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onkeyup', 'datechecknoerror(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', ");
            WriteLiteral(@"\'' + type + 'Signed\')');
                    document.getElementById('td' + base + type + 'Signed').classList.remove('tderror')
                    document.getElementById('tr' + base + type + 'Signed').classList.remove('trerror')
                } else {
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onchange', 'datecheck(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', \'' + type + 'Signed\')');
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onkeyup', 'datecheck(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', \'' + type + 'Signed\')');
                    if (document.getElementById('txt' + base + type + 'Signed').value == '') {
                        document.getElementById('td' + base + type + 'Signed').classList.add('tderror')
                        document.getElementById('tr' + base + type + 'Signed').classList.add('trerror')
                    } else {
                        documen");
            WriteLiteral(@"t.getElementById('td' + base + type + 'Signed').classList.remove('tderror')
                        document.getElementById('tr' + base + type + 'Signed').classList.remove('trerror')
                    }
                }
            }

            if (type == 'ClarDate' || type == 'ClarDate1' || type == 'ClarDate2') {
                if (type == 'ClarDate') { newtype = 'ClarDate1' }
                if (type == 'ClarDate1') { newtype = 'ClarDate2' }
                if (type == 'ClarDate2') { newtype = 'ClarDate3' }



                if (signdate > todaydate) {
                    //document.getElementById('tr' + base + newtype).classList.remove('therapyvisable')
                    //document.getElementById(base + newtype + 'Due').innerHTML = displaydatereclar
                    //document.getElementById('txt' + base + newtype).setAttribute('onchange', 'datechecknoerror(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    //document.getElementById('txt' + ");
            WriteLiteral(@"base + newtype).setAttribute('onkeyup', 'datechecknoerror(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    //document.getElementById('td' + base + newtype).classList.remove('tderror')
                    //document.getElementById('tr' + base + newtype).classList.remove('trerror')
                } else {
                    document.getElementById('tr' + base + newtype).classList.remove('therapyvisable')
                    document.getElementById(base + newtype + 'Due').innerHTML = displaydatereclar
                    document.getElementById('txt' + base + newtype).setAttribute('onchange', 'datecheck(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    document.getElementById('txt' + base + newtype).setAttribute('onkeyup', 'datecheck(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    if (document.getElementById('txt' + base + newtype).value == '') {
 ");
            WriteLiteral(@"                       document.getElementById('td' + base + newtype).classList.add('tderror')
                        document.getElementById('tr' + base + newtype).classList.add('trerror')
                    } else {
                        document.getElementById('td' + base + newtype).classList.remove('tderror')
                        document.getElementById('tr' + base + newtype).classList.remove('trerror')
                    }
                }
            }
            if (type == 'ClarDate') { checkduedate(base, 'ClarDate1'); checkduedate(base, 'ClarDateSigned'); }
            if (type == 'ClarDate1') { checkduedate(base, 'ClarDate2'); checkduedate(base, 'ClarDate1Signed'); }
            if (type == 'ClarDate2') { checkduedate(base, 'ClarDate3'); checkduedate(base, 'ClarDate2Signed'); }
            if (type == 'ClarDate3') { checkduedate(base, 'ClarDate3Signed'); }

        } else {
            if (type == 'ClarDate') {
                removesave(base + 'ClarDateYesNo', 'dd')
                remove");
            WriteLiteral(@"save(base + 'ClarDateSigned', 'txt')
                removesave(base + 'ClarDateSignedYesNo', 'dd')

                removesave(base + 'ClarDate1', 'txt')
                removesave(base + 'ClarDate1YesNo', 'dd')
                removesave(base + 'ClarDate1Signed', 'txt')
                removesave(base + 'ClarDate1SignedYesNo', 'dd')

                removesave(base + 'ClarDate2', 'txt')
                removesave(base + 'ClarDate2YesNo', 'dd')
                removesave(base + 'ClarDate2Signed', 'txt')
                removesave(base + 'ClarDate2SignedYesNo', 'dd')

                removesave(base + 'ClarDate3', 'txt')
                removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
            if (type == 'ClarDate1') {
                removesave(base + 'ClarDate1YesNo', 'dd')
                removesave(base + 'ClarDate1Signed', 'txt')
                removesave(base + 'ClarDat");
            WriteLiteral(@"e1SignedYesNo', 'dd')

                removesave(base + 'ClarDate2', 'txt')
                removesave(base + 'ClarDate2YesNo', 'dd')
                removesave(base + 'ClarDate2Signed', 'txt')
                removesave(base + 'ClarDate2SignedYesNo', 'dd')

                removesave(base + 'ClarDate3', 'txt')
                removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
            if (type == 'ClarDate2') {
                removesave(base + 'ClarDate2YesNo', 'dd')
                removesave(base + 'ClarDate2Signed', 'txt')
                removesave(base + 'ClarDate2SignedYesNo', 'dd')

                removesave(base + 'ClarDate3', 'txt')
                removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
            if (type == 'ClarDate3') {
   ");
            WriteLiteral(@"             removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
        }


        if (txtdate > duedate) {
            document.getElementById('tr' + base + type + 'YesNo').classList.remove('therapyvisable')
        } else {
            removesave(base + type + 'YesNo', 'dd')
        }
        therapyresize()


    }



    function checkduedate(base, type) {
        var txtdate = new Date(Date.parse(document.getElementById('txt' + base + type).value))
        var duedate = new Date(Date.parse(document.getElementById(base + type + 'Due').innerHTML))





        if (moment(document.getElementById('txt' + base + type).value).isValid()) {
            var signdate = new Date(Date.parse(document.getElementById('txt' + base + type).value))
            signdate.setDate(signdate.getDate() + 30)

            var displaydatesign = signdate.toLocaleDateString(""en-us"", {
                year");
            WriteLiteral(@": ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            var reclardate = new Date(Date.parse(document.getElementById('txt' + base + type).value))
            reclardate.setDate(reclardate.getDate() + 28)

            var displaydatereclar = reclardate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            if (moment(document.getElementById('txtDCDischarge').value).isValid()) {
                var DCDate = new Date(Date.parse(document.getElementById('txtDCDischarge').value))
            } else {
                var DCDate = new Date()
            }

            if (moment(document.getElementById('txt'+base+'DischargeDate').value).isValid()) {
                var INDDCDate = new Date(Date.parse(document.getElementById('txt' + base + 'DischargeDate').value))
            } else {
                var INDDCDate = new Date()
            }

            var todaydat");
            WriteLiteral("e = new Date()\n            var intmonth = new Date(Date.parse(\'");
#nullable restore
#line 5292 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                           Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))

            if (DCDate < todaydate) {
                todaydate = DCDate
            }

            if (INDDCDate < todaydate) {
                todaydate = INDDCDate
            }

            if (intmonth < todaydate) {
                todaydate = intmonth
            }



            if (type == 'ClarDate' || type == 'ClarDate1' || type == 'ClarDate2' || type == 'ClarDate3') {
                document.getElementById('tr' + base + type + 'Signed').classList.remove('therapyvisable')
                document.getElementById(base + type + 'SignedDue').innerHTML = displaydatesign

                if (signdate > todaydate) {
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onchange', 'datechecknoerror(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', \'' + type + 'Signed\')');
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onkeyup', 'datechecknoerror(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', ");
            WriteLiteral(@"\'' + type + 'Signed\')');
                    document.getElementById('td' + base + type + 'Signed').classList.remove('tderror')
                    document.getElementById('tr' + base + type + 'Signed').classList.remove('trerror')
                } else {
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onchange', 'datecheck(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', \'' + type + 'Signed\')');
                    document.getElementById('txt' + base + type + 'Signed').setAttribute('onkeyup', 'datecheck(\'' + base + type + 'Signed\'); checkduedate(\'' + base + '\', \'' + type + 'Signed\')');
                    if (document.getElementById('txt' + base + type + 'Signed').value == '') {
                        document.getElementById('td' + base + type + 'Signed').classList.add('tderror')
                        document.getElementById('tr' + base + type + 'Signed').classList.add('trerror')
                    } else {
                        documen");
            WriteLiteral(@"t.getElementById('td' + base + type + 'Signed').classList.remove('tderror')
                        document.getElementById('tr' + base + type + 'Signed').classList.remove('trerror')
                    }
                }
            }

            if (type == 'ClarDate' || type == 'ClarDate1' || type == 'ClarDate2') {
                if (type == 'ClarDate') { newtype = 'ClarDate1' }
                if (type == 'ClarDate1') { newtype = 'ClarDate2' }
                if (type == 'ClarDate2') { newtype = 'ClarDate3' }



                if (signdate > todaydate) {
                    //document.getElementById('tr' + base + newtype).classList.remove('therapyvisable')
                    //document.getElementById(base + newtype + 'Due').innerHTML = displaydatereclar
                    //document.getElementById('txt' + base + newtype).setAttribute('onchange', 'datechecknoerror(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    //document.getElementById('txt' + ");
            WriteLiteral(@"base + newtype).setAttribute('onkeyup', 'datechecknoerror(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    //document.getElementById('td' + base + newtype).classList.remove('tderror')
                    //document.getElementById('tr' + base + newtype).classList.remove('trerror')
                } else {
                    document.getElementById('tr' + base + newtype).classList.remove('therapyvisable')
                    document.getElementById(base + newtype + 'Due').innerHTML = displaydatereclar
                    document.getElementById('txt' + base + newtype).setAttribute('onchange', 'datecheck(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    document.getElementById('txt' + base + newtype).setAttribute('onkeyup', 'datecheck(\'' + base + newtype + '\'); checkduedate(\'' + base + '\', \'' + newtype + '\')');
                    if (document.getElementById('txt' + base + newtype).value == '') {
 ");
            WriteLiteral(@"                       document.getElementById('td' + base + newtype).classList.add('tderror')
                        document.getElementById('tr' + base + newtype).classList.add('trerror')
                    } else {
                        document.getElementById('td' + base + newtype).classList.remove('tderror')
                        document.getElementById('tr' + base + newtype).classList.remove('trerror')
                    }
                }
            }
            if (type == 'ClarDate') { checkduedate(base, 'ClarDate1'); checkduedate(base, 'ClarDateSigned'); }
            if (type == 'ClarDate1') { checkduedate(base, 'ClarDate2'); checkduedate(base, 'ClarDate1Signed'); }
            if (type == 'ClarDate2') { checkduedate(base, 'ClarDate3'); checkduedate(base, 'ClarDate2Signed'); }
            if (type == 'ClarDate3') { checkduedate(base, 'ClarDate3Signed'); }

        } else {
            if (type == 'ClarDate') {
                removesave(base + 'ClarDateYesNo', 'dd')
                remove");
            WriteLiteral(@"save(base + 'ClarDateSigned', 'txt')
                removesave(base + 'ClarDateSignedYesNo', 'dd')

                removesave(base + 'ClarDate1', 'txt')
                removesave(base + 'ClarDate1YesNo', 'dd')
                removesave(base + 'ClarDate1Signed', 'txt')
                removesave(base + 'ClarDate1SignedYesNo', 'dd')

                removesave(base + 'ClarDate2', 'txt')
                removesave(base + 'ClarDate2YesNo', 'dd')
                removesave(base + 'ClarDate2Signed', 'txt')
                removesave(base + 'ClarDate2SignedYesNo', 'dd')

                removesave(base + 'ClarDate3', 'txt')
                removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
            if (type == 'ClarDate1') {
                removesave(base + 'ClarDate1YesNo', 'dd')
                removesave(base + 'ClarDate1Signed', 'txt')
                removesave(base + 'ClarDat");
            WriteLiteral(@"e1SignedYesNo', 'dd')

                removesave(base + 'ClarDate2', 'txt')
                removesave(base + 'ClarDate2YesNo', 'dd')
                removesave(base + 'ClarDate2Signed', 'txt')
                removesave(base + 'ClarDate2SignedYesNo', 'dd')

                removesave(base + 'ClarDate3', 'txt')
                removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
            if (type == 'ClarDate2') {
                removesave(base + 'ClarDate2YesNo', 'dd')
                removesave(base + 'ClarDate2Signed', 'txt')
                removesave(base + 'ClarDate2SignedYesNo', 'dd')

                removesave(base + 'ClarDate3', 'txt')
                removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
            if (type == 'ClarDate3') {
   ");
            WriteLiteral(@"             removesave(base + 'ClarDate3YesNo', 'dd')
                removesave(base + 'ClarDate3Signed', 'txt')
                removesave(base + 'ClarDate3SignedYesNo', 'dd')
            }
        }


        if (txtdate > duedate) {
            document.getElementById('tr' + base + type + 'YesNo').classList.remove('therapyvisable')
        } else {
            removesave(base + type + 'YesNo', 'dd')
        }
        therapyresize()
        checkcomplete()

    }

    function therdischange(type) {
        if (type != '') {
            checkduedate(type, 'ClarDate')
            checkduedate(type, 'ClarDate1')
            checkduedate(type, 'ClarDate2')
            checkduedate(type, 'ClarDate3')
        } else {
            checkduedate('PT', 'ClarDate')
            checkduedate('PT', 'ClarDate1')
            checkduedate('PT', 'ClarDate2')
            checkduedate('PT', 'ClarDate3')

            checkduedate('PT2', 'ClarDate')
            checkduedate('PT2', 'ClarDate1')
            checkduedate('PT2', ");
            WriteLiteral(@"'ClarDate2')
            checkduedate('PT2', 'ClarDate3')

            checkduedate('PT3', 'ClarDate')
            checkduedate('PT3', 'ClarDate1')
            checkduedate('PT3', 'ClarDate2')
            checkduedate('PT3', 'ClarDate3')

            checkduedate('OT', 'ClarDate')
            checkduedate('OT', 'ClarDate1')
            checkduedate('OT', 'ClarDate2')
            checkduedate('OT', 'ClarDate3')

            checkduedate('OT2', 'ClarDate')
            checkduedate('OT2', 'ClarDate1')
            checkduedate('OT2', 'ClarDate2')
            checkduedate('OT2', 'ClarDate3')

            checkduedate('OT3', 'ClarDate')
            checkduedate('OT3', 'ClarDate1')
            checkduedate('OT3', 'ClarDate2')
            checkduedate('OT3', 'ClarDate3')

            checkduedate('ST', 'ClarDate')
            checkduedate('ST', 'ClarDate1')
            checkduedate('ST', 'ClarDate2')
            checkduedate('ST', 'ClarDate3')

            checkduedate('ST2', 'ClarDate')
            checkduedate('ST2");
            WriteLiteral(@"', 'ClarDate1')
            checkduedate('ST2', 'ClarDate2')
            checkduedate('ST2', 'ClarDate3')

            checkduedate('ST3', 'ClarDate')
            checkduedate('ST3', 'ClarDate1')
            checkduedate('ST3', 'ClarDate2')
            checkduedate('ST3', 'ClarDate3')
        }

        therapyresize()
        checkcomplete()
    }

    function removesave(passname, type) {
        document.getElementById('tr' + passname).classList.add('therapyvisable')
        document.getElementById('td' + passname).classList.add('tderror')
        document.getElementById('tr' + passname).classList.add('trerror')
        document.getElementById(type + passname).value = ''
        removechanges(passname)
    }

        function evalonly(type) {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
                if (document.getElementById('cb' + type + 'EvalOnly').checked == true) {
                    document.getElementById('tr' + type + 'ClarDate').classList.add('");
            WriteLiteral(@"therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate').value = ''
                    removechanges(type + 'ClarDate')

                    document.getElementById('tr' + type + 'ClarDateSigned').classList.add('therapyvisable')
                    removechanges(type + 'ClarDateSigned')
                    document.getElementById('tr' + type + 'ClarDateYesNo').classList.add('therapyvisable')
                    removechanges(type + 'ClarDateYesNo')

                    document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
                    document.getElementById('txt' + type + 'DischargeDate').value = ''
                    removechanges(type + 'DischargeDate')

                    checkduedate(type, 'ClarDate')
                    checkduedate(type, 'Clar");
            WriteLiteral(@"Date1')
                    checkduedate(type, 'ClarDate2')
                    checkduedate(type, 'ClarDate3')

                    checkduedate(type, 'ClarDateSigned')
                    checkduedate(type, 'ClarDate1Signed')
                    checkduedate(type, 'ClarDate2Signed')
                    checkduedate(type, 'ClarDate3Signed')
                } else {
                    document.getElementById('tr' + type + 'ClarDate').classList.remove('therapyvisable')
                    document.getElementById('tr' + type + 'DischargeDate').classList.remove('therapyvisable')
                }
            }
            therapyresize()
            checkcomplete()
        }


        function checkevaldate(type) {

        if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {

            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var todaydate = new Date()
          ");
            WriteLiteral("  var intmonth = new Date(Date.parse(\'");
#nullable restore
#line 5536 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                           Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))

            if (intmonth < todaydate) {
                todaydate = intmonth
            }

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'EvalDateSignedDue').innerHTML = displaydate
            document.getElementById('tr' + type + 'EvalDateSigned').classList.remove('therapyvisable')

            if (evaldate > todaydate) {
                document.getElementById('txt' + type + 'EvalDateSigned').setAttribute('onchange', 'datechecknoerror(\'' + type + 'EvalDateSigned\'); checkduedate(\'' + type + '\', \'EvalDateSigned\')');
                document.getElementById('txt' + type + 'EvalDateSigned').setAttribute('onkeyup', 'datechecknoerror(\'' + type + 'EvalDateSigned\'); checkduedate(\'' + type + '\', \'EvalDateSigned\')');
                document.getElementById('td' + type + 'EvalDateSigned').classList.remove('tderror')
     ");
            WriteLiteral(@"           document.getElementById('tr' + type + 'EvalDateSigned').classList.remove('trerror')
            } else {
                document.getElementById('txt' + type + 'EvalDateSigned').setAttribute('onchange', 'datecheck(\'' + type + 'EvalDateSigned\'); checkduedate(\'' + type + '\', \'EvalDateSigned\')');
                document.getElementById('txt' + type + 'EvalDateSigned').setAttribute('onkeyup', 'datecheck(\'' + type + 'EvalDateSigned\'); checkduedate(\'' + type + '\', \'EvalDateSigned\')');
                if (document.getElementById('txt' + type + 'EvalDateSigned').value == '') {
                    document.getElementById('td' + type + 'EvalDateSigned').classList.add('tderror')
                    document.getElementById('tr' + type + 'EvalDateSigned').classList.add('trerror')
                } else {
                    document.getElementById('td' + type + 'EvalDateSigned').classList.remove('tderror')
                    document.getElementById('tr' + type + 'EvalDateSigned').classList.remove('");
            WriteLiteral(@"trerror')
                }
            }

            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById('tr' + type + 'ClarDate').classList.remove('therapyvisable')
            document.getElementById(type + 'ClarDateDue').innerHTML = displaydate

            if (document.getElementById('txt' + type + 'ClarDate').value == '') {
                document.getElementById('td' + type + 'ClarDate').classList.add('tderror')
                document.getElementById('tr' + type + 'ClarDate').classList.add('trerror')
            } else {
                document.getElementById('td' + type + 'ClarDate').classList.remove('tderror')
                document.getElementById('tr' + type + 'ClarDate').classList.remove('trerror')
            }

            document.");
            WriteLiteral(@"getElementById('tr' + type + 'DischargeDate').classList.remove('therapyvisable')

            document.getElementById('tr' + type + 'EvalOnly').classList.remove('therapyvisable')

            checkduedate(type, 'ClarDate');
            checkduedate(type, 'EvalDateSigned')
        } else {
            document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'DischargeDate').value = ''
            removechanges(type + 'DischargeDate')

            document.getElementById('tr' + type + 'EvalOnly').classList.add('therapyvisable')
            document.getElementById('cb' + type + 'EvalOnly').checked = false
            removechanges(type + 'EvalOnly')

            removesave(type + 'EvalDateSigned', 'txt')
            removesave(type + 'EvalDateSignedYesNo', 'dd')

            removesave(type + 'ClarDate', 'txt')
            removesave(type + 'ClarDateYesNo', 'dd')
            removesave(type + 'ClarDateSigned', 'txt')
            rem");
            WriteLiteral(@"ovesave(type + 'ClarDateSignedYesNo', 'dd')

            removesave(type + 'ClarDate1', 'txt')
            removesave(type + 'ClarDate1YesNo', 'dd')
            removesave(type + 'ClarDate1Signed', 'txt')
            removesave(type + 'ClarDate1SignedYesNo', 'dd')

            removesave(type + 'ClarDate2', 'txt')
            removesave(type + 'ClarDate2YesNo', 'dd')
            removesave(type + 'ClarDate2Signed', 'txt')
            removesave(type + 'ClarDate2SignedYesNo', 'dd')

            removesave(type + 'ClarDate3', 'txt')
            removesave(type + 'ClarDate3YesNo', 'dd')
            removesave(type + 'ClarDate3Signed', 'txt')
            removesave(type + 'ClarDate3SignedYesNo', 'dd')
        }
        therapyresize()
        checkcomplete()
    }

    function checkevalsign(type) {
        if (moment(document.getElementById('txt' + type + 'EvalDateSigned').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDate').value))
            eva");
            WriteLiteral(@"ldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'EvalDateSigned').value))

            if (signdate <= evaldate) {
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
                //document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
                //document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
                //removechanges(type + 'EvalDateSignedReason')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
                document.getElementById('");
            WriteLiteral(@"dd' + type + 'EvalDateSignedYesNo').value = ''
                removechanges(type + 'EvalDateSignedYesNo')
            } else {
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('therapyvisable')
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.add('trerror')
                //document.getElementById('td' + type + 'EvalDateSignedReason').classList.add('tderror')
                //document.getElementById('txt' + type + 'EvalDateSignedReason').value = ''
                //removechanges(type + 'EvalDateSignedReason')

                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.remove('therapyvisable')
            }
        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
                //document.getElementById('tr' + type + 'EvalDateSignedReason').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'EvalDateSi");
            WriteLiteral(@"gnedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'EvalDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'EvalDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'EvalDateSignedYesNo').value = ''
                removechanges(type + 'EvalDateSignedYesNo')
            }
        }
        therapyresize()
        checkcomplete()
    }

    function checkclardate(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate').value).isValid()) {
            if (document.getElementById('txt' + type + 'ClarDate').value == document.getElementById('txt' + type + 'EvalDate').value) {
                document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateReason').classList.add('");
            WriteLiteral(@"tderror')
                document.getElementById('txt' + type + 'ClarDateReason').value = ''
                removechanges(type + 'ClarDateReason')
            } else {
                document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for ' + type + ' Clarification Date not on Evaluation Date'
            }

            document.getElementById('tr' + type + 'ClarDateSigned').classList.remove('therapyvisable')


            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDat");
            WriteLiteral(@"eString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDateSignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate1Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                discharge");
            WriteLiteral(@"date28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 28)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')

                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                ");
            WriteLiteral(@"    document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                    removechanges(type + 'ClarDateSignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDateSignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                        removechanges(type + 'ClarDateSignedYesNo')
                    }

                }
            } else {
                document.getElementB");
            WriteLiteral(@"yId('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')

                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                removechanges(type + 'ClarDateSignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    do");
            WriteLiteral(@"cument.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                    removechanges(type + 'ClarDate1Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate1Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #1 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisa");
            WriteLiteral(@"ble')
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                removechanges(type + 'ClarDate1Reason')
            }
            document.getElementById('tr' + type + 'ClarDate1').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDateSigned').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                    docum");
            WriteLiteral(@"ent.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')

                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                    removechanges(type + 'ClarDateSignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + t");
            WriteLiteral(@"ype + 'ClarDateSignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                    removechanges(type + 'ClarDateSignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid()) {
                document.getElementById('tr' + type + 'ClarDateReason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDateReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'

                document.getElementById('tr' + type + 'ClarDateSigned').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDateSigned').value = ''
                remo");
            WriteLiteral(@"vechanges(type + 'ClarDateSigned')
            }

            document.getElementById('tr' + type + 'ClarDate1').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1').value = ''
            removechanges(type + 'ClarDate1')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
            removechanges(type + 'ClarDate1Reason')

            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvis");
            WriteLiteral(@"able')
            document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
            removechanges(type + 'ClarDateSignedReason')

            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
            removechanges(type + 'ClarDateSignedYesNo')

            checkClarDate1('PT')
            checkClarDate2('PT')
            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDateSigned(type) {
        if (moment(document.");
            WriteLiteral(@"getElementById('txt' + type + 'ClarDateSigned').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDateSigned').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')

                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSig");
            WriteLiteral(@"nedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDateSignedYesNo').value = ''
                removechanges(type + 'ClarDateSignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDateSignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateSignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateSignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateSignedReason').value = ''
                removechanges(type + 'ClarDateSignedReason')
            }
        } else {
            checkclardate(type)
        }
        therapyresize()
        checkcomplete()
    }




    fu");
            WriteLiteral(@"nction checkClarDate1(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1Reason').value = ''
                removechanges(type + 'ClarDate1Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                docum");
            WriteLiteral(@"ent.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate1SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digi");
            WriteLiteral(@"t"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate2Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate");
            WriteLiteral(@"1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')

                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                    removechanges(type + 'ClarDate1SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + '");
            WriteLiteral(@"ClarDate1SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                        removechanges(type + 'ClarDate1SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason");
            WriteLiteral(@"').value = ''
                removechanges(type + 'ClarDate1SignedReason')

                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                removechanges(type + 'ClarDate1SignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                    document.getElementById('txt' + type + ");
            WriteLiteral(@"'ClarDate2Reason').value = ''
                    removechanges(type + 'ClarDate2Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate2Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #2 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                removechanges(type + 'ClarDate2Reason')
       ");
            WriteLiteral(@"     }
            document.getElementById('tr' + type + 'ClarDate2').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedRea");
            WriteLiteral(@"son')

                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                    removechanges(type + 'ClarDate1SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type ");
            WriteLiteral(@"+ 'ClarDate1SignedReason').value = ''
                    removechanges(type + 'ClarDate1SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate1Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'Cl");
            WriteLiteral(@"arDate1ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }



                document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
                removechanges(type + 'ClarDate1Signed')
            }

            document.getElementById('tr' + type + 'ClarDate2').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate2').value = ''
            removechanges(type + 'ClarDate2')

            document.getElementById('tr' + type + 'ClarDate1Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate1Signed').value = ''
            removechanges(type + 'ClarDate1Signed')

            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
            doc");
            WriteLiteral(@"ument.getElementById('td' + type + 'ClarDate2Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
            removechanges(type + 'ClarDate2Reason')

            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
            removechanges(type + 'ClarDate1SignedReason')

            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'Cla");
            WriteLiteral(@"rDate1SignedYesNo').value = ''
            removechanges(type + 'ClarDate1SignedYesNo')

            checkClarDate2('PT')
            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate1Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate1Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').classList.add('tderror')
                document.getEle");
            WriteLiteral(@"mentById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')

                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate1SignedYesNo').value = ''
                removechanges(type + 'ClarDate1SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate1SignedYesNo').classList.remove('therapyvisable')


                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate1SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate1SignedReason').class");
            WriteLiteral(@"List.add('tderror')
                document.getElementById('txt' + type + 'ClarDate1SignedReason').value = ''
                removechanges(type + 'ClarDate1SignedReason')
            }
        } else {
            checkClarDate1(type)
        }
        therapyresize()
        checkcomplete()
    }



    function checkClarDate2(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate2').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2Reason').classLi");
            WriteLiteral(@"st.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2Reason').value = ''
                removechanges(type + 'ClarDate2Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate2Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            evaldate.setDate(evaldate.getDate() + 30)
            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
               ");
            WriteLiteral(@" month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate2SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            var displaydate = evaldate28.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate3Due').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(discha");
            WriteLiteral(@"rgedate28.getDate() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')

                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate2Signed");
            WriteLiteral(@"YesNo').value = ''
                    removechanges(type + 'ClarDate2SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                        removechanges(type + 'ClarDate2SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classL");
            WriteLiteral(@"ist.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')

                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                removechanges(type + 'ClarDate2SignedYesNo')
            }

            if (evaldate28 < todaydate) {
                if (dischargedate28 < evaldate28) {
                    document.getElementById('tr' + type + 'Cl");
            WriteLiteral(@"arDate3Reason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                    removechanges(type + 'ClarDate3Reason')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate3Reason').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                        document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Reclarification #3 Date'
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                document.getEleme");
            WriteLiteral(@"ntById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                removechanges(type + 'ClarDate3Reason')
            }
            document.getElementById('tr' + type + 'ClarDate3').classList.remove('therapyvisable')

            if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'C");
            WriteLiteral(@"larDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')

                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                    removechanges(type + 'ClarDate2SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate2SignedRea");
            WriteLiteral(@"son').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                    removechanges(type + 'ClarDate2SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElementById('txt' + type + 'ClarDate1').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate1').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.remove('therapyvisable')
         ");
            WriteLiteral(@"           document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate2Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate2ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }

                document.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate2Signed').value = ''
                removechanges(type + 'ClarDate2Signed')
            }

            document.getElementById('tr' + type + 'ClarDate3').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3').value = ''
            removechanges(type + 'ClarDate3')

            document.getElementById('tr' + type + 'ClarDate2Signed').classList.add('therapyvisable')
            document.getElementBy");
            WriteLiteral(@"Id('txt' + type + 'ClarDate2Signed').value = ''
            removechanges(type + 'ClarDate2Signed')

            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
            removechanges(type + 'ClarDate3Reason')

            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
            removechanges(type + 'ClarDate2SignedReason')

            document.getElementById('tr' + type");
            WriteLiteral(@" + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
            removechanges(type + 'ClarDate2SignedYesNo')

            checkClarDate3('PT')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate2Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate2Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate2SignedRe");
            WriteLiteral(@"ason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')

                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate2SignedYesNo').value = ''
                removechanges(type + 'ClarDate2SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate2SignedYesNo').classList.remove('therapyvisable')

                docume");
            WriteLiteral(@"nt.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate2SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate2SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate2SignedReason').value = ''
                removechanges(type + 'ClarDate2SignedReason')
            }
        } else {
            checkClarDate2(type)
        }
        therapyresize()
        checkcomplete()
    }



    function checkClarDate3(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate3').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            var prevclar = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))

            prevclar.setDate(prevclar.getDate() + 28)

            if (evaldate <= prevclar) {
      ");
            WriteLiteral(@"          document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3Reason').value = ''
                removechanges(type + 'ClarDate3Reason')

            } else {

                document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for ' + type + ' Reclarification grater than 28 days from previous clarification'
            }

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.remove('therapyvisable')



            var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            evaldate.setDate(evaldate.getDate() + 30)
");
            WriteLiteral(@"            evaldate28.setDate(evaldate28.getDate() + 28)
            var dischargedate
            var dischargedate28
            var todaydate = new Date()

            var displaydate = evaldate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });

            document.getElementById(type + 'ClarDate3SignedDue').innerHTML = '(Due by ' + displaydate + ')'

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                dischargedate = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
                dischargedate28 = new Date(Date.parse(document.getElementById('txt' + type + 'DischargeDate').value))
            } else {
                dischargedate = new Date()
                dischargedate.setDate(dischargedate.getDate() + 30)

                dischargedate28 = new Date()
                dischargedate28.setDate(dischargedate28.get");
            WriteLiteral(@"Date() + 30)
            }

            if (evaldate < todaydate) {
                if (dischargedate < evaldate) {
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')

                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value");
            WriteLiteral(@" = ''
                    removechanges(type + 'ClarDate3SignedYesNo')
                } else {
                    if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {

                    } else {
                        document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.remove('therapyvisable')

                        document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                        document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                        document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                        document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                        removechanges(type + 'ClarDate3SignedYesNo')
                    }

                }
            } else {
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('ther");
            WriteLiteral(@"apyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')

                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                removechanges(type + 'ClarDate3SignedYesNo')
            }


            if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {
                var evaldate = new Date(Date.parse(document.getEle");
            WriteLiteral(@"mentById('txt' + type + 'ClarDate3').value))
                evaldate.setDate(evaldate.getDate() + 30)
                var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3Signed').value))

                if (evaldate >= signdate) {
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')

                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                    document.getElementById('");
            WriteLiteral(@"td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                    document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                    removechanges(type + 'ClarDate3SignedYesNo')
                } else {
                    document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.remove('therapyvisable')

                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                    document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                    removechanges(type + 'ClarDate3SignedReason')
                }
            }

        } else {
            if (moment(document.getElementById('txt' + type + 'EvalDate').value).isValid() && moment(document.getElemen");
            WriteLiteral(@"tById('txt' + type + 'ClarDate1').value).isValid()) {
                var evaldate28 = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate2').value))
                evaldate28.setDate(evaldate28.getDate() + 28)
                var todaydate = new Date()

                if (evaldate28 < todaydate) {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.remove('therapyvisable')
                    document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                } else {
                    document.getElementById('tr' + type + 'ClarDate3Reason').classList.add('therapyvisable')
                    document.getElementById(type + 'ClarDate3ReasonText').innerHTML = 'Remedy for no ' + type + ' Clarification Date'
                }

                document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
                document.getElementById('txt' + type + 'ClarDate3Si");
            WriteLiteral(@"gned').value = ''
                removechanges(type + 'ClarDate3Signed')
            }

            document.getElementById('tr' + type + 'ClarDate3Signed').classList.add('therapyvisable')
            document.getElementById('txt' + type + 'ClarDate3Signed').value = ''
            removechanges(type + 'ClarDate3Signed')

            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate3SignedReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
            removechanges(type + 'ClarDate3SignedReason')

            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
            document.getElementById('td' +");
            WriteLiteral(@" type + 'ClarDate3SignedYesNo').classList.add('tderror')
            document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
            removechanges(type + 'ClarDate3SignedYesNo')
        }
        therapyresize()
        checkcomplete()
    }

    function checkClarDate3Signed(type) {
        if (moment(document.getElementById('txt' + type + 'ClarDate3Signed').value).isValid()) {
            var evaldate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3').value))
            evaldate.setDate(evaldate.getDate() + 30)
            var signdate = new Date(Date.parse(document.getElementById('txt' + type + 'ClarDate3Signed').value))

            if (evaldate >= signdate) {
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedReason').classList.ad");
            WriteLiteral(@"d('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')

                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDate3SignedYesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'ClarDate3SignedYesNo').value = ''
                removechanges(type + 'ClarDate3SignedYesNo')
            } else {
                document.getElementById('tr' + type + 'ClarDate3SignedYesNo').classList.remove('therapyvisable')

                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDate3SignedReason').classList.add('trerror')
                document.getElementById('");
            WriteLiteral(@"td' + type + 'ClarDate3SignedReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDate3SignedReason').value = ''
                removechanges(type + 'ClarDate3SignedReason')
            }
        } else {
            checkClarDate3(type)
        }
        therapyresize()
        checkcomplete()
    }

    function addther(type) {
        document.getElementById(type).classList.remove('therapyvisable')
        document.getElementById('add' + type).classList.add('hidden')
        document.getElementById('td' + type).classList.add('hidden')
        document.getElementById('remove' + type).classList.remove('hidden')
        therapyresize()
        checkcomplete()
    }

    function removether(type) {
        document.getElementById('txt' + type + 'EvalDate').value = ''
        removechanges(type + 'EvalDate')
        checkevaldate(type)
        document.getElementById(type).classList.add('therapyvisable')
        document.getElementById('add' + type).classList.remove('hi");
            WriteLiteral(@"dden')
        document.getElementById('td' + type).classList.remove('hidden')
        document.getElementById('remove' + type).classList.add('hidden')
        therapyresize()
        checkcomplete()
    }

    function nowarning(type) {
        if (document.getElementById('dd' + type).value == 'No') {
            document.getElementById('td' + type).classList.add('tdwarn')
        } else {
            document.getElementById('td' + type).classList.remove('tdwarn')
        }
    }

    function consentcheck() {
        if (moment(document.getElementById('txtMRConsent').value).isValid() && moment(document.getElementById('txtStartDate').value).isValid()) {
            if (document.getElementById('txtMRConsent').value == document.getElementById('txtStartDate').value) {
                document.getElementById('tdMRConsent').classList.remove('tdwarn')
            } else {
                document.getElementById('tdMRConsent').classList.add('tdwarn')
            }
        } else {
            document.getElementByI");
            WriteLiteral(@"d('tdMRConsent').classList.remove('tdwarn')
        }
    }

    function checkallmr() {
        checkinitial()
        checkmrduedate('MR1ReCert', 1)
        checkmrduedate('MR2ReCert', 2)
        checkmrduedate('MR3ReCert', 3)
        checkmrduedate('MR4ReCert', 4)
        checkmrduedate('MR5ReCert', 5)
    }

    function checkmrduedate(type, num) {
        if (moment(document.getElementById('txt' + type + 'Due').value).isValid()) {

            var monthcheck = new Date(Date.parse('");
#nullable restore
#line 6625 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var todaysdate = new Date()
            var duedate = new Date(Date.parse(document.getElementById('txt' + type + 'DueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txt' + type + 'Due').value))

            if (donedate > duedate) {
                document.getElementById('tr' + type + 'YesNo').classList.remove('mroverride')
            } else {
                document.getElementById('tr' + type + 'YesNo').classList.add('mroverride')
                document.getElementById('tr' + type + 'YesNo').classList.add('trerror')
                document.getElementById('td' + type + 'YesNo').classList.add('tderror')
                document.getElementById('dd' + type + 'YesNo').value = ''
                removechanges(type + 'YesNo')
            }

            if (num == 1 || num == 2 || num == 3 || num == 4) {
                num = num + 1
                donedate.setDate(donedate.getDate() + 30)

                var displaydate = donedate.toLocaleDateString(""en-");
            WriteLiteral(@"us"", {
                    year: ""numeric"",
                    month: ""2-digit"",
                    day: ""2-digit"",
                });

                document.getElementById('txtMR' + num.toString() + 'ReCertDueCert').value = displaydate
                document.getElementById('MR' + num.toString() + 'ReCertDueCertText').innerHTML = displaydate


                if (donedate < monthcheck) {
                    document.getElementById('trMR' + num.toString() + 'ReCertDue').classList.remove('mroverride')

                    if (donedate < todaysdate) {
                        document.getElementById('txtMR' + num.toString() + 'ReCertDue').setAttribute('onchange', 'datecheck(\'MR' + num.toString() + 'ReCertDue\'); checkmrduedate(\'MR' + num.toString() + 'ReCert\', ' + num.toString() + ')');
                        document.getElementById('txtMR' + num.toString() + 'ReCertDue').setAttribute('onkeyup', 'datecheck(\'MR' + num.toString() + 'ReCertDue\'); checkmrduedate(\'MR' + num.toString() + 'ReCert\', ' + n");
            WriteLiteral(@"um.toString() + ')');

                        if (moment(document.getElementById('txtMR' + num.toString() + 'ReCertDue').value).isValid()) {
                            document.getElementById('trMR' + num.toString() + 'ReCertDue').classList.remove('trerror')
                            document.getElementById('tdMR' + num.toString() + 'ReCertDue').classList.remove('tderror')
                        } else {
                            document.getElementById('trMR' + num.toString() + 'ReCertDue').classList.add('trerror')
                            document.getElementById('tdMR' + num.toString() + 'ReCertDue').classList.add('tderror')
                        }


                    } else {
                        document.getElementById('txtMR' + num.toString() + 'ReCertDue').setAttribute('onchange', 'datechecknoerror(\'MR' + num.toString() + 'ReCertDue\'); checkmrduedate(\'MR' + num.toString() + 'ReCert\', ' + num.toString() + ')');
                        document.getElementById('txtMR' + num.toString() ");
            WriteLiteral(@"+ 'ReCertDue').setAttribute('onkeyup', 'datechecknoerror(\'MR' + num.toString() + 'ReCertDue\'); checkmrduedate(\'MR' + num.toString() + 'ReCert\', ' + num.toString() + ')');
                        document.getElementById('trMR' + num.toString() + 'ReCertDue').classList.remove('trerror')
                        document.getElementById('tdMR' + num.toString() + 'ReCertDue').classList.remove('tderror')
                    }

                } else {
                    document.getElementById('trMR' + num.toString() + 'ReCertDue').classList.add('mroverride')
                    document.getElementById('txtMR' + num.toString() + 'ReCertDue').value = ''
                    removechanges('MR' + num.toString() + 'ReCertDue')
                }
            }

        } else {
            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror'");
            WriteLiteral(@")
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')

            if (num <= 4) {
                document.getElementById('trMR5ReCertDue').classList.add('mroverride')
                document.getElementById('trMR5ReCertDue').classList.add('trerror')
                document.getElementById('tdMR5ReCertDue').classList.add('tderror')
                document.getElementById('txtMR5ReCertDue').value = ''
                removechanges('MR5ReCertDue')

                document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR4ReCertYesNo').value = ''
                removechanges('MR4ReCertYesNo')
            }

            if (num <= 3) {
                document.getElementById('trMR4ReCertDue').classList.add('mroverride')
       ");
            WriteLiteral(@"         document.getElementById('trMR4ReCertDue').classList.add('trerror')
                document.getElementById('tdMR4ReCertDue').classList.add('tderror')
                document.getElementById('txtMR4ReCertDue').value = ''
                removechanges('MR4ReCertDue')

                document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR3ReCertYesNo').value = ''
                removechanges('MR3ReCertYesNo')
            }

            if (num <= 2) {
                document.getElementById('trMR3ReCertDue').classList.add('mroverride')
                document.getElementById('trMR3ReCertDue').classList.add('trerror')
                document.getElementById('tdMR3ReCertDue').classList.add('tderror')
                document.getElementById('txtMR3ReCertDue').value = ''
      ");
            WriteLiteral(@"          removechanges('MR3ReCertDue')

                document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR2ReCertYesNo').value = ''
                removechanges('MR2ReCertYesNo')
            }

            if (num <= 1) {
                document.getElementById('trMR2ReCertDue').classList.add('mroverride')
                document.getElementById('trMR2ReCertDue').classList.add('trerror')
                document.getElementById('tdMR2ReCertDue').classList.add('tderror')
                document.getElementById('txtMR2ReCertDue').value = ''
                removechanges('MR2ReCertDue')

                document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
                docum");
            WriteLiteral(@"ent.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR1ReCertYesNo').value = ''
                removechanges('MR1ReCertYesNo')
            }


        }




        mrresize()
    }

    function initialrequired() {
        if (moment(document.getElementById('txtStartDate').value).isValid()) {
            var monthcheck = new Date(Date.parse('");
#nullable restore
#line 6758 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var todaysdate = new Date()
            var duedate = new Date(Date.parse(document.getElementById('txtMRInitialDueCert').value))

            if (duedate < monthcheck) {
                document.getElementById('trMRInitialDue').classList.remove('mroverride')

                if (duedate < todaysdate) {
                    document.getElementById('txtMRInitialDue').setAttribute('onchange', 'datecheck(\'MRInitialDue\'); checkinitial()');
                    document.getElementById('txtMRInitialDue').setAttribute('onkeyup', 'datecheck(\'MRInitialDue\'); checkinitial()');

                    if (moment(document.getElementById('txtMRInitialDue').value).isValid()) {
                        document.getElementById('trMRInitialDue').classList.remove('trerror')
                        document.getElementById('tdMRInitialDue').classList.remove('tderror')
                    } else {
                        document.getElementById('trMRInitialDue').classList.add('trerror')
                        docume");
            WriteLiteral(@"nt.getElementById('tdMRInitialDue').classList.add('tderror')
                    }

                } else {
                    document.getElementById('txtMRInitialDue').setAttribute('onchange', 'datechecknoerror(\'MRInitialDue\'); checkinitial()');
                    document.getElementById('txtMRInitialDue').setAttribute('onkeyup', 'datechecknoerror(\'MRInitialDue\'); checkinitial()');
                    document.getElementById('trMRInitialDue').classList.remove('trerror')
                    document.getElementById('tdMRInitialDue').classList.remove('tderror')
                }

            } else {
                document.getElementById('trMRInitialDue').classList.add('mroverride')
                document.getElementById('txtMRInitialDue').value = ''
                removechanges('MRInitialDue')
                checkinitial()
            }
        }
        mrresize()
    }

    function checkinitial() {
        if (moment(document.getElementById('txtMRInitialDue').value).isValid()) {
            var");
            WriteLiteral(" monthcheck = new Date(Date.parse(\'");
#nullable restore
#line 6796 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var todaysdate1 = new Date()

            var duedate = new Date(Date.parse(document.getElementById('txtMRInitialDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMRInitialDue').value))

            if (donedate > duedate) {
                document.getElementById('trMRInitialYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMRInitialYesNo').classList.add('mroverride')
                document.getElementById('trMRInitialYesNo').classList.add('trerror')
                document.getElementById('tdMRInitialYesNo').classList.add('tderror')
                document.getElementById('ddMRInitialYesNo').value = ''
                removechanges('MRInitialYesNo')
            }


            var duedate1 = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))


            if (duedate1 < monthcheck) {
                document.getElementById('trMR1ReCertDue').classList.remove('mroverride')

");
            WriteLiteral(@"                if (duedate1 < todaysdate1) {
                    document.getElementById('txtMR1ReCertDue').setAttribute('onchange', 'datecheck(\'MR1ReCertDue\'); checkmrduedate(\'MR1ReCert\', 1)');
                    document.getElementById('txtMR1ReCertDue').setAttribute('onkeyup', 'datecheck(\'MR1ReCertDue\'); checkmrduedate(\'MR1ReCert\', 1)');

                    if (moment(document.getElementById('txtMR1ReCertDue').value).isValid()) {
                        document.getElementById('trMR1ReCertDue').classList.remove('trerror')
                        document.getElementById('tdMR1ReCertDue').classList.remove('tderror')
                    } else {
                        document.getElementById('trMR1ReCertDue').classList.add('trerror')
                        document.getElementById('tdMR1ReCertDue').classList.add('tderror')
                    }

                } else {
                    document.getElementById('txtMR1ReCertDue').setAttribute('onchange', 'datechecknoerror(\'MR1ReCertDue\'); chec");
            WriteLiteral(@"kmrduedate(\'MR1ReCert\', 1)');
                    document.getElementById('txtMR1ReCertDue').setAttribute('onkeyup', 'datechecknoerror(\'MR1ReCertDue\'); checkmrduedate(\'MR1ReCert\', 1)');
                    document.getElementById('trMR1ReCertDue').classList.remove('trerror')
                    document.getElementById('tdMR1ReCertDue').classList.remove('tderror')
                }
            }


        } else {


            document.getElementById('trMRInitialYesNo').classList.add('mroverride')
            document.getElementById('trMRInitialYesNo').classList.add('trerror')
            document.getElementById('tdMRInitialYesNo').classList.add('tderror')
            document.getElementById('ddMRInitialYesNo').value = ''
            removechanges('MRInitialYesNo')

            document.getElementById('trMR1ReCertDue').classList.add('mroverride')
            document.getElementById('trMR1ReCertDue').classList.add('trerror')
            document.getElementById('tdMR1ReCertDue').classList.add('tderror')
 ");
            WriteLiteral(@"           document.getElementById('txtMR1ReCertDue').value = ''
            removechanges('MR1ReCertDue')

            document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR1ReCertYesNo').value = ''
            removechanges('MR1ReCertYesNo')

            document.getElementById('trMR2ReCertDue').classList.add('mroverride')
            document.getElementById('trMR2ReCertDue').classList.add('trerror')
            document.getElementById('tdMR2ReCertDue').classList.add('tderror')
            document.getElementById('txtMR2ReCertDue').value = ''
            removechanges('MR2ReCertDue')

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2Re");
            WriteLiteral(@"CertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('trMR3ReCertDue').classList.add('trerror')
            document.getElementById('tdMR3ReCertDue').classList.add('tderror')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('trMR4ReCertDue').classList.add('trerror')
       ");
            WriteLiteral(@"     document.getElementById('tdMR4ReCertDue').classList.add('tderror')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('trMR5ReCertDue').classList.add('trerror')
            document.getElementById('tdMR5ReCertDue').classList.add('tderror')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesN");
            WriteLiteral(@"o').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }

    function check1st() {
        if (moment(document.getElementById('txtMR1ReCertDue').value).isValid()) {
            document.getElementById('trMR1ReCertReason').classList.add('mroverride')
            document.getElementById('trMR1ReCertReason').classList.add('trerror')
            document.getElementById('tdMR1ReCertReason').classList.add('tderror')
            document.getElementById('txtMR1ReCertReason').value = ''
            removechanges('MR1ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR1ReCertYesNo");
            WriteLiteral(@"').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR1ReCertYesNo').value = ''
                removechanges('MR1ReCertYesNo')
            }


            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });



            var monthcheck = new Date(Date.parse('");
#nullable restore
#line 6944 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var duedate2 = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))
            var todaysdate2 = new Date()

            if (duedate2 < monthcheck) {
                document.getElementById('trMR2ReCertDue').classList.remove('mroverride')
                document.getElementById('txtMR2ReCertDueCert').value = displaydate
                document.getElementById('MR2ReCertDueCertText').innerHTML = displaydate

                if (duedate2 < todaysdate2) {
                    document.getElementById('trMR2ReCertReason').classList.remove('mroverride')
                } else {
                    document.getElementById('trMR2ReCertReason').classList.add('mroverride')
                    document.getElementById('trMR2ReCertReason').classList.add('trerror')
                    document.getElementById('tdMR2ReCertReason').classList.add('tderror')
                    document.getElementById('txtMR2ReCertReason').value = ''
                    removechanges('MR2ReCertReason')
    ");
            WriteLiteral(@"            }
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR1ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR1ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR1ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR1ReCertReason').classList.add('mroverride')
                docum");
            WriteLiteral(@"ent.getElementById('trMR1ReCertReason').classList.add('trerror')
                document.getElementById('tdMR1ReCertReason').classList.add('tderror')
                document.getElementById('txtMR1ReCertReason').value = ''
                removechanges('MR1ReCertReason')
            }

            document.getElementById('trMR1ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR1ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR1ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR1ReCertYesNo').value = ''
            removechanges('MR1ReCertYesNo')

            document.getElementById('trMR2ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR2ReCertDue').value = ''
            removechanges('MR2ReCertDue')

            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document");
            WriteLiteral(@".getElementById('tdMR2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCert");
            WriteLiteral(@"Reason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReC");
            WriteLiteral(@"ertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('t");
            WriteLiteral(@"rerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check2st() {
        if (moment(document.getElementById('txtMR2ReCertDue').value).isValid()) {
            document.getElementById('trMR2ReCertReason').classList.add('mroverride')
            document.getElementById('trMR2ReCertReason').classList.add('trerror')
            document.getElementById('tdMR2ReCertReason').classList.add('tderror')
            document.getElementById('txtMR2ReCertReason').value = ''
            removechanges('MR2ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR2ReCertYesNo').classList.remov");
            WriteLiteral(@"e('mroverride')
            } else {
                document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR2ReCertYesNo').value = ''
                removechanges('MR2ReCertYesNo')
            }

            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });



            var monthcheck = new Date(Date.parse('");
#nullable restore
#line 7096 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var duedate3 = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))
            var todaysdate3 = new Date()

            if (duedate3 < monthcheck) {
                document.getElementById('trMR3ReCertDue').classList.remove('mroverride')
                document.getElementById('txtMR3ReCertDueCert').value = displaydate
                document.getElementById('MR3ReCertDueCertText').innerHTML = displaydate

                if (duedate3 < todaysdate3) {
                    document.getElementById('trMR3ReCertReason').classList.remove('mroverride')
                } else {
                    document.getElementById('trMR3ReCertReason').classList.add('mroverride')
                    document.getElementById('trMR3ReCertReason').classList.add('trerror')
                    document.getElementById('tdMR3ReCertReason').classList.add('tderror')
                    document.getElementById('txtMR3ReCertReason').value = ''
                    removechanges('MR3ReCertReason')
    ");
            WriteLiteral(@"            }
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR2ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR2ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR2ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR2ReCertReason').classList.add('mroverride')
                docum");
            WriteLiteral(@"ent.getElementById('trMR2ReCertReason').classList.add('trerror')
                document.getElementById('tdMR2ReCertReason').classList.add('tderror')
                document.getElementById('txtMR2ReCertReason').value = ''
                removechanges('MR2ReCertReason')
            }

            document.getElementById('trMR2ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR2ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR2ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR2ReCertYesNo').value = ''
            removechanges('MR2ReCertYesNo')

            document.getElementById('trMR3ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR3ReCertDue').value = ''
            removechanges('MR3ReCertDue')

            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document");
            WriteLiteral(@".getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCert");
            WriteLiteral(@"Reason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReC");
            WriteLiteral(@"ertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check3st() {
        if (moment(document.getElementById('txtMR3ReCertDue').value).isValid()) {
            document.getElementById('trMR3ReCertReason').classList.add('mroverride')
            document.getElementById('trMR3ReCertReason').classList.add('trerror')
            document.getElementById('tdMR3ReCertReason').classList.add('tderror')
            document.getElementById('txtMR3ReCertReason').value = ''
            removechanges('MR3ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDue').value))

  ");
            WriteLiteral(@"          if (donedate > duedate) {
                document.getElementById('trMR3ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR3ReCertYesNo').value = ''
                removechanges('MR3ReCertYesNo')
            }

            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });



            var monthcheck = new Date(Date.parse('");
#nullable restore
#line 7232 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var duedate4 = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))
            var todaysdate4 = new Date()

            if (duedate4 < monthcheck) {
                document.getElementById('trMR4ReCertDue').classList.remove('mroverride')
                document.getElementById('txtMR4ReCertDueCert').value = displaydate
                document.getElementById('MR4ReCertDueCertText').innerHTML = displaydate

                if (duedate4 < todaysdate4) {
                    document.getElementById('trMR4ReCertReason').classList.remove('mroverride')
                } else {
                    document.getElementById('trMR4ReCertReason').classList.add('mroverride')
                    document.getElementById('trMR4ReCertReason').classList.add('trerror')
                    document.getElementById('tdMR4ReCertReason').classList.add('tderror')
                    document.getElementById('txtMR4ReCertReason').value = ''
                    removechanges('MR4ReCertReason')
    ");
            WriteLiteral(@"            }
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR3ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR3ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR3ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR3ReCertReason').classList.add('mroverride')
                docum");
            WriteLiteral(@"ent.getElementById('trMR3ReCertReason').classList.add('trerror')
                document.getElementById('tdMR3ReCertReason').classList.add('tderror')
                document.getElementById('txtMR3ReCertReason').value = ''
                removechanges('MR3ReCertReason')
            }

            document.getElementById('trMR3ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR3ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR3ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR3ReCertYesNo').value = ''
            removechanges('MR3ReCertYesNo')

            document.getElementById('trMR4ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR4ReCertDue').value = ''
            removechanges('MR4ReCertDue')

            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document");
            WriteLiteral(@".getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCert");
            WriteLiteral(@"Reason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }



    function check4st() {
        if (moment(document.getElementById('txtMR4ReCertDue').value).isValid()) {
            document.getElementById('trMR4ReCertReason').classList.add('mroverride')
            document.getElementById('trMR4ReCertReason').classList.add('trerror')
            document.getElementById('tdMR4ReCertReason').classList.add('tderror')
            document.getElementById('txtMR4ReCertReason').value = ''
            removechanges('MR4ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert'");
            WriteLiteral(@").value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR4ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR4ReCertYesNo').value = ''
                removechanges('MR4ReCertYesNo')
            }

            donedate.setDate(donedate.getDate() + 30)

            var displaydate = donedate.toLocaleDateString(""en-us"", {
                year: ""numeric"",
                month: ""2-digit"",
                day: ""2-digit"",
            });



            var monthcheck = new Date(Date.parse('");
#nullable restore
#line 7352 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                             Write(Html.Raw(ViewData["intmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'))
            var duedate5 = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))
            var todaysdate5 = new Date()

            if (duedate5 < monthcheck) {
                document.getElementById('trMR5ReCertDue').classList.remove('mroverride')
                document.getElementById('txtMR5ReCertDueCert').value = displaydate
                document.getElementById('MR5ReCertDueCertText').innerHTML = displaydate

                if (duedate5 < todaysdate5) {
                    document.getElementById('trMR5ReCertReason').classList.remove('mroverride')
                } else {
                    document.getElementById('trMR5ReCertReason').classList.add('mroverride')
                    document.getElementById('trMR5ReCertReason').classList.add('trerror')
                    document.getElementById('tdMR5ReCertReason').classList.add('tderror')
                    document.getElementById('txtMR5ReCertReason').value = ''
                    removechanges('MR5ReCertReason')
    ");
            WriteLiteral(@"            }
            }
        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR4ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new Date(Date.parse(document.getElementById('txtMR4ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR4ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR4ReCertReason').classList.add('mroverride')
                docum");
            WriteLiteral(@"ent.getElementById('trMR4ReCertReason').classList.add('trerror')
                document.getElementById('tdMR4ReCertReason').classList.add('tderror')
                document.getElementById('txtMR4ReCertReason').value = ''
                removechanges('MR4ReCertReason')
            }

            document.getElementById('trMR4ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR4ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR4ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR4ReCertYesNo').value = ''
            removechanges('MR4ReCertYesNo')

            document.getElementById('trMR5ReCertDue').classList.add('mroverride')
            document.getElementById('txtMR5ReCertDue').value = ''
            removechanges('MR5ReCertDue')

            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document");
            WriteLiteral(@".getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('MR5ReCertReason')

            document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')
        }
        mrresize()
    }

    function check5st() {
        if (moment(document.getElementById('txtMR5ReCertDue').value).isValid()) {
            document.getElementById('trMR5ReCertReason').classList.add('mroverride')
            document.getElementById('trMR5ReCertReason').classList.add('trerror')
            document.getElementById('tdMR5ReCertReason').classList.add('tderror')
            document.getElementById('txtMR5ReCertReason').value = ''
            removechanges('M");
            WriteLiteral(@"R5ReCertReason')

            var duedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))
            var donedate = new Date(Date.parse(document.getElementById('txtMR5ReCertDue').value))

            if (donedate > duedate) {
                document.getElementById('trMR5ReCertYesNo').classList.remove('mroverride')
            } else {
                document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
                document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
                document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
                document.getElementById('ddMR5ReCertYesNo').value = ''
                removechanges('MR5ReCertYesNo')
            }

        } else {
            var todaysdate = new Date()
            var duedate
            if (document.getElementById('trMR5ReCertDue').classList.contains('mroverride')) {
                duedate = new Date()
            } else {
                duedate = new D");
            WriteLiteral(@"ate(Date.parse(document.getElementById('txtMR5ReCertDueCert').value))

                if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                    var lastday = new Date(Date.parse(document.getElementById('txtDCLastDay').value))

                    if (lastday < todaysdate) {
                        todaysdate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
                    }
                }
            }

            if (duedate < todaysdate) {
                document.getElementById('trMR5ReCertReason').classList.remove('mroverride')
            } else {
                document.getElementById('trMR5ReCertReason').classList.add('mroverride')
                document.getElementById('trMR5ReCertReason').classList.add('trerror')
                document.getElementById('tdMR5ReCertReason').classList.add('tderror')
                document.getElementById('txtMR5ReCertReason').value = ''
                removechanges('MR5ReCertReason')
            }

    ");
            WriteLiteral(@"        document.getElementById('trMR5ReCertYesNo').classList.add('mroverride')
            document.getElementById('trMR5ReCertYesNo').classList.add('trerror')
            document.getElementById('tdMR5ReCertYesNo').classList.add('tderror')
            document.getElementById('ddMR5ReCertYesNo').value = ''
            removechanges('MR5ReCertYesNo')

        }
        mrresize()
    }


    function checktherapyadds() {
        if (document.getElementById('txtPT2EvalDate').value != '') {
            addther('PT2')
        }
        if (document.getElementById('txtPT3EvalDate').value != '') {
            addther('PT3')
        }
    }

    function setdropdowns(dd, option) {
        var desiredValue = option
        var el = document.getElementById(dd);
        for (var i = 0; i < el.options.length; i++) {
            if (el.options[i].text == desiredValue) {
                el.selectedIndex = i;
            }
        }
    }

    function checkMDST() {

        if (document.getElementById('cbMDSTDischarge').");
            WriteLiteral(@"checked == true) {
            document.getElementById('trMDSTST').classList.remove(""MDSTheroverride"")
            document.getElementById('trMDSTOT').classList.remove(""MDSTheroverride"")
            document.getElementById('trMDSTPT').classList.remove(""MDSTheroverride"")
        } else {
            document.getElementById('tr' + 'MDSTST').classList.add(""MDSTheroverride"")
            document.getElementById('td' + 'MDSTST').classList.add(""tderror"")
            document.getElementById('tr' + 'MDSTST').classList.add(""trerror"")
            document.getElementById('dd' + 'MDSTST').value = ''
            removechanges('MDSTST')

            document.getElementById('tr' + 'MDSTOT').classList.add(""MDSTheroverride"")
            document.getElementById('td' + 'MDSTOT').classList.add(""tderror"")
            document.getElementById('tr' + 'MDSTOT').classList.add(""trerror"")
            document.getElementById('dd' + 'MDSTOT').value = ''
            removechanges('MDSTOT')

            document.getElementById('tr' + 'MDSTPT");
            WriteLiteral(@"').classList.add(""MDSTheroverride"")
            document.getElementById('td' + 'MDSTPT').classList.add(""tderror"")
            document.getElementById('tr' + 'MDSTPT').classList.add(""trerror"")
            document.getElementById('dd' + 'MDSTPT').value = ''
            removechanges('MDSTPT')
        }

        MDSTherresize()
    }

    function dcdischargedate() {
        if (moment(document.getElementById('txtDCDischarge').value).isValid()) {
            document.getElementById('tr' + 'DischargeLoc').classList.remove(""dcoverride"")
            document.getElementById('trMDSTDischarge').classList.remove(""MDSTheroverride"")
            checkMDST()
        } else {

            document.getElementById('tr' + 'MDSTDischarge').classList.add(""MDSTheroverride"")
            document.getElementById('td' + 'MDSTDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'MDSTDischarge').classList.add(""trerror"")
            document.getElementById('cb' + 'MDSTDischarge').checked = false
            re");
            WriteLiteral(@"movechanges('MDSTDischarge')
            checkMDST()

            document.getElementById('tr' + 'DischargeLoc').classList.add(""dcoverride"")
            document.getElementById('td' + 'DischargeLoc').classList.add(""tderror"")
            document.getElementById('tr' + 'DischargeLoc').classList.add(""trerror"")
            document.getElementById('dd' + 'DischargeLoc').value = ''
            removechanges('DischargeLoc')

            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getElementById('dd' + 'DrivenDischarge').value = ''
            removechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay'");
            WriteLiteral(@").classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classLi");
            WriteLiteral(@"st.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }
        checkcomplete()
        dcresize()
        MDSTherresize()
        checkallmr()

    }

    function dcdischargeloc() {
        var dd = document.getElementById('ddDischargeLoc')

        if (dd.value == '01 - Home' || dd.value == '06 - Home w/HH' || dd.value == '07 - AMA' || dd.value == 'Other') {
            document.getElementById('tr' + 'DrivenDischarge').classList.remove(""dcoverride"")

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('");
            WriteLiteral(@"td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            if (dd.value == '07 - AMA') {
                if (document.getElementById('ddDrivenDischarge').value == '') {
                    document.getElementById('ddDrivenDischarge').value = 'Yes'
                    ddcheck('DrivenDischarge')
                    dcyesno()
                }
            }
        }

        if (dd.value == '02 - Hospital' || dd.value == '20 - Expired') {
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getElementById('dd' + 'DrivenDischarge').value = ''
            removechanges('DrivenDischarge')

            document.getElemen");
            WriteLiteral(@"tById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getEle");
            WriteLiteral(@"mentById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }

        if (dd.value == '04 - LTC') {
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""trerror"")
            document.getEle");
            WriteLiteral(@"mentById('dd' + 'DrivenDischarge').value = ''
            removechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')

            document.getElementById('tr' + 'DCLastDay').classList.remove(""dcoverride"")
            document.getElementById('tr' + 'DCNOMNC').classList.remove(""dcoverride"")
            document.getElementById('tr' + 'DCABN').classList.remove(""dcoverride"")
        }

        if (dd.value == '') {

            document.getElementById('tr' + 'DrivenDischarge').classList.add(""dcoverride"")
            document.getElementById('td' + 'DrivenDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'DrivenDischarge').classList.add(""tre");
            WriteLiteral(@"rror"")
            document.getElementById('dd' + 'DrivenDischarge').value = ''
            removechanges('DrivenDischarge')

            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'D");
            WriteLiteral(@"OOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCABN').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCABN').classList.add(""tderror"")
            document.getElementById('tr' + 'DCABN').classList.add(""trerror"")
            document.getElementById('txt' + 'DCABN').value = ''
            removechanges('DCABN')

            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }

        if (dd.value == '20 - Expired') {
            document.getElementById('tr' + 'MDST5Day').classList.add(""MDSTheroverride"")
            document.getElementById('td' + ");
            WriteLiteral(@"'MDST5Day').classList.add(""tderror"")
            document.getElementById('tr' + 'MDST5Day').classList.add(""trerror"")
            document.getElementById('cb' + 'MDST5Day').checked = false
            removechanges('MDST5Day')

            document.getElementById('tr' + 'MDSTDischarge').classList.add(""MDSTheroverride"")
            document.getElementById('td' + 'MDSTDischarge').classList.add(""tderror"")
            document.getElementById('tr' + 'MDSTDischarge').classList.add(""trerror"")
            document.getElementById('cb' + 'MDSTDischarge').checked = false
            removechanges('MDSTDischarge')


        } else {
            document.getElementById('tr' + 'MDST5Day').classList.remove(""MDSTheroverride"")

            if (moment(document.getElementById('txtDCDischarge').value).isValid()) {
                document.getElementById('tr' + 'MDSTDischarge').classList.remove(""MDSTheroverride"")
            }

        }


        if (document.getElementById('trMDSTDischarge').classList.contains(""MDSTheroverride"")");
            WriteLiteral(@" && document.getElementById('trMDST5Day').classList.contains(""MDSTheroverride"") && document.getElementById('trMDSTST').classList.contains(""MDSTheroverride"") && document.getElementById('trMDSTOT').classList.contains(""MDSTheroverride"") && document.getElementById('trMDSTPT').classList.contains(""MDSTheroverride"")) {
            document.getElementById('MDSTherapyWhole').classList.add('hidden')
        } else {
            if (document.getElementById('ddPaymentType').value == ""MCB"" || document.getElementById('ddPaymentType').value == ""HMO Levels"") {
                document.getElementById('MDSTherapyWhole').classList.add('hidden')
            } else {
                document.getElementById('MDSTherapyWhole').classList.remove('hidden')
            }
        }

        dcresize()
        MDSTherresize()
        checkallmr()
        checkcomplete()
    }

    function dcdaychange() {
        if (moment(document.getElementById('txtDCNOMNC').value).isValid() && moment(document.getElementById('txtDCLastDay').value).isV");
            WriteLiteral(@"alid()) {
            var donedate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
            donedate.setDate(donedate.getDate() - 2)

            var lastdate = new Date(Date.parse(document.getElementById('txtDCNOMNC').value))

            if (lastdate > donedate) {
                document.getElementById('tr' + 'DOOR').classList.remove(""dcoverride"")
                document.getElementById('tdDCNOMNC').classList.add(""tdwarn"")
            } else {
                document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
                document.getElementById('td' + 'DOOR').classList.add(""tderror"")
                document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
                document.getElementById('txt' + 'DOOR').value = ''
                removechanges('DOOR')
                document.getElementById('tdDCNOMNC').classList.remove(""tdwarn"")
            }

        } else {
            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
         ");
            WriteLiteral(@"   document.getElementById('td' + 'DOOR').classList.add(""tderror"")
            document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')
            document.getElementById('tdDCNOMNC').classList.remove(""tdwarn"")
        }


        if (moment(document.getElementById('txtDCABN').value).isValid() && moment(document.getElementById('txtDCLastDay').value).isValid()) {
            var donedate = new Date(Date.parse(document.getElementById('txtDCLastDay').value))
            donedate.setDate(donedate.getDate() - 2)

            var lastdate = new Date(Date.parse(document.getElementById('txtDCABN').value))

            if (lastdate > donedate) {
                document.getElementById('tdDCABN').classList.add(""tdwarn"")
                document.getElementById('tr' + 'ABNOR').classList.remove(""dcoverride"")
            } else {
                document.getElementById('tr' + 'ABNOR').classList.add(""dcoverride"")
       ");
            WriteLiteral(@"         document.getElementById('td' + 'ABNOR').classList.add(""tderror"")
                document.getElementById('tr' + 'ABNOR').classList.add(""trerror"")
                document.getElementById('txt' + 'ABNOR').value = ''
                removechanges('ABNOR')
                document.getElementById('tdDCABN').classList.remove(""tdwarn"")
            }

        } else {
            document.getElementById('tdDCABN').classList.remove(""tdwarn"")
        }

        dcresize()
        checkcomplete()
    }

    function MCBDischargeChange() {
        if (moment(document.getElementById('txtDCNOMNCMCB').value).isValid() && moment(document.getElementById('txtMCBDischarge').value).isValid()) {
            var donedate = new Date(Date.parse(document.getElementById('txtMCBDischarge').value))
            donedate.setDate(donedate.getDate() - 2)

            var lastdate = new Date(Date.parse(document.getElementById('txtDCNOMNCMCB').value))

            if (lastdate > donedate) {
                document.getElementById('td");
            WriteLiteral(@"DCNOMNCMCB').classList.add(""tdwarn"")
                document.getElementById('trDOORMCB').classList.remove(""dcoverride"")
            } else {
                document.getElementById('trDOORMCB').classList.add(""dcoverride"")
                document.getElementById('td' + 'DOORMCB').classList.add(""tderror"")
                document.getElementById('tr' + 'DOORMCB').classList.add(""trerror"")
                document.getElementById('txt' + 'DOORMCB').value = ''
                removechanges('DOORMCB')
                document.getElementById('tdDCNOMNCMCB').classList.remove(""tdwarn"")
            }

        } else {
            document.getElementById('trDOORMCB').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOORMCB').classList.add(""tderror"")
            document.getElementById('tr' + 'DOORMCB').classList.add(""trerror"")
            document.getElementById('txt' + 'DOORMCB').value = ''
            removechanges('DOORMCB')
            document.getElementById('tdDCNOMNCMCB').classList.remove(""t");
            WriteLiteral(@"dwarn"")
        }

        dcresize()
        checkcomplete()
    }

    function dcyesno() {
        if (document.getElementById('ddDrivenDischarge').value == 'Yes') {
            document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
            document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
            document.getElementById('txt' + 'DCLastDay').value = ''
            removechanges('DCLastDay')

            document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
            document.getElementById('txt' + 'DCNOMNC').value = ''
            removechanges('DCNOMNC')

            document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
            document.getElementById('td' + 'DOOR').classList.add(""tderror"")
  ");
            WriteLiteral(@"          document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
            document.getElementById('txt' + 'DOOR').value = ''
            removechanges('DOOR')

            document.getElementById('tr' + 'DCNotePresent').classList.remove(""dcoverride"")
        }

        if (document.getElementById('ddDrivenDischarge').value == 'No') {
            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')

            document.getElementById('tr' + 'DCLastDay').classList.remove(""dcoverride"")
            document.getElementById('tr' + 'DCNOMNC').classList.remove(""dcoverride"")
        }

        if (document.getElementById('ddDrivenDischarge').value == '') {
            if (document.getElementById('dd");
            WriteLiteral(@"DischargeLoc').value != '04 - LTC') {
                document.getElementById('tr' + 'DCLastDay').classList.add(""dcoverride"")
                document.getElementById('td' + 'DCLastDay').classList.add(""tderror"")
                document.getElementById('tr' + 'DCLastDay').classList.add(""trerror"")
                document.getElementById('txt' + 'DCLastDay').value = ''
                removechanges('DCLastDay')

                document.getElementById('tr' + 'DCNOMNC').classList.add(""dcoverride"")
                document.getElementById('td' + 'DCNOMNC').classList.add(""tderror"")
                document.getElementById('tr' + 'DCNOMNC').classList.add(""trerror"")
                document.getElementById('txt' + 'DCNOMNC').value = ''
                removechanges('DCNOMNC')

                document.getElementById('tr' + 'DOOR').classList.add(""dcoverride"")
                document.getElementById('td' + 'DOOR').classList.add(""tderror"")
                document.getElementById('tr' + 'DOOR').classList.add(""trerror"")
     ");
            WriteLiteral(@"           document.getElementById('txt' + 'DOOR').value = ''
                removechanges('DOOR')
            }
            document.getElementById('tr' + 'DCNotePresent').classList.add(""dcoverride"")
            document.getElementById('td' + 'DCNotePresent').classList.add(""tderror"")
            document.getElementById('tr' + 'DCNotePresent').classList.add(""trerror"")
            document.getElementById('cb' + 'DCNotePresent').checked = false
            removechanges('DCNotePresent')
        }
        dcresize()
        checkcomplete()
    }

    function mrresize() {
        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('MedicalRecordsContent').style.maxHeight = document.getElementById('MedicalRecordsContent').scrollHeight + ""px"";
        }
    }

    function therapyresize() {
        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('TherapyContent').style.maxHeight = documen");
            WriteLiteral(@"t.getElementById('TherapyContent').scrollHeight + ""px"";
        }
    }

    function boresize() {
        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('frmBO').style.maxHeight = document.getElementById('frmBO').scrollHeight + ""px"";
        }
    }

    function dcresize() {

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }
    }

    function MDSTherresize() {
        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('MDSTherapyContent').style.maxHeight = document.getElementById('MDSTherapyContent').scrollHeight + ""px"";
        }
    }

    function MDSresize() {
        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('MDSContent').style.maxHeight = docum");
            WriteLiteral(@"ent.getElementById('MDSContent').scrollHeight + ""px"";
        }
    }


    function ddcheck(dd) {
        if (document.getElementById('dd' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('dd' + dd).value, 'dropdown')
        }
        checkcomplete()

    }

    function textchecklength(dd, plength) {

        if (document.getElementById('txt' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            var txt = document.getElementById('txt' + dd).value

            if (txt.length < plength) {
             ");
            WriteLiteral(@"   document.getElementById('td' + dd).className = 'tderror'
                document.getElementById('tr' + dd).classList.add(""trerror"")
                removechanges(dd)
            } else {
                document.getElementById('td' + dd).className = ''
                document.getElementById('tr' + dd).classList.remove(""trerror"")
                savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
            }

        }
        checkcomplete()

    }

    function textcheck(dd) {
        if (document.getElementById('txt' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()

    }

    ");
            WriteLiteral(@"function textchecknoerror(dd) {
        if (document.getElementById('txt' + dd).value == '') {
            removechanges(dd)
        } else {
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()
    }

    function cbcheck(dd) {
        if (document.getElementById('cb' + dd).checked == false) {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, 'Checked', 'checkbox')
        }
        checkcomplete()

    }

        function cbchecknoerror(dd) {
            if (document.getElementById('cb' + dd).checked == false) {
                removechanges(dd)
            } else {
                savechanges(dd, 'Checked', 'checkbox')
            }
            ch");
            WriteLiteral(@"eckcomplete()

        }


    function datecheck(txt) {

        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            document.getElementById('td' + txt).className = ''
            document.getElementById('tr' + txt).classList.remove(""trerror"")
            savechanges(txt, document.getElementById('txt' + txt).value, 'textbox')
        } else {
            document.getElementById('td' + txt).className = 'tderror'
            document.getElementById('tr' + txt).classList.add(""trerror"")
            removechanges(txt)
        }

        checkcomplete()

    }

    function datechecknoerror(txt) {

        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            savechanges(txt, document.getElementById('txt' + txt).value, 'textbox')
        } else {
            removechanges(txt)
        }

        checkcomplete()

    }


    function mdsadddays(type, track) {
        var numdays = document.getElementById('txtMDSUnbillDays' + track.toString()).value
        var s");
            WriteLiteral(@"tartd = document.getElementById('txtMDSARDStart' + track.toString()).value
        var endd = document.getElementById('txtMDSARDEnd' + track.toString()).value




        if (numdays != '' && moment(startd).isValid()) {
            var todayd = new Date(parseDate(startd))
            var m = todayd.getMonth() + 1
            var y = todayd.getFullYear()
            todayd = new Date(y, m, 0)

            if (moment(endd).isValid()) {
                var endd = new Date(Date.parse(endd))
            } else {
                var endd = todayd
            }

            var dchange = datediff(parseDate(startd), endd)
            var ddiff = dchange - numdays + 1
            if (ddiff < 0) {
                removechanges('MDSNumDays' + track.toString())
                document.getElementById('tdMDSNumDays' + track.toString()).className = 'tderror'
                document.getElementById('trMDSNumDays' + track.toString()).classList.add(""trerror"")
                document.getElementById('txtMDSNumDays' + track.toS");
            WriteLiteral(@"tring()).value = ddiff
            } else {
                document.getElementById('tdMDSNumDays' + track.toString()).className = ''
                document.getElementById('trMDSNumDays' + track.toString()).classList.remove(""trerror"")
                document.getElementById('txtMDSNumDays' + track.toString()).value = ddiff
                if (type == 'save') {
                    savechanges('MDSNumDays' + track.toString(), ddiff, 'textbox')
                }

            }
        } else {
            removechanges('MDSNumDays' + track.toString())
            document.getElementById('tdMDSNumDays' + track.toString()).className = 'tderror'
            document.getElementById('trMDSNumDays' + track.toString()).classList.add(""trerror"")
            document.getElementById('txtMDSNumDays' + track.toString()).value = ''
        }
        checkcomplete()
    }

    function addtrack(tracknum) {
        document.getElementById('track' + tracknum.toString()).classList.remove('MDSoverride')
        document.getEleme");
            WriteLiteral(@"ntById('trBOPatient' + tracknum.toString()).classList.remove('MDSoverride')
        //document.getElementById('trMDSPayment' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSARD' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSAssessmentType' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSAssessmentTypePDPM' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSHIPPS' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSUnbillDays' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSARDStart' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSARDEnd' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSNumDays' + tracknum.toString()).classList.remove('MDSoverride')
        docum");
            WriteLiteral(@"ent.getElementById('trMDSTransmitted' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSPTOT' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSSLP' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSNTA' + tracknum.toString()).classList.remove('MDSoverride')
        document.getElementById('trMDSNursing' + tracknum.toString()).classList.remove('MDSoverride')


        document.getElementById('removetrack' + tracknum.toString()).classList.remove('hidden')

        document.getElementById('addtrack' + tracknum.toString()).classList.add('hidden')

        if (tracknum == 1) {
            document.getElementById('addtrack2').classList.remove('hidden')
            document.getElementById('trackhead2').classList.remove('hidden')
            document.getElementById('trackspace2').classList.remove('hidden')
        } else if (tracknum == 2) {
            document.getElementById('removetrack");
            WriteLiteral(@"1').classList.add('hidden')
            document.getElementById('trackhead3').classList.remove('hidden')
            document.getElementById('trackspace3').classList.remove('hidden')
            document.getElementById('addtrack3').classList.remove('hidden')
        } else if (tracknum == 3) {
            document.getElementById('removetrack2').classList.add('hidden')
            document.getElementById('trackhead4').classList.remove('hidden')
            document.getElementById('trackspace4').classList.remove('hidden')
            document.getElementById('addtrack4').classList.remove('hidden')
        } else if (tracknum == 4) {
            document.getElementById('removetrack3').classList.add('hidden')
            document.getElementById('trackhead5').classList.remove('hidden')
        }

        checkcomplete()
        MDSresize()
    }


    function checkopenmds() {
        var track = 1
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHT");
            WriteLiteral(@"ML !== '') { filled = 1 }
        //if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (d");
            WriteLiteral(@"ocument.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
        }


        var track = 2
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        //if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm");
            WriteLiteral(@"').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
     ");
            WriteLiteral(@"   if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
            addtrack(2)
        }


        var track = 3
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        //if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' +");
            WriteLiteral(@" track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').in");
            WriteLiteral(@"nerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
            addtrack(2)
            addtrack(3)
        }

        var track = 4
        var filled = 0

        if (document.getElementById('td' + 'BOPatient' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        //if (document.getElementById('td' + 'MDSPayment' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARD' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
  ");
            WriteLiteral(@"      if (document.getElementById('td' + 'MDSAssessmentType' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSHIPPS' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSUnbillDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDStart' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSARDEnd' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNumDays' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSTransmitted' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById");
            WriteLiteral(@"('td' + 'MDSPTOT' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSSLP' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNTA' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }
        if (document.getElementById('td' + 'MDSNursing' + track.toString() + 'Confirm').innerHTML !== '') { filled = 1 }


        if (filled == 1) {
            addtrack(1)
            addtrack(2)
            addtrack(3)
            addtrack(4)
        }
    }

    function removetrack(track) {
        document.getElementById('track' + track.toString()).classList.add('MDSoverride')

        document.getElementById('trBOPatient' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'BOPatient' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'BOPatient' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd'");
            WriteLiteral(@" + 'BOPatient' + track.toString()).value = ''
        removechanges('BOPatient' + track.toString())

        //document.getElementById('trMDSPayment' + track.toString()).classList.add('MDSoverride')
        //document.getElementById('td' + 'MDSPayment' + track.toString()).className = 'tderror'
        //document.getElementById('tr' + 'MDSPayment' + track.toString()).classList.add(""trerror"")
        //document.getElementById('dd' + 'MDSPayment' + track.toString()).value = ''
        //removechanges('MDSPayment' + track.toString())

        document.getElementById('trMDSARD' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSARD' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSARD' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSARD' + track.toString()).value = ''
        removechanges('MDSARD' + track.toString())

        document.getElementById('trMDSAssessmentType' + track.toString()).classL");
            WriteLiteral(@"ist.add('MDSoverride')
        document.getElementById('td' + 'MDSAssessmentType' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSAssessmentType' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd' + 'MDSAssessmentType' + track.toString()).value = ''
        removechanges('MDSAssessmentType' + track.toString())

        document.getElementById('trMDSAssessmentTypePDPM' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSAssessmentTypePDPM' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSAssessmentTypePDPM' + track.toString()).classList.add(""trerror"")
        document.getElementById('dd' + 'MDSAssessmentTypePDPM' + track.toString()).value = ''
        removechanges('MDSAssessmentTypePDPM' + track.toString())

        document.getElementById('trMDSHIPPS' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSHIPPS' + track.toString()");
            WriteLiteral(@").className = 'tderror'
        document.getElementById('tr' + 'MDSHIPPS' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSHIPPS' + track.toString()).value = ''
        removechanges('MDSHIPPS' + track.toString())

        document.getElementById('trMDSUnbillDays' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSUnbillDays' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSUnbillDays' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSUnbillDays' + track.toString()).value = ''
        removechanges('MDSUnbillDays' + track.toString())

        document.getElementById('trMDSARDStart' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSARDStart' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSARDStart' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt'");
            WriteLiteral(@" + 'MDSARDStart' + track.toString()).value = ''
        removechanges('MDSARDStart' + track.toString())

        document.getElementById('trMDSARDEnd' + track.toString()).classList.add('MDSoverride')
        document.getElementById('txt' + 'MDSARDEnd' + track.toString()).value = ''
        removechanges('MDSARDEnd' + track.toString())

        document.getElementById('trMDSNumDays' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSNumDays' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSNumDays' + track.toString()).classList.add(""trerror"")
        document.getElementById('txt' + 'MDSNumDays' + track.toString()).value = ''
        removechanges('MDSNumDays' + track.toString())

        document.getElementById('trMDSTransmitted' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSTransmitted' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSTransmitted' + tra");
            WriteLiteral(@"ck.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSTransmitted' + track.toString()).checked = false
        removechanges('MDSTransmitted' + track.toString())

        document.getElementById('trMDSPTOT' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSPTOT' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSPTOT' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSPTOT' + track.toString()).checked = false
        removechanges('MDSPTOT' + track.toString())

        document.getElementById('trMDSSLP' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSSLP' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSSLP' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSSLP' + track.toString()).checked = false
        removechanges('MDSSLP' + track.toString())

     ");
            WriteLiteral(@"   document.getElementById('trMDSNTA' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSNTA' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSNTA' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSNTA' + track.toString()).checked = false
        removechanges('MDSNTA' + track.toString())

        document.getElementById('trMDSNursing' + track.toString()).classList.add('MDSoverride')
        document.getElementById('td' + 'MDSNursing' + track.toString()).className = 'tderror'
        document.getElementById('tr' + 'MDSNursing' + track.toString()).classList.add(""trerror"")
        document.getElementById('cb' + 'MDSNursing' + track.toString()).checked = false
        removechanges('MDSNursing' + track.toString())

        document.getElementById('removetrack' + track.toString()).classList.add('hidden')
        document.getElementById('addtrack' + track.toString()).classList.remove('hidden')

      ");
            WriteLiteral(@"  if (track == 1) {
            document.getElementById('addtrack1').classList.remove('hidden')
            document.getElementById('addtrack2').classList.add('hidden')
            document.getElementById('trackhead2').classList.add('hidden')
            document.getElementById('trackspace2').classList.add('hidden')
        } else if (track == 2) {
            document.getElementById('removetrack1').classList.remove('hidden')
            document.getElementById('trackhead3').classList.add('hidden')
            document.getElementById('trackspace3').classList.add('hidden')
            document.getElementById('addtrack3').classList.add('hidden')
        } else if (track == 3) {
            document.getElementById('removetrack2').classList.remove('hidden')
            document.getElementById('trackhead4').classList.add('hidden')
            document.getElementById('trackspace4').classList.add('hidden')
            document.getElementById('addtrack4').classList.add('hidden')
        } else if (track == 4) {
     ");
            WriteLiteral(@"       document.getElementById('removetrack3').classList.remove('hidden')
            document.getElementById('trackhead5').classList.add('hidden')
        }

        checkcomplete()
        MDSresize()
    }

    function savechanges(txt, pv, ptype) {
        var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
        var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUserName').value

        document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        $.get(""/TripleCheck/saverecords"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });
    }

    function savechangescert(txt, pv, ptype, position) {
        if (pv != '') {
            var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
            var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUser");
            WriteLiteral(@"Name').value

            document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        }


        $.get(""/TripleCheck/saverecordscert"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strposition: position, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });

    }

    function removechanges(txt) {

        $.get(""/TripleCheck/removerecords"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });
        document.getElementById('td' + txt + 'Confirm').innerHTML = """";
    }

    function removechangescert(txt) {
        $.get(""/TripleCheck/removerecordscert"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });


    }

    function checkcomplete() {
        checkBO()
        checkDC()
        checkMDS()
        checkMDSTherapy()
        checkMedicalRecords()
        checkTherapy()
        checkNursing()
 ");
            WriteLiteral(@"   }

    function checkBO() {
        var y = document.getElementById(""frmBO"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'booverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('BOComplete').innerHTML = 'Not Completed'
            document.getElementById('BOComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'BusinessOffice' }, function (data) { });
        } else {
            document.getElementById('BOComplete').innerHTML = 'Completed'
            document.getElementById('BOComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails""");
            WriteLiteral(@", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'BusinessOffice' }, function (data) { });
        }
    }

    function checkDC() {
        var y = document.getElementById(""DCContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'dcoverride')) {

            } else {
                errorcounter = '1'
            }
        }

        if (document.getElementById('dcwhole').classList.contains('hidden') == true) {
            errorcounter = '0'
        }
        if (errorcounter == '1') {
            document.getElementById('DCComplete').innerHTML = 'Not Completed'
            document.getElementById('DCComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'false");
            WriteLiteral(@"', strdetail: 'DCInformation' }, function (data) { });
        } else {
            document.getElementById('DCComplete').innerHTML = 'Completed'
            document.getElementById('DCComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'DCInformation' }, function (data) { });
        }

    }

    function checkMDS() {
        var y = document.getElementById(""MDSContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'MDSoverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MDSComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSComplete");
            WriteLiteral(@"').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDS' }, function (data) { });
        } else {
            document.getElementById('MDSComplete').innerHTML = 'Completed'
            document.getElementById('MDSComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDS' }, function (data) { });
        }
    }

    function checkMDSTherapy() {
        var y = document.getElementById(""MDSTherapyContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'MDSTheroverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounte");
            WriteLiteral(@"r == '1') {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSTherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDSTherapy' }, function (data) { });
        } else {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Completed'
            document.getElementById('MDSTherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDSTherapy' }, function (data) { });
        }
    }

    function checkMedicalRecords() {
        var y = document.getElementById(""MedicalRecordsContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'disc");
            WriteLiteral(@"hargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'mroverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Not Completed'
            document.getElementById('MedicalRecordsComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MedicalRecords' }, function (data) { });
        } else {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Completed'
            document.getElementById('MedicalRecordsComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MedicalRecords' }, function (data) { });
        }
    }

    function checkTherapy() {
        var y = document.getElementById(""TherapyContent"").getElementsByClassName(""");
            WriteLiteral(@"trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'therapyvisable')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('TherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('TherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Therapy' }, function (data) { });
        } else {
            document.getElementById('TherapyComplete').innerHTML = 'Completed'
            document.getElementById('TherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Therapy");
            WriteLiteral(@"' }, function (data) { });
        }
    }

    function checkNursing() {
        var y = document.getElementById(""NursingContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('NursingComplete').innerHTML = 'Not Completed'
            document.getElementById('NursingComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Nursing' }, function (data) { });
        } else {
            document.getElementById('NursingComplete').innerHTML = 'Completed'
            document.getElementById('NursingComplete').className = 'completed'
           ");
            WriteLiteral(@" $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Nursing' }, function (data) { });
        }
    }

    function parseDate(str) {
        var mdy = str.split('/');
        return new Date(mdy[2], mdy[0] - 1, mdy[1]);
    }

    function datediff(first, second) {
        return Math.round((second - first) / (1000 * 60 * 60 * 24));
    }
    </script>
</div>
");
#nullable restore
#line 8581 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
}}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
