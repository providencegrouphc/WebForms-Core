#pragma checksum "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e3bad2f84906026eaba19ed1cde44465201722c9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_TripleCheck_Record), @"mvc.1.0.view", @"/Views/TripleCheck/Record.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\_ViewImports.cshtml"
using MicrosoftGraphAspNetCoreConnectSample;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e3bad2f84906026eaba19ed1cde44465201722c9", @"/Views/TripleCheck/Record.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"66db3822b77c774ac4b4a439c502a758348a340e", @"/Views/_ViewImports.cshtml")]
    public class Views_TripleCheck_Record : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/dropzone/dropzone.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery-1.12.4.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/UI/jquery-ui.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.inputmask.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/bootstrap-maxlength.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "TripleCheck", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "DeleteReport", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("method", "post", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/images/questionmark.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("style", new global::Microsoft.AspNetCore.Html.HtmlString("height:15px"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c98631", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c99670", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c910871", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c911911", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c913109", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c914149", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c915189", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c916229", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<script type=\"text/javascript\">\r\n    $(window).resize(function () {\r\n        $(\"#shownotes\").dialog(\"option\", \"position\", { my: \"center\", at: \"center\", of: window });\r\n    });\r\n\r\n    jQuery(document).ready(function ($) {\r\n        var passdata = \'");
#nullable restore
#line 17 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                   Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\'\r\n\r\n        if (passdata != \'\') {\r\n            var rowdata = \'");
#nullable restore
#line 20 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["saveddata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'.split('*^^*')

            var arrayLength = rowdata.length;
            for (var i = 0; i < arrayLength; i++) {
                var indvdata = rowdata[i].split('$||$')

                if (indvdata[2] == 'checkbox') {
                    document.getElementById('cb' + indvdata[0]).checked = true
                }

                if (indvdata[2] == 'textbox') {
                    document.getElementById('txt' + indvdata[0]).value = indvdata[1]
                }

                if (indvdata[2] == 'dropdown') {
                    var desiredValue = indvdata[1]
                    var el = document.getElementById(""dd"" + indvdata[0]);
                    try {
                        for (var e = 0; e < el.options.length; e++) {
                            if (el.options[e].text == desiredValue) {
                                el.selectedIndex = e;
                            }
                        }
                    } catch {}
                }

                    var dat");
            WriteLiteral(@"etime = ""<b>Confirmed:</b> "" + indvdata[3] + ""<br/>""
                    var user = ""<b>Confirmed By:</b> "" + indvdata[4]

                    document.getElementById('td' + indvdata[0] + 'Confirm').innerHTML = datetime + user;

                    document.getElementById('tr' + indvdata[0]).classList.remove('trerror')
                    document.getElementById('td' + indvdata[0]).classList.remove('tderror')



            }
        }
        
        var recertdata = '");
#nullable restore
#line 59 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                     Write(Html.Raw(ViewData["getrecert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\'\r\n        if (recertdata != \'\') {\r\n            var rowdata = \'");
#nullable restore
#line 61 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                      Write(Html.Raw(ViewData["getrecert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"'.split('*^^*')

            var arrayLength = rowdata.length;
            for (var i = 0; i < arrayLength; i++) {
                
                var indvdata = rowdata[i].split('$||$')

                if (indvdata[2] == 'active' || indvdata[2] == 'reason') {
                    if (indvdata[0] == 'MR1Reason') {
                        document.getElementById('txtMR1Reason').value = indvdata[1]
                    } else {
                        var rowc = table.insertRow(indvdata[3])
                        var certnum = indvdata[0].replace('MR', '')
                        certnum = certnum.replace('Reason', '')
                        

                        rowc.setAttribute(""id"", ""tr"" + indvdata[0]);
                        rowc.className = 'mroverride trerror'
                        var cell1 = rowc.insertCell(0)
                        cell1.setAttribute(""id"", ""td"" + indvdata[0]);
                        cell1.className = ""tderror""
                        var cell2 = rowc.in");
            WriteLiteral(@"sertCell(1)
                        cell1.innerHTML = '<input type=""text"" class=""txtbox"" id=""txt' + indvdata[0] + '"" onchange=""MRReCertReason(' + (certnum).toString() + ', ' + indvdata[3] + ')"" onkeyup=""MRReCertReason(' + (certnum).toString() + ', ' + indvdata[3] + ')"" />';
                        cell2.innerHTML = 'Reason Re-Cert is past due';
                        var cell3 = rowc.insertCell(2)
                        cell3.setAttribute(""id"", ""td"" + indvdata[0] + ""Confirm"");
                        cell3.className = ""confirmed""
                    }

                    if (indvdata[2] == 'reason') {
                        document.getElementById('tr' + indvdata[0]).classList.add('mroverride')
                    } else {
                        document.getElementById('tr' + indvdata[0]).classList.remove('mroverride')
                    }
                } else {
                    if (indvdata[0] == 'MR1ReCert') {
                        document.getElementById('txtMR1ReCert').value = ");
            WriteLiteral(@"indvdata[1]
                    } else {
                        var table = document.getElementById(""tblMR"");
                        var certnum = indvdata[0].replace('MR', '')
                        certnum = certnum.replace('ReCert', '')
                        var row = table.insertRow(indvdata[3])

                        row.setAttribute(""id"", ""tr"" + indvdata[0]);
                        row.className = 'trerror'
                        var cell1 = row.insertCell(0)
                        cell1.setAttribute(""id"", ""td"" + indvdata[0]);
                        cell1.className = ""tderror""
                        var cell2 = row.insertCell(1)
                        cell1.innerHTML = '<input type=""text"" class=""txtbox txtdate"" value=""' + indvdata[1] + '"" id=""txt' + indvdata[0] + '"" onchange=""MRReCert(' + (certnum).toString() + ', ' + indvdata[3] + ')"" onkeyup=""MRReCert(' + (certnum).toString() + ', ' + indvdata[3] + ')"" />';
                        cell2.innerHTML = (certnum).toString() + ' R");
            WriteLiteral(@"e-Cert - Completed (<b>Due <span id=\""txtMRDue' + (certnum).toString() + '\"">' + indvdata[2] + '</span></b>)';
                        var cell3 = row.insertCell(2)
                        cell3.setAttribute(""id"", ""td"" + indvdata[0] + ""Confirm"");
                        cell3.className = ""confirmed""
                    }
                }

                if (indvdata[4] != '') {
                    var datetime = ""<b>Confirmed:</b> "" + indvdata[4] + ""<br/>""
                    var user = ""<b>Confirmed By:</b> "" + indvdata[5]

                    document.getElementById('td' + indvdata[0] + 'Confirm').innerHTML = datetime + user;

                    document.getElementById('tr' + indvdata[0]).classList.remove('trerror')
                    document.getElementById('td' + indvdata[0]).classList.remove('tderror')
                }

            }
        }


        addassessment(document.getElementById('ddAddAssessment'))
        paymenttype(document.getElementById('ddPaymentType'))
     ");
            WriteLiteral(@"   dischargeloc(document.getElementById('ddDischargeLoc'), 'no')
        dcyesno(document.getElementById('ddDrivenDischarge'), 'no')
        patientleave(document.getElementById('ddBOPatient'), 'no')
        mdsadddays('no')
        DCNOMNC('no')
        MRConsentReason('no')
        checkcert('MRInitial', 'Initial Cert')
        checkcert('MR1ReCert', '1st Re-Cert')
        checkcert('MR2ReCert', '2nd Re-Cert')
        checkcert('MR3ReCert', '3rd Re-Cert')
        checkcert('MR4ReCert', '4th Re-Cert')
        checkcert('MR5ReCert', '5th Re-Cert')
        checkcert('MR6ReCert', '6th Re-Cert')
        
        mrnextcheck(1)
        mrnextcheck(2)
        mrnextcheck(3)
        mrnextcheck(4)
        mrnextcheck(5)
        
        therapycheck30('PTEval', 'PT Evaluation')
        therapycheck30('PTClar', 'PT Clarification')
        
        //ptchecksame('PT')
        //Evalchange('PT')
        //Evalsigned('PT')
        //ClarDateDecs('PT')
        //Dischargeed('PT')
        //Cl");
            WriteLiteral(@"arSignDecs('PT')
       
        //lastdaycalc()
        

        
        
        checkcomplete()

        $('.TableClick tr').click(function (event) {
            if (event.target.type !== 'checkbox') {
                $(':checkbox', this).trigger('click');
            }
        });
    });


</script>

<script>
    $(window).load(function () {
        $("".txtdate"").inputmask(""99/99/9999"", { 'placeholder': 'MM/DD/YYYY' });

        $(""#txtMDSUnbillDays"").inputmask({
            'alias': 'numeric', 'rightAlign': false, 'groupSeparator': ',', 'digits': 0, 'placeholder': '0'
        });

    });


    function hasClass(element, cls) {
        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
    }

    $(function () {
        $("".txtdate"").datepicker();
    });
</script>

<style>
    .ui-dialog-titlebar-close {
        visibility: hidden !important;
        display: none !important;
    }

    .txtbox {
        background-color: #fff;
       ");
            WriteLiteral(@" border: 1px solid #aaa;
        border-radius: 4px;
        height: 28px;
        width: 100% !important;
    }

    .txtlabel {
        margin-top: 15px;
    }

    .validation {
        color: red;
    }

    .dropzone {
        border: 1px solid #aaa !important;
        border-radius: 5px !important;
        width: 280px;
        margin-top: 15px;
    }

    .imgdiv {
        border: 1px solid #aaa;
        border-radius: 5px;
        margin-top: 10px;
    }

        .imgdiv table {
            width: 280px;
            table-layout: fixed;
        }

    .imgdivtd {
        width: 170px;
        word-wrap: break-word;
        padding-right: 10px
    }

    .yesno {
        border: 1px solid #aaa;
        background-color: white;
        padding: 5px;
        transition: 1s;
        cursor: pointer;
        width: 50px;
        border-radius: 5px;
        text-align: center;
    }


    textarea {
        max-width: 600px !important;
        height: 100p");
            WriteLiteral(@"x;
    }

    .formheader {
        max-width: 600px;
        background-color: #aaa;
        padding: 5px;
        font-weight: bold;
        margin-top: 20px;
    }

    .cbtext {
        cursor: default
    }

    .content table {
        border-collapse: collapse;
        width: 100%;
        border: 0px;
    }

    .content th, .content td {
        text-align: left;
        padding: 9px;
        height: 50px;
    }



        .content td:first-child {
            width: 280px;
        }


    .content tr {
        border-bottom: 1px solid #f2f2f2;
    }

    .collapsible {
        background-color: #337ab7;
        color: black;
        font-weight: bold;
        cursor: pointer;
        padding: 10px;
        width: 100%;
        text-align: left;
        outline: none;
        font-size: 15px;
        border: 0px;
    }



    .content {
        padding: 0 18px;
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.2s");
            WriteLiteral(@" ease-out;
        width: 100%;
        border: 1px solid black;
    }

    .addaddition {
        display: none;
        visibility: hidden;
    }

    .paytype {
        display: none;
        visibility: hidden;
    }

    .dischargetype {
        display: none;
        visibility: hidden;
    }

    .dcyesnotype {
        display: none;
        visibility: hidden;
    }

    .dcoverride {
        display: none;
        visibility: hidden;
    }

    .mroverride {
        display: none;
        visibility: hidden;
    }

    .therapyvisable {
        display: none;
        visibility: hidden;
    }

    .tooltipcss {
        position: relative;
        display: inline-block;
        padding: 1px;
    }

        .tooltipcss .tooltipcsstext {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
       ");
            WriteLiteral(@"     /* Position the tooltip */
            position: absolute;
            z-index: 1;
            bottom: 100%;
            left: 50%;
            margin-left: -60px;
        }

        .tooltipcss:hover .tooltipcsstext {
            visibility: visible;
        }

    .tooltipcssbtm {
        position: relative;
        display: inline-block;
        padding: 1px;
    }

        .tooltipcssbtm .tooltipcsstextbtm {
            visibility: hidden;
            width: 200px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            /* Position the tooltip */
            position: absolute;
            z-index: 1;
            top: 100%;
            left: 50%;
            margin-left: -60px;
        }

        .tooltipcssbtm:hover .tooltipcsstextbtm {
            visibility: visible;
        }

    .tderror {
        background-color: red;
    }


    .completed {
 ");
            WriteLiteral(@"       color: green;
    }

    .notcompleted {
        color: red;
    }

    .confirmed {
        font-size: 10px;
    }
</style>
<a href=""/TripleCheck"" id=""homeclick"">Return to Home</a>
<div style=""height:10px;""></div>
<div style=""font-size:30px""><b>");
#nullable restore
#line 429 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                          Write(Html.Raw(ViewData["patientname"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\r\n<div style=\"font-size:25px\"><b>");
#nullable restore
#line 430 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                          Write(Html.Raw(ViewData["patientmonth"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b></div>\r\n<div style=\"height:10px;\"></div>\r\n<div><input type=\"button\" class=\"btn btn-primary\" value=\"Delete Record\" onclick=\"showdel()\" /></div>\r\n<hr />\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c932176", async() => {
                WriteLiteral("\r\n    <input type=\"text\" id=\"txtRecID\" name=\"txtRecID\" class=\"hidden\" />\r\n    <input type=\"button\" id=\"delreport\" class=\"hidden\" onclick=\"submit()\" />\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Controller = (string)__tagHelperAttribute_10.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Action = (string)__tagHelperAttribute_11.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper.Method = (string)__tagHelperAttribute_12.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n<input type=\"text\" id=\"txtUserName\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 13516, "\"", 13555, 1);
#nullable restore
#line 440 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 13524, Html.Raw(ViewData["username"]), 13524, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n<input type=\"text\" id=\"txtID\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 13605, "\"", 13642, 1);
#nullable restore
#line 441 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 13613, Html.Raw(ViewData["passid"]), 13613, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n<input type=\"text\" id=\"txtINTMonth\" class=\"hidden\"");
            BeginWriteAttribute("value", " value=\"", 13698, "\"", 13737, 1);
#nullable restore
#line 442 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 13706, Html.Raw(ViewData["intmonth"]), 13706, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" />\r\n\r\n<div class=\"row\">\r\n    <div class=\"col-md-3\">\r\n        <div class=\"txtlabel\">Start date of skilled stay</div>\r\n        <div><input type=\"text\" id=\"txtStartDate\" class=\"txtbox\" name=\"txtStartDate\" disabled=\"disabled\"");
            BeginWriteAttribute("value", " value=\"", 13960, "\"", 13999, 1);
#nullable restore
#line 447 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 13968, Html.Raw(ViewData["staydate"]), 13968, 31, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" onkeyup=\"startdate()\" onchange=\"startdate()\" /></div>\r\n        <div id=\"ValidationStartDate\" class=\"hidden\">Please enter a valid date.</div>\r\n\r\n        <div class=\"txtlabel\">Additional assessment for the same stay?</div>\r\n        <div>\r\n            ");
#nullable restore
#line 452 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["AdditionalAssessment"]));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n        </div>\r\n\r\n        <div class=\"txtlabel\">Payment Type</div>\r\n        <div>\r\n            ");
#nullable restore
#line 457 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["PaymentType"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
    </div>
    <div class=""col-md-3"">
        <div class=""txtlabel"" style=""border-bottom: 1px solid #aaa; font-weight:bold"">Notes</div>
        <div style=""overflow-y:auto; height:100px; margin-bottom:10px;"" id=""divNotes"">
            ");
#nullable restore
#line 463 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["patientnotes"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div><input type=""button"" class=""btn btn-primary"" value=""Edit Notes"" onclick=""shownotes()"" /></div>
    </div>
    <div class=""col-md-3"">
        <div class=""txtlabel"" style=""border-bottom: 1px solid #aaa; font-weight:bold"">IDT Team Members Present</div>
        <div style=""overflow-y:auto; height:100px; margin-bottom:10px;"" id=""divTeam"">
            ");
#nullable restore
#line 470 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["teamdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div><input type=""button"" class=""btn btn-primary"" value=""Edit Team"" onclick=""showteam()"" /></div>
    </div>
</div>

<br />
<br />


<button class=""collapsible"" style=""background-color:lightblue"" id=""btnBusinessOffice"">
    <table style=""width:100%"">
        <tr>
            <td>Business Office</td>
            <td style=""text-align:right; padding-right:50px;"" id=""BOComplete""></td>
        </tr>
    </table>
</button>
<div class=""content"" style=""border: 1px solid black"" id=""frmBO"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOTypeOfBill"">
            <td id=""tdBOTypeOfBill"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOTypeOfBill"" onchange=""ddcheck('BOTypeOfBill')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c939444", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c940382", async() => {
                WriteLiteral("210");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c941358", async() => {
                WriteLiteral("211");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c942334", async() => {
                WriteLiteral("212");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c943310", async() => {
                WriteLiteral("213");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c944286", async() => {
                WriteLiteral("214");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c945262", async() => {
                WriteLiteral("21Q");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c946238", async() => {
                WriteLiteral("217");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Type of bill</td>
            <td id=""tdBOTypeOfBillConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBODOB"">
            <td id=""tdBODOB"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BODOB')"" id=""cbBODOB"" />
            </td>
            <td>DOB <b>");
#nullable restore
#line 511 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                  Write(Html.Raw(ViewData["patientdob"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
            <td id=""tdBODOBConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOSex"">
            <td id=""tdBOSex"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOSex')"" id=""cbBOSex"" />
            </td>
            <td>Sex <b>");
#nullable restore
#line 518 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                  Write(Html.Raw(ViewData["patientgender"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b></td>
            <td id=""tdBOSexConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOHIC"">
            <td id=""tdBOHIC"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOHIC')"" id=""cbBOHIC"" />
            </td>
            <td>HIC Number</td>
            <td id=""tdBOHICConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOMD"">
            <td id=""tdBOMD"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOMD')"" id=""cbBOMD"" />
            </td>
            <td>MD</td>
            <td id=""tdBOMDConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDates"">
            <td id=""tdBOServiceDates"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDates"" onchange=""datecheck('BOServiceDates')"" onkeyup=""datecheck('BOServiceDa");
            WriteLiteral(@"tes')"" />
            </td>
            <td>Service Dates From</td>
            <td id=""tdBOServiceDatesConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trBOServiceDatesTo"">
            <td id=""tdBOServiceDatesTo"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtBOServiceDatesTo"" onchange=""datecheck('BOServiceDatesTo')"" onkeyup=""datecheck('BOServiceDatesTo')"" />
            </td>
            <td>Service Dates To</td>
            <td id=""tdBOServiceDatesToConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror"" id=""trBOStayFrom"">
            <td id=""tdBOStayFrom"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayFrom"" onchange=""checkqualifying()"" onkeyup=""checkqualifying()"" /></td>
            <td>
                Qualifying Stay Dates From
                <div class=""tooltipcss"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c950699", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">3 night stay required.</span>
                </div>
            </td>
            <td id=""tdBOStayFromConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm trerror"" id=""trBOStayTo"">
            <td id=""tdBOStayTo"" class=""tderror""><input type=""text"" class=""txtbox txtdate"" id=""txtBOStayTo"" onchange=""checkqualifying()"" onkeyup=""checkqualifying()"" /></td>
            <td>Qualifying Stay Dates To</td>
            <td id=""tdBOStayToConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOBenefit"">
            <td id=""tdBOBenefit"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOBenefit')"" id=""cbBOBenefit"" />
            </td>
            <td>Benefit Days Available Verified</td>
            <td id=""tdBOBenefitConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOCoinsurance"">
            <td id=""tdBOCoinsu");
            WriteLiteral(@"rance"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOCoinsurance')"" id=""cbBOCoinsurance"" />
            </td>
            <td>Coinsurance Days</td>
            <td id=""tdBOCoinsuranceConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay pdpm hmoa trerror"" id=""trBOMedicare"">
            <td id=""tdBOMedicare"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOMedicare')"" id=""cbBOMedicare"" />
            </td>
            <td>Verify Medicare Secondary Payor Status</td>
            <td id=""tdBOMedicareConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOOnset"">
            <td id=""tdBOOnset"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOOnset')"" id=""cbBOOnset"" />
            </td>
            <td>
                Therapy Onset Date
                <div class=""tooltipcss"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c953935", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">Verify Occurrence 11 is onset of 1st condition requiring thearpy</span>
                </div>
            </td>
            <td id=""tdBOOnsetConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOStart"">
            <td id=""tdBOStart"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOStart')"" id=""cbBOStart"" />
            </td>
            <td>
                Therapy Start of Care
                <div class=""tooltipcss"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c955647", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">Verify Occurrence codes are present and have correct SOC dates 35(PT) 44(OT) 45(ST)</span>
                </div>
            </td>
            <td id=""tdBOStartConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOVerify"">
            <td id=""tdBOVerify"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOVerify')"" id=""cbBOVerify"" />
            </td>
            <td>Verify Therapy HCPC code, modifier (GP, GO, GN) and date of service</td>
            <td id=""tdBOVerifyConfirm"" class=""confirmed""></td>
        </tr>
        <tr class=""yes pay mcb trerror"" id=""trBOModifiers"">
            <td id=""tdBOModifiers"" class=""tderror"">
                <input type=""checkbox"" onchange=""cbcheck('BOModifiers')"" id=""cbBOModifiers"" />
            </td>
            <td>Therapy modifiers are present as needed (KX, 59, CO, CQ)</td>
            <td id=""tdBOModifiersConfirm"" class=""confirmed""></td>");
            WriteLiteral(@"
        </tr>
        <tr class=""pay pdpm hmoa trerror"" style=""border:none"" id=""trBOPatient"">
            <td id=""tdBOPatient"" class=""tderror"">
                <select class=""txtbox"" id=""ddBOPatient"" onchange=""patientleave(this, 'save'); mdsadddays('save')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c958158", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c959096", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c960071", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Did the patient have a leave during the billing period?</td>
            <td id=""tdBOPatientConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>





<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnDCInfo"">
    <table style=""width:100%"">
        <tr>
            <td>DC Information</td>
            <td style=""text-align:right; padding-right:50px;"" id=""DCComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" id=""DCContent"" style=""border: 1px solid black"">
    <div style=""height:20px""></div>
    <table class=""TableClick"">


        <tr class=""yes pay pdpm hmoa discharge home hospital trerror"" id=""trDCDischarge"">
            <td id=""tdDCDischarge"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCDischarge"" onchange=""datecheck('DCDischarge')"" onkeyup=""datecheck('DCDischarge')"" />
            <");
            WriteLiteral(@"/td>
            <td>Discharge Date</td>
            <td id=""tdDCDischargeConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa levels trerror"" id=""trDischargeLoc"">
            <td id=""tdDischargeLoc"" class=""tderror"">
                <select class=""txtbox"" onchange=""dischargeloc(this, 'save')"" id=""ddDischargeLoc"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c962521", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c963459", async() => {
                WriteLiteral("01 - Home");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c964441", async() => {
                WriteLiteral("06 - Home w/HH");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c965428", async() => {
                WriteLiteral("02 - Hospital");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c966414", async() => {
                WriteLiteral("04 - LTC");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c967395", async() => {
                WriteLiteral("07 - AMA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c968376", async() => {
                WriteLiteral("20 - Expired");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c969361", async() => {
                WriteLiteral("Other");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c970339", async() => {
                WriteLiteral("N/A - Continued Stay");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Discharge Location</td>
            <td id=""tdDischargeLocConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa discharge home trerror"" id=""trDrivenDischarge"">
            <td id=""tdDrivenDischarge"" class=""tderror"">
                <select class=""txtbox"" onchange=""dcyesno(this, 'save')"" id=""ddDrivenDischarge"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c971763", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c972701", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c973676", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Patient Driven Discharge, NO LCD</td>
            <td id=""tdDrivenDischargeConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa levels mcb discharge home ltc dcyes trerror"" id=""trDCLastDay"">
            <td id=""tdDCLastDay"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCLastDay"" onchange=""DCNOMNC('save');"" onkeyup=""DCNOMNC('save');"" />
            </td>
            <td>Last Covered Day (LCD)</td>
            <td id=""tdDCLastDayConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa mcb discharge home ltc dcyes trerror"" id=""trDCNOMNC"">
            <td id=""tdDCNOMNC"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCNOMNC"" onchange=""DCNOMNC('save')"" onkeyup=""DCNOMNC('save')"" />
            </td>
            <td>
                NOMNC Issued on
                <div class=""tooltipcss"">
            ");
            WriteLiteral("        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c975738", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstext"">3 day notice required.</span>
                </div>
            </td>
            <td id=""tdDCNOMNCConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""dcoverride trerror"" id=""trDOOR"">
            <td id=""tdDOOR"" class=""tderror"">
                <input id=""txtDOOR"" type=""text"" class=""txtbox"" maxlength=""500"" onkeyup=""DCOverride()""  />
            </td>
            <td>Reason not completed timely</td>
            <td id=""tdDOORConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa discharge ltc trerror"" style=""border:none"" id=""trDCABN"">
            <td class=""tderror"" id=""tdDCABN"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtDCABN"" onchange=""datecheck('DCABN')"" onkeyup=""datecheck('DCABN')"" />
            </td>
            <td>ABN Issued On</td>
            <td id=""tdDCABNConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</di");
            WriteLiteral(@"v>


<button class=""collapsible"" style=""background-color:lightblue"" id=""btnMDS"">
    <table style=""width:100%"">
        <tr>
            <td>MDS</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MDSComplete""></td>
        </tr>
    </table>
</button>
<div class=""content"" style=""border: 1px solid black"" id=""MDSContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">
        <tr class=""pay pdpm hmoa levels mcb trerror"" id=""trMDSPayment"">
            <td id=""tdMDSPayment"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSPayment"" onchange=""ddcheck('MDSPayment')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c978665", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c979603", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c980578", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                </select>\r\n            </td>\r\n            <td>\r\n                Payment Information on this line Affects Billing Next Month\r\n                <div class=\"tooltipcssbtm\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c981752", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"" style=""width:500px"">
                        Select Yes, if the assessment on this line or this particular payment method (such as levels)
                        will impact billing next month. If the resident has multiple assessments only select yes to the assessment
                        that will impact billing the next month. If multiple Yes responses for the same resident occur, the next month will
                        not generate correctly.<br /><br />Select No if the assessment or patient will not impact billing the following month.
                    </span>
                </div>
            </td>
            <td id=""tdMDSPaymentConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARD"">
            <td id=""tdMDSARD"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARD"" onchange=""datecheck('MDSARD')"" onkeyup=""datecheck('MDSARD')"" />
           ");
            WriteLiteral(@" </td>
            <td>ARD</td>
            <td id=""tdMDSARDConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""pay pdpm hmoa trerror"" id=""trMDSAssessmentType"">
            <td id=""tdMDSAssessmentType"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSAssessmentType"" onchange=""ddcheck('MDSAssessmentType')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c984334", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c985272", async() => {
                WriteLiteral("5 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c986250", async() => {
                WriteLiteral("IPA");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c987226", async() => {
                WriteLiteral("14 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c988205", async() => {
                WriteLiteral("30 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c989184", async() => {
                WriteLiteral("60 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c990163", async() => {
                WriteLiteral("90 day");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c991142", async() => {
                WriteLiteral("COT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c992118", async() => {
                WriteLiteral("EOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c993094", async() => {
                WriteLiteral("SOT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Assessment Type</td>
            <td id=""tdMDSAssessmentTypeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSHIPPS"">
            <td id=""tdMDSHIPPS"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSHIPPS"" onkeyup=""textcheck('MDSHIPPS')"" />
            </td>
            <td>HIPPS Code</td>
            <td id=""tdMDSHIPPSConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSUnbillDays"">
            <td id=""tdMDSUnbillDays"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMDSUnbillDays"" disabled=""disabled"" value=""0"" onkeyup=""numdaysinter(); mdsadddays('save')"" />
            </td>
            <td>Number of Unbillable Days due to Interrupted Stay/Skip days</td>
            <td id=""tdMDSUnbillDaysConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id");
            WriteLiteral(@"=""trMDSARDStart"">
            <td id=""tdMDSARDStart"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDStart"" onchange=""datecheck('MDSARDStart'); mdsadddays('save')"" onkeyup=""datecheck('MDSARDStart'); mdsadddays('save')"" />
            </td>
            <td>ARD Assessment Coverage Start Date</td>
            <td id=""tdMDSARDStartConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSARDEnd"">
            <td id=""tdMDSARDEnd"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtMDSARDEnd"" onchange=""datecheck('MDSARDEnd'); mdsadddays('save')"" onkeyup=""datecheck('MDSARDEnd'); mdsadddays('save')"" />
            </td>
            <td>ARD Assessment Coverage End Date</td>
            <td id=""tdMDSARDEndConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSNumDays"">
            <td id=""tdMDSNumDays"" class=""tderror"">
                <input type=""t");
            WriteLiteral(@"ext"" class=""txtbox"" id=""txtMDSNumDays"" disabled=""disabled"" />
            </td>
            <td>ARD Number of Days Billed</td>
            <td id=""tdMDSNumDaysConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSTransmitted"">
            <td id=""tdMDSTransmitted"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTransmitted"" onchange=""cbcheck('MDSTransmitted')"" />
            </td>
            <td>MDS Transmitted and Accepted</td>
            <td id=""tdMDSTransmittedConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSCarePlan"">
            <td id=""tdMDSCarePlan"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSCarePlan"" onchange=""cbcheck('MDSCarePlan')"" />
            </td>
            <td>Care Plan Supports MDS, Skilled Service</td>
            <td id=""tdMDSCarePlanConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSPT");
            WriteLiteral(@"OT"">
            <td id=""tdMDSPTOT"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSPTOT"" onchange=""cbcheck('MDSPTOT')"" />
            </td>
            <td>ARD look-back documentation supports PT/OT CMG </td>
            <td id=""tdMDSPTOTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSSLP"">
            <td id=""tdMDSSLP"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSSLP"" onchange=""cbcheck('MDSSLP')"" />
            </td>
            <td>ARD look-back documentation supports SLP CMG </td>
            <td id=""tdMDSSLPConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""pay pdpm hmoa trerror"" id=""trMDSNTA"">
            <td id=""tdMDSNTA"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNTA"" onchange=""cbcheck('MDSNTA')"" />
            </td>
            <td>ARD look-back documentation supports NTA CMG </td>
            <td id=""tdMDSNTAConfirm"" class=""confirmed""></td>
        </tr>");
            WriteLiteral(@"

        <tr class=""pay pdpm hmoa trerror"" style=""border:none"" id=""trMDSNursing"">
            <td id=""tdMDSNursing"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSNursing"" onchange=""cbcheck('MDSNursing')"" />
            </td>
            <td>ARD Look-back documentation supports Nursing CMG </td>
            <td id=""tdMDSNursingConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>

<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMDSTherapy"">
    <table style=""width:100%"">
        <tr>
            <td>MDS/Therapy</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MDSTherapyComplete""></td>
        </tr>
    </table>
</button>

<div class=""content yes"" style=""border: 1px solid black"" id=""MDSTherapyContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDST5Day"">
            <td id=""tdMDST5Da");
            WriteLiteral(@"y"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDST5Day"" onchange=""cbcheck('MDST5Day')"" />
            </td>
            <td>5-Day PPS - Total Days, Minutes, and Distinct Days verified  </td>
            <td id=""tdMDST5DayConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTDischarge"">
            <td id=""tdMDSTDischarge"" class=""tderror"">
                <input type=""checkbox"" id=""cbMDSTDischarge"" onchange=""cbcheck('MDSTDischarge')"" />
            </td>
            <td>Discharge PPS MDS - Total Days, Minutes, and Distinct Days verified  </td>
            <td id=""tdMDSTDischargeConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTST"">
            <td id=""tdMDSTST"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTST"" onchange=""ddcheck('MDSTST')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9100555", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9101494", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9102471", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>ST Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTSTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMDSTOT"">
            <td id=""tdMDSTOT"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTOT"" onchange=""ddcheck('MDSTOT')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9103860", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9104799", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9105776", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>OT Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTOTConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" style=""border:none"" id=""trMDSTPT"">
            <td id=""tdMDSTPT"" class=""tderror"">
                <select class=""txtbox"" id=""ddMDSTPT"" onchange=""ddcheck('MDSTPT')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9107187", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9108126", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9109103", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>PT Percent (%) of individual Minutes during stay > 75%</td>
            <td id=""tdMDSTPTConfirm"" class=""confirmed""></td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>


<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnMedicalRecords"">
    <table style=""width:100%"">
        <tr>
            <td>Medical Records</td>
            <td style=""text-align:right; padding-right:50px;"" id=""MedicalRecordsComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""MedicalRecordsContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"" id=""tblMR"">

        <tr class=""yes pay pdpm hmoa levels trerror"" id=""trMRConsent"">
            <td id=""tdMRConsent"" class=""tderror"">
                <select class=""txtbox"" id=""ddMRConsent"" onchange=""ddcheck('MRConsent'); MRConsentReason('save')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9111112", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9112051", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9113028", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Consent to Treat</td>
            <td id=""tdMRConsentConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMRConsentReason"">
            <td id=""tdMRConsentReason"" class=""tderror"">
                <input type=""text"" id=""txtMRConsentReason"" class=""txtbox"" onkeyup=""textcheck('MRConsentReason')"" />
            </td>
            <td>Remedy for no consent to treat</td>
            <td id=""tdMRConsentReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror"" id=""trMRInitialQues"">
            <td id=""tdMRInitialQues"" class=""tderror"">
                <select class=""txtbox"" id=""ddMRInitialQues"" onchange=""ddcheck('MRInitialQues'); checkcert('MRInitial', 'Initial Cert')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9114868", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9115807", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9116784", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there an Initial Cert?</td>
            <td id=""tdMRInitialQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMRInitialDue"">
            <td id=""tdMRInitialDue"" class=""tderror"">
                <input id=""txtMRInitialDueCert""");
            BeginWriteAttribute("value", " value=\"", 40199, "\"", 40241, 1);
#nullable restore
#line 1015 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 40207, Html.Raw(ViewData["InitialCert"]), 40207, 34, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMRInitialDue"" onchange=""datecheck('MRInitialDue'); mrinitialcheck('MRInitial')"" onkeyup=""datecheck('MRInitialDue'); mrinitialcheck('MRInitial')"" />
            </td>
            <td>Initial Cert - Date Completed (<b>Due no later than ");
#nullable restore
#line 1018 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                                               Write(Html.Raw(ViewData["InitialCert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b>)</td>
            <td id=""tdMRInitialDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMRInitialReason"">
            <td id=""tdMRInitialReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMRInitialReason"" onchange=""textcheck('MRInitialReason')"" onkeyup=""textcheck('MRInitialReason')"" />
            </td>
            <td id=""tdMRInitialReasonText""></td>
            <td id=""tdMRInitialReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror"" id=""trMR1ReCertQues"">
            <td id=""tdMR1ReCertQues"" class=""tderror"">
                <select class=""txtbox"" id=""ddMR1ReCertQues"" onchange=""ddcheck('MR1ReCertQues'); checkcert('MR1ReCert', '1st Re-Cert')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9120084", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9121023", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9122000", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a 1st Re-Cert?</td>
            <td id=""tdMR1ReCertQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR1ReCertDue"">
            <td id=""tdMR1ReCertDue"" class=""tderror"">
                <input id=""txtMR1ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 41872, "\"", 41909, 1);
#nullable restore
#line 1045 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
WriteAttributeValue("", 41880, Html.Raw(ViewData["ReCert"]), 41880, 29, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR1ReCertDue"" onchange=""datecheck('MR1ReCertDue'); mrinitialcheck('MR1ReCert'); mrnextcheck(1)"" onkeyup=""datecheck('MR1ReCertDue'); mrinitialcheck('MR1ReCert'); mrnextcheck(1)"" />
            </td>
            <td>1st Re-Cert - Date Completed (<b>Due no later than ");
#nullable restore
#line 1048 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
                                                              Write(Html.Raw(ViewData["ReCert"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</b>)</td>
            <td id=""tdMR1ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR1ReCertReason"">
            <td id=""tdMR1ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR1ReCertReason"" onchange=""textcheck('MR1ReCertReason')"" onkeyup=""textcheck('MR1ReCertReason')"" />
            </td>
            <td id=""tdMR1ReCertReasonText""></td>
            <td id=""tdMR1ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR2ReCertQues"">
            <td id=""tdMR2ReCertQues"" class=""tderror"">
                <select class=""txtbox"" id=""ddMR2ReCertQues"" onchange=""ddcheck('MR2ReCertQues'); checkcert('MR2ReCert', '2nd Re-Cert')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9125329", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9126268", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9127245", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a 2nd Re-Cert?</td>
            <td id=""tdMR2ReCertQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR2ReCertDue"">
            <td id=""tdMR2ReCertDue"" class=""tderror"">
                <input id=""txtMR2ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 43577, "\"", 43585, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR2ReCertDue"" onchange=""datecheck('MR2ReCertDue'); mrinitialcheck('MR2ReCert'); mrnextcheck(2)"" onkeyup=""datecheck('MR2ReCertDue'); mrinitialcheck('MR2ReCert'); mrnextcheck(2)"" />
            </td>
            <td>2nd Re-Cert - Date Completed (<b>Due no later than <span id=""txtMR2ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR2ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR2ReCertReason"">
            <td id=""tdMR2ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR2ReCertReason"" onchange=""textcheck('MR2ReCertReason')"" onkeyup=""textcheck('MR2ReCertReason')"" />
            </td>
            <td id=""tdMR2ReCertReasonText""></td>
            <td id=""tdMR2ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR3ReCertQues"">
            <t");
            WriteLiteral("d id=\"tdMR3ReCertQues\" class=\"tderror\">\r\n                <select class=\"txtbox\" id=\"ddMR3ReCertQues\" onchange=\"ddcheck(\'MR3ReCertQues\'); checkcert(\'MR3ReCert\', \'3rd Re-Cert\')\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9130036", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9130975", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9131952", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a 3rd Re-Cert?</td>
            <td id=""tdMR3ReCertQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR3ReCertDue"">
            <td id=""tdMR3ReCertDue"" class=""tderror"">
                <input id=""txtMR3ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 45268, "\"", 45276, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR3ReCertDue"" onchange=""datecheck('MR3ReCertDue'); mrinitialcheck('MR3ReCert'); mrnextcheck(3)"" onkeyup=""datecheck('MR3ReCertDue'); mrinitialcheck('MR3ReCert'); mrnextcheck(3)"" />
            </td>
            <td>3rd Re-Cert - Date Completed (<b>Due no later than <span id=""txtMR3ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR3ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR3ReCertReason"">
            <td id=""tdMR3ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR3ReCertReason"" onchange=""textcheck('MR3ReCertReason')"" onkeyup=""textcheck('MR3ReCertReason')"" />
            </td>
            <td id=""tdMR3ReCertReasonText""></td>
            <td id=""tdMR3ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR4ReCertQues"">
            <t");
            WriteLiteral("d id=\"tdMR4ReCertQues\" class=\"tderror\">\r\n                <select class=\"txtbox\" id=\"ddMR4ReCertQues\" onchange=\"ddcheck(\'MR4ReCertQues\'); checkcert(\'MR4ReCert\', \'4th Re-Cert\')\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9134743", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9135682", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9136659", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a 4th Re-Cert?</td>
            <td id=""tdMR4ReCertQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR4ReCertDue"">
            <td id=""tdMR4ReCertDue"" class=""tderror"">
                <input id=""txtMR4ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 46959, "\"", 46967, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR4ReCertDue"" onchange=""datecheck('MR4ReCertDue'); mrinitialcheck('MR4ReCert'); mrnextcheck(4)"" onkeyup=""datecheck('MR4ReCertDue'); mrinitialcheck('MR4ReCert'); mrnextcheck(4)"" />
            </td>
            <td>4th Re-Cert - Date Completed (<b>Due no later than <span id=""txtMR4ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR4ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR4ReCertReason"">
            <td id=""tdMR4ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR4ReCertReason"" onchange=""textcheck('MR4ReCertReason')"" onkeyup=""textcheck('MR4ReCertReason')"" />
            </td>
            <td id=""tdMR4ReCertReasonText""></td>
            <td id=""tdMR4ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR5ReCertQues"">
            <td ");
            WriteLiteral("id=\"tdMR5ReCertQues\" class=\"tderror\">\r\n                <select class=\"txtbox\" id=\"ddMR5ReCertQues\" onchange=\"ddcheck(\'MR5ReCertQues\'); checkcert(\'MR5ReCert\', \'5th Re-Cert\')\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9139448", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9140387", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9141364", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a 5th Re-Cert?</td>
            <td id=""tdMR5ReCertQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR5ReCertDue"">
            <td id=""tdMR5ReCertDue"" class=""tderror"">
                <input id=""txtMR5ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 48648, "\"", 48656, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR5ReCertDue"" onchange=""datecheck('MR5ReCertDue'); mrinitialcheck('MR5ReCert'); mrnextcheck(5)"" onkeyup=""datecheck('MR5ReCertDue'); mrinitialcheck('MR5ReCert'); mrnextcheck(5)"" />
            </td>
            <td>5th Re-Cert - Date Completed (<b>Due no later than <span id=""txtMR5ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR5ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR5ReCertReason"">
            <td id=""tdMR5ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR5ReCertReason"" onchange=""textcheck('MR5ReCertReason')"" onkeyup=""textcheck('MR5ReCertReason')"" />
            </td>
            <td id=""tdMR5ReCertReasonText""></td>
            <td id=""tdMR5ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>


        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR6ReCertQues"">
            <td ");
            WriteLiteral("id=\"tdMR6ReCertQues\" class=\"tderror\">\r\n                <select class=\"txtbox\" id=\"ddMR6ReCertQues\" onchange=\"ddcheck(\'MR6ReCertQues\'); checkcert(\'MR6ReCert\', \'6th Re-Cert\')\">\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9144153", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9145092", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9146069", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a 6th Re-Cert?</td>
            <td id=""tdMR6ReCertQuesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa trerror mroverride"" id=""trMR6ReCertDue"">
            <td id=""tdMR6ReCertDue"" class=""tderror"">
                <input id=""txtMR6ReCertDueCert""");
            BeginWriteAttribute("value", " value=\"", 50337, "\"", 50345, 0);
            EndWriteAttribute();
            WriteLiteral(@" class=""hidden"" />
                <input type=""text"" class=""txtbox txtdate"" id=""txtMR6ReCertDue"" onchange=""datecheck('MR6ReCertDue'); mrinitialcheck('MR6ReCert')"" onkeyup=""datecheck('MR6ReCertDue'); mrinitialcheck('MR6ReCert')"" />
            </td>
            <td>6th Re-Cert - Date Completed (<b>Due no later than <span id=""txtMR6ReCertDueCertText""></span></b>)</td>
            <td id=""tdMR6ReCertDueConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""mroverride trerror"" id=""trMR6ReCertReason"">
            <td id=""tdMR6ReCertReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtMR6ReCertReason"" onchange=""textcheck('MR6ReCertReason')"" onkeyup=""textcheck('MR6ReCertReason')"" />
            </td>
            <td id=""tdMR6ReCertReasonText""></td>
            <td id=""tdMR6ReCertReasonConfirm"" class=""confirmed""></td>
        </tr>




        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trMRPrimary"">
            <td id=""tdMRPrimary"" class=""tderror""");
            WriteLiteral(@">
                <input type=""checkbox"" id=""cbMRPrimary"" onchange=""cbcheck('MRPrimary')"" />
            </td>
            <td>Primary Dx in I0020B matches Primary Dx on UB04</td>
            <td id=""tdMRPrimaryConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa levels mcb trerror"" id=""trMROther"">
            <td id=""tdMROther"" class=""tderror"">
                <input type=""checkbox"" id=""cbMROther"" onchange=""cbcheck('MROther')"" />
            </td>
            <td>Other ICD-10s sequenced to support skilled services on UB04</td>
            <td id=""tdMROtherConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes pay pdpm hmoa levels mcb trerror"" style=""border:none"" id=""trMRTherapy"">
            <td id=""tdMRTherapy"" class=""tderror"">
                <input type=""checkbox"" id=""cbMRTherapy"" onchange=""cbcheck('MRTherapy')"" />
            </td>
            <td>Therapy Treatment Diagnosis is present to support claim</td>
            <td id=""tdMRTherap");
            WriteLiteral(@"yConfirm"" class=""confirmed""></td>
        </tr>

    </table>
    <div style=""height:20px""></div>
</div>

<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnTherapy"">
    <table style=""width:100%"">
        <tr>
            <td>Therapy/Medical Records</td>
            <td style=""text-align:right; padding-right:50px;"" id=""TherapyComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""TherapyContent"">
    <div style=""height:20px""></div>
    <table class=""TableClick content"">

        <tr class=""yes  trerror"" id=""trPTEvalDateDecs"">
            <td id=""tdPTEvalDateDecs"" class=""tderror"">
                <select id=""ddPTEvalDateDecs"" class=""txtbox"" onchange=""ddcheck('PTEvalDateDecs'); Evalchange('PT');"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9150619", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9151558", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9152535", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a PT Evaluation Date?</td>
            <td id=""tdPTEvalDateDecsConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTEvalDateDecsReason"">
            <td id=""tdPTEvalDateDecsReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTEvalDateDecsReason"" onkeyup=""textcheck('PTEvalDateDecsReason')"" />
            </td>
            <td>Reason for no PT Evaluation Date</td>
            <td id=""tdPTEvalDateDecsReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTEvalDate"">
            <td id=""tdPTEvalDate"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalDate"" onchange=""datecheck('PTEvalDate'); therapycheck30('PTEval', 'PT Evaluation'); ptchecksame('PT')"" onkeyup=""datecheck('PTEvalDate'); therapycheck30('PTEval', 'PT Evaluation'); ptchecksame('PT')"" />
        ");
            WriteLiteral(@"    </td>
            <td>PT Evaluation Date</td>
            <td id=""tdPTEvalDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" id=""trPTEvalSignDecs"">
            <td id=""tdPTEvalSignDecs"" class=""tderror"">
                <select id=""ddPTEvalSignDecs"" class=""txtbox"" onchange=""ddcheck('PTEvalSignDecs'); Evalsigned('PT');"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9154991", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9155930", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9156907", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a PT Evaluation Order Signed?</td>
            <td id=""tdPTEvalSignDecsConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTEvalSign"">
            <td id=""tdPTEvalSign"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTEvalSign"" onchange=""datecheck('PTEvalSign'); therapycheck30('PTEval', 'PT Evaluation')"" onkeyup=""datecheck('PTEvalSign'); therapycheck30('PTEval', 'PT Evaluation')"" />
            </td>
            <td>
                PT Evaluation - Date Order Signed
                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c9158589", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"">
                        Order signed should be within 30 days of evaluation date.
                    </span>
                </div>
            </td>
            <td id=""tdPTEvalSignConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTEvalReason"">
            <td id=""tdPTEvalReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTEvalReason"" onkeyup=""textcheck('PTEvalReason')"" />
            </td>
            <td id=""tdPTEvalReasonText""></td>
            <td id=""tdPTEvalReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTClarDateDecs"">
            <td id=""tdPTClarDateDecs"" class=""tderror"">
                <select id=""ddPTClarDateDecs"" class=""txtbox"" onchange=""ddcheck('PTClarDateDecs'); ClarDateDecs('PT');"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9160694", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9161633", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9162610", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a PT Clarification Date?</td>
            <td id=""tdPTClarDateDecsConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTClarDate"">
            <td id=""tdPTClarDate"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarDate"" onchange=""datecheck('PTClarDate'); ptchecksame('PT'); therapycheck30('PTClar', 'PT Clarification'); checkreclar('PT', '')"" onkeyup=""datecheck('PTClarDate'); ptchecksame('PT'); therapycheck30('PTClar', 'PT Clarification'); checkreclar('PT', '')"" />
            </td>
            <td>
                PT Clarification Date
                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c9164365", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"">
                        Clarification Date should be the same as Evaluation Date
                    </span>
                </div>
            </td>
            <td id=""tdPTClarDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes trerror therapyvisable"" id=""trPTClarDateReason"">
            <td id=""tdPTClarDateReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarDateReason"" onkeyup=""textcheck('PTClarDateReason')"" />
            </td>
            <td>Reason Why dates are not the same</td>
            <td id=""tdPTClarDateReasonConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTClarSignDecs"">
            <td id=""tdPTClarSignDecs"" class=""tderror"">
                <select id=""ddPTClarSignDecs"" class=""txtbox"" onchange=""ddcheck('PTClarSignDecs'); ClarSignDecs('PT');"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9166495", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9167434", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9168411", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a PT Clarification Sign?</td>
            <td id=""tdPTClarSignDecsConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes trerror therapyvisable"" id=""trPTClarSign"">
            <td id=""tdPTClarSign"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTClarSign"" onchange=""datecheck('PTClarSign'); therapycheck30('PTClar', 'PT Clarification')"" onkeyup=""datecheck('PTClarSign'); therapycheck30('PTClar', 'PT Clarification')"" />
            </td>
            <td>
                PT Clarification - Date Order Signed
                <div class=""tooltipcssbtm"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e3bad2f84906026eaba19ed1cde44465201722c9170096", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                    <span class=""tooltipcsstextbtm"">
                        Order signed should be within 30 days of clarification date.
                    </span>
                </div>
            </td>
            <td id=""tdPTClarSignConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTClarReason"">
            <td id=""tdPTClarReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTClarReason"" onkeyup=""textcheck('PTClarReason')"" />
            </td>
            <td id=""tdPTClarReasonText""></td>
            <td id=""tdPTClarReasonConfirm"" class=""confirmed""></td>
        </tr>



        <tr class=""yes  trerror therapyvisable"" id=""trPTDischargeDecs"">
            <td id=""tdPTDischargeDecs"" class=""tderror"">
                <select id=""ddPTDischargeDecs"" class=""txtbox"" onchange=""Dischargeed('PT'); ddcheck('PTDischargeDecs');"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9172211", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9173150", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9174127", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Is there a PT Discharge Date?</td>
            <td id=""tdPTDischargeDecsConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTDischargeDate"">
            <td id=""tdPTDischargeDate"" class=""tderror"">
                <input type=""text"" class=""txtbox txtdate"" id=""txtPTDischargeDate"" onkeyup=""datecheck('PTDischargeDate')"" onchange=""datecheck('PTDischargeDate')"" />
            </td>
            <td>PT Discharge Date</td>
            <td id=""tdPTDischargeDateConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror therapyvisable"" id=""trPTDischargeReason"">
            <td id=""tdPTDischargeReason"" class=""tderror"">
                <input type=""text"" class=""txtbox"" id=""txtPTDischargeReason"" onkeyup=""textcheck('PTDischargeReason')"" />
            </td>
            <td>Reason for no discharge date</td>
            <td id=""tdPTDischargeReasonConfirm"" class=""confirmed""></t");
            WriteLiteral(@"d>
        </tr>
    </table>


    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">


        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTEvalDate"" /></td>
            <td>OT Evaluation Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTEvalSign"" /></td>
            <td>OT Evaluation - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTClarDate"" /></td>
            <td>OT Clarification Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTClarSign"" /></td>
            <td>OT Clarification - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTReclar1Date"" /></td>
            <td>OT Reclarification #1 Date</td>
        </");
            WriteLiteral(@"tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTReclar1Sign"" /></td>
            <td>OT Reclarification #1 - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTReclar2Date"" /></td>
            <td>OT Reclarification #2 Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTReclar2Sign"" /></td>
            <td>OT Reclarification #2 - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTReclar3Date"" /></td>
            <td>OT Reclarification #3 Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtOTReclar3Sign"" /></td>
            <td>OT Reclarification #3 - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"">
       ");
            WriteLiteral(@"     <td><input type=""text"" class=""txtbox"" id=""txtOTDischargeDate"" /></td>
            <td>OT Discharge Date</td>
        </tr>
    </table>

    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">


        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPEvalDate"" /></td>
            <td>SLP Evaluation Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPEvalSign"" /></td>
            <td>SLP Evaluation - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPClarDate"" /></td>
            <td>SLP Clarification Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPClarSign"" /></td>
            <td>SLP Clarification - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input");
            WriteLiteral(@" type=""text"" class=""txtbox"" id=""txtSLPReclar1Date"" /></td>
            <td>SLP Reclarification #1 Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPReclar1Sign"" /></td>
            <td>SLP Reclarification #1 - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPReclar2Date"" /></td>
            <td>SLP Reclarification #2 Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPReclar2Sign"" /></td>
            <td>SLP Reclarification #2 - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPReclar3Date"" /></td>
            <td>SLP Reclarification #3 Date</td>
        </tr>

        <tr class=""yes  trerror"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPReclar3Sign"" /></td>
            <t");
            WriteLiteral(@"d>SLP Reclarification #3 - Date Order Signed</td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"">
            <td><input type=""text"" class=""txtbox"" id=""txtSLPDischargeDate"" /></td>
            <td>SLP Discharge Date</td>
        </tr>
    </table>

    <hr style=""border-top: 2px solid black"" />
    <table class=""TableClick content"">
        <tr class=""yes  trerror"" style=""border:none"">
            <td><input type=""checkbox"" /></td>
            <td>Therapy Units/Visits verified for each discipline with UB04</td>
        </tr>
    </table>
    <div style=""height:20px""></div>
</div>

<button class=""collapsible yes"" style=""background-color:lightblue"" id=""btnNursing"">
    <table style=""width:100%"">
        <tr>
            <td>Nursing</td>
            <td style=""text-align:right; padding-right:50px;"" id=""NursingComplete""></td>
        </tr>
    </table>
</button>
<div class=""content yes"" style=""border: 1px solid black"" id=""NursingContent"">
    <div style=""height:20p");
            WriteLiteral(@"x""></div>
    <table class=""TableClick content"">
        <tr class=""yes  trerror"" style=""border:none"" id=""trNDailySkill"">
            <td id=""tdNDailySkill"" class=""tderror"">
                <select class=""txtbox"" id=""ddNDailySkill"" onchange=""ddcheck('NDailySkill')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9181992", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9182931", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9183907", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Daily Skilled Doc present during dates of service</td>
            <td id=""tdNDailySkillConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNIVCharges"">
            <td id=""tdNIVCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNIVCharges"" onchange=""ddcheck('NIVCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9185322", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9186261", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9187237", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9188214", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>IV Charges on UB04 have MD order</td>
            <td id=""tdNIVChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNSupplies"">
            <td id=""tdNSupplies"" class=""tderror"">
                <select class=""txtbox"" id=""ddNSupplies"" onchange=""ddcheck('NSupplies')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9189607", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9190546", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9191522", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9192499", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Supplies on UB04 have MD order</td>
            <td id=""tdNSuppliesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNPharmacy"">
            <td id=""tdNPharmacy"" class=""tderror"">
                <select class=""txtbox"" id=""ddNPharmacy"" onchange=""ddcheck('NPharmacy')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9193889", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9194828", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9195804", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9196781", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Pharmacy Charges on UB-04 have MD order</td>
            <td id=""tdNPharmacyConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNO2Charges"">
            <td id=""tdNO2Charges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNO2Charges"" onchange=""ddcheck('NO2Charges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9198184", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9199123", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9200099", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9201076", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>O2 Charges on UB04 have MD order</td>
            <td id=""tdNO2ChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNLabCharges"">
            <td id=""tdNLabCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNLabCharges"" onchange=""ddcheck('NLabCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9202477", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9203416", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9204392", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9205369", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Lab Charges on UB04 have MD order</td>
            <td id=""tdNLabChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNRayCharges"">
            <td id=""tdNRayCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNRayCharges"" onchange=""ddcheck('NRayCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9206772", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9207711", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9208687", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9209664", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>X-Ray charges on UB04 have MD order</td>
            <td id=""tdNRayChargesConfirm"" class=""confirmed""></td>
        </tr>

        <tr class=""yes  trerror"" style=""border:none"" id=""trNEquipCharges"">
            <td id=""tdNEquipCharges"" class=""tderror"">
                <select class=""txtbox"" id=""ddNEquipCharges"" onchange=""ddcheck('NEquipCharges')"">
                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9211077", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9212016", async() => {
                WriteLiteral("No");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9212992", async() => {
                WriteLiteral("Yes");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                    ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "e3bad2f84906026eaba19ed1cde44465201722c9213969", async() => {
                WriteLiteral("N/A");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                </select>
            </td>
            <td>Equipment charges on UB04 have MD order</td>
            <td id=""tdNEquipChargesConfirm"" class=""confirmed""></td>
        </tr>

    </table>
    <div style=""height:20px""></div>
</div>

<script>
    function showdel() {
        $(""#showdel"").dialog({
            resizable: false,
            height: ""auto"",
            width: ""350px"",
            modal: true
        });
    };
</script>

<div style=""visibility:hidden; height:0px; display:none"">
    <div id=""showdel"" title=""Delete Record?"">
        <div>Are you sure you want to delete this record?</div>
        <br />
        <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-primary"" onclick=""delrecord()"">Delete</button>
            <button type=""button"" class=""btn btn-secondary"" onclick=""$('#showdel').dialog('close');"">Close</button>
        </div>
    </div>
</div>


<script>
    function shownotes() {
        document.getElementById('txt");
            WriteLiteral(@"EditNotes').value = document.getElementById('divNotes').innerHTML
        $(""#shownotes"").dialog({
            resizable: false,
            height: ""auto"",
            width: ""500px"",
            modal: true
        });
    };
</script>

<div style=""visibility:hidden; height:0px; display:none"">
    <div id=""shownotes"" title=""Edit Notes"">
        <textarea class=""txtbox"" style=""height:200px;"" id=""txtEditNotes"">

            </textarea>
        <br />
        <div class=""modal-footer"">
            <button type=""submit"" class=""btn btn-primary"" onclick=""savenotes()"">Save</button>
            <button type=""button"" class=""btn btn-secondary"" onclick=""$('#shownotes').dialog('close');"">Close</button>
        </div>
    </div>
</div>

<script>
    function showteam() {

        $(""#showteam"").dialog({
            resizable: false,
            height: ""auto"",
            width: ""500px"",
            modal: true
        });
    };
</script>

<div style=""visibility:hidden; height:0px; di");
            WriteLiteral("splay:none\">\r\n    <div id=\"showteam\" title=\"Edit Team\">\r\n        <div style=\"overflow-y:auto; max-height:200px;\" id=\"divTeamEdit\">\r\n            ");
#nullable restore
#line 1734 "C:\Users\daniel.stump\Documents\GitHub\WebForms-Core\MicrosoftGraphAspNetCoreConnectSample\Views\TripleCheck\Record.cshtml"
       Write(Html.Raw(ViewData["teameditdata"]));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        </div>
        <div style=""height:10px""></div>
        <button type=""submit"" class=""btn btn-primary"" onclick=""removeteam()"">Remove Selected</button>
        <hr />
        <table>
            <tr>
                <td>Name</td>
                <td>
                    <input class=""txtbox"" maxlength=""99"" id=""txtTeamName"" />
                    <div id=""validateTeamName"" class=""hidden"">Name Required</div>
                </td>
            </tr>
            <tr>
                <td style=""padding-right:15px; padding-top:10px"">Credentials</td>
                <td style=""padding-top:10px;"">
                    <input class=""txtbox"" maxlength=""99"" id=""txtTeamCred"" />
                    <div id=""validateTeamCred"" class=""hidden"">Credential Required</div>
                </td>
            </tr>
        </table>

        <div style=""height:10px""></div>
        <button type=""submit"" class=""btn btn-primary"" onclick=""saveteam()"">Add Member</button>
        <div style=""height:10px""></div>");
            WriteLiteral(@"
        <div class=""modal-footer"">
            <button type=""button"" class=""btn btn-secondary"" onclick=""getteam()"">Close</button>
        </div>
    </div>
</div>


<script>
    var coll = document.getElementsByClassName(""collapsible"");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener(""click"", function () {
            this.classList.toggle(""active"");
            var content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + ""px"";
            }
        });
    }

    function delrecord() {
        document.getElementById('txtRecID').value = document.getElementById('txtID').value
        document.getElementById('delreport').click()
    }

    function getteam() {
        $.get(""/TripleCheck/getteam"", { passid: document.getElementById('txtID').value }, function (data) { document.getElementById('d");
            WriteLiteral(@"ivTeam').innerHTML = data });
        $('#showteam').dialog('close');
    }

    function removeteam() {
        var markedCheckbox = document.getElementsByName('checkremove');
        for (var checkbox of markedCheckbox) {
            if (checkbox.checked)
                $.get(""/TripleCheck/removeteam"", { strid: document.getElementById('txtID').value, strTeamID: checkbox.value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
        }
    }

    function saveteam() {
        var errors = '0'

        if (document.getElementById('txtTeamName').value == '') {
            document.getElementById('validateTeamName').className = 'validation'
            errors = '1'
        } else {
            document.getElementById('validateTeamName').className = 'hidden'
        }

        if (document.getElementById('txtTeamCred').value == '') {
            document.getElementById('validateTeamCred').className = 'validation'
            errors = '1'
        } else {
");
            WriteLiteral(@"            document.getElementById('validateTeamCred').className = 'hidden'
        }

        if (errors == '0') {
            $.get(""/TripleCheck/saveteam"", { strid: document.getElementById('txtID').value, strName: document.getElementById('txtTeamName').value, strCred: document.getElementById('txtTeamCred').value }, function (data) { document.getElementById('divTeamEdit').innerHTML = data });
            document.getElementById('txtTeamCred').value = ''
            document.getElementById('txtTeamName').value = ''
        }
    }

    function savenotes() {
        $.get(""/TripleCheck/savenotes"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtEditNotes').value }, function (data) { });
        document.getElementById('divNotes').innerHTML = document.getElementById('txtEditNotes').value
        $('#shownotes').dialog('close')
    }

    function startdate() {
        if (moment(document.getElementById('txtStartDate').value).isValid()) {
            $.g");
            WriteLiteral(@"et(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: document.getElementById('txtStartDate').value, strdetail: 'startstay' }, function (data) { });
            document.getElementById('ValidationStartDate').className = 'hidden'
        } else {
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'null', strdetail: 'startstay' }, function (data) { });
            document.getElementById('ValidationStartDate').className = 'validation'
        }
    }


    function addassessment(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd.value, strdetail: 'additionalassessment' }, function (data) { });

        var y = document.getElementsByClassName(""yes"");
        var i;
        if (dd.value == ""No"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""addaddition"");
            }
        } else {
            for (i = 0; i ");
            WriteLiteral(@"< y.length; i++) {
                y[i].classList.add(""addaddition"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document.getElementById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById");
            WriteLiteral(@"('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classList.contains('active')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function paymenttype(dd) {
        $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: dd.value, strdetail: 'paymenttype' }, function (data) { });
        var x = document.getElementsByClassName(""pay"");
        var b;
        for (b = 0; b < x.length; b++) {
            x[b].classList.add(""paytype"");
        }
        if (dd.value == ""PDPM"") {
            var y = document.getElementsByClassName(""pdpm"");
           ");
            WriteLiteral(@" var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""HMO A"") {
            var y = document.getElementsByClassName(""hmoa"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""Levels"") {
            var y = document.getElementsByClassName(""levels"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }
        if (dd.value == ""MCB"") {
            var y = document.getElementsByClassName(""mcb"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""paytype"");
            }
        }

        if (document.getElementById('ddPaymentType').value == ""Levels"" && document.getElementById('ddAddAssessment').value == 'Yes') {
            document.getElement");
            WriteLiteral(@"ById('btnBusinessOffice').classList.add('hidden')
        } else {
            document.getElementById('btnBusinessOffice').classList.remove('hidden')
        }

        if (document.getElementById('btnBusinessOffice').classList.contains('active')) {
            document.getElementById('btnBusinessOffice').click()
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('btnDCInfo').click()
        }

        if (document.getElementById('btnMDS').classList.contains('active')) {
            document.getElementById('btnMDS').click()
        }

        if (document.getElementById('btnMDSTherapy').classList.contains('active')) {
            document.getElementById('btnMDSTherapy').click()
        }

        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('btnMedicalRecords').click()
        }

        if (document.getElementById('btnTherapy').classLis");
            WriteLiteral(@"t.contains('active')) {
            document.getElementById('btnTherapy').click()
        }

        if (document.getElementById('btnNursing').classList.contains('active')) {
            document.getElementById('btnNursing').click()
        }

        checkcomplete()
    }

    function checkqualifying() {
        if (moment(document.getElementById('txtBOStayFrom').value).isValid() && moment(document.getElementById('txtBOStayTo').value).isValid()) {
            var dchange = datediff(parseDate(document.getElementById('txtBOStayFrom').value), parseDate(document.getElementById('txtBOStayTo').value))
            if (dchange < 3) {
                document.getElementById('tdBOStayFrom').className = ""tderror""
                document.getElementById('tdBOStayTo').className = ""tderror""
                document.getElementById('trBOStayFrom').classList.add(""trerror"")
                document.getElementById('trBOStayTo').classList.add(""trerror"")
                removechanges('BOStayTo')
            ");
            WriteLiteral(@"    removechanges('BOStayFrom')
            } else {
                document.getElementById('tdBOStayFrom').className = """"
                document.getElementById('tdBOStayTo').className = """"
                document.getElementById('trBOStayFrom').classList.remove(""trerror"")
                document.getElementById('trBOStayTo').classList.remove(""trerror"")
                savechanges('BOStayTo', document.getElementById('txtBOStayTo').value, 'textbox')
                savechanges('BOStayFrom', document.getElementById('txtBOStayFrom').value, 'textbox')
            }
        } else {
            document.getElementById('tdBOStayFrom').className = ""tderror""
            document.getElementById('tdBOStayTo').className = ""tderror""
            document.getElementById('trBOStayFrom').classList.add(""trerror"")
            document.getElementById('trBOStayTo').classList.add(""trerror"")
            removechanges('BOStayTo')
            removechanges('BOStayFrom')
        }
        checkcomplete()
    }
");
            WriteLiteral(@"
    function patientleave(dd, type) {
        if (dd.value == 'Yes') {
            document.getElementById('tdMDSUnbillDays').className = ""tderror""
            document.getElementById('trMDSUnbillDays').classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"").disabled = false;
            document.getElementById(""txtMDSUnbillDays"").value = ''
            document.getElementById('tdBOPatient').className = ''
            document.getElementById('trBOPatient').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient', 'Yes', 'dropdown')
            }            
            removechanges('MDSUnbillDays')
        } else if (dd.value == 'No') {
            document.getElementById('tdMDSUnbillDays').className = """"
            document.getElementById('trMDSUnbillDays').classList.remove(""trerror"")
            document.getElementById(""txtMDSUnbillDays"").disabled = true;
            document.getElementById(""txtMDSUnbillDays"").value = '");
            WriteLiteral(@"0'
            document.getElementById('tdBOPatient').className = ''
            document.getElementById('trBOPatient').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('BOPatient', 'No', 'dropdown')
                savechanges('MDSUnbillDays', '0', 'textbox')
            }
        } else {
            document.getElementById('tdMDSUnbillDays').className = ""tderror""
            document.getElementById('trMDSUnbillDays').classList.add(""trerror"")
            document.getElementById(""txtMDSUnbillDays"").disabled = true;
            document.getElementById(""txtMDSUnbillDays"").value = ''
            document.getElementById('tdBOPatient').className = 'tderror'
            document.getElementById('trBOPatient').classList.add(""trerror"")
            removechanges('BOPatient')
            removechanges('MDSUnbillDays')
        }
        checkcomplete()
    }

    function numdaysinter() {
        if (document.getElementById(""txtMDSUnbillDays"").value == """") {");
            WriteLiteral(@"
            document.getElementById('tdMDSUnbillDays').className = ""tderror""
            document.getElementById('trMDSUnbillDays').classList.add(""trerror"")
            removechanges('MDSUnbillDays')
        } else {
            document.getElementById('tdMDSUnbillDays').className = """"
            document.getElementById('trMDSUnbillDays').classList.remove(""trerror"")
            savechanges('MDSUnbillDays', document.getElementById(""txtMDSUnbillDays"").value, 'textbox')
        }
        checkcomplete()
    }

    function MRConsentReason(type) {
        if (type == 'save') {
            document.getElementById('txtMRConsentReason').value = ''
            removechanges('MRConsentReason')
            document.getElementById('trMRConsentReason').classList = 'trerror'
            document.getElementById('tdMRConsentReason').classList = 'tderror'
            document.getElementById('tdMRConsentReasonConfirm').innerHTML = ''
        }

        if (document.getElementById('ddMRConsent').value == ");
            WriteLiteral(@"'No') {
            document.getElementById('trMRConsentReason').classList.remove('mroverride')
        } else {
            document.getElementById('trMRConsentReason').classList.add('mroverride')
        }

        mrresize();
    }

    function MRReCert(certnum, posnum) {
        var certnump = certnum
        
        try {
            do {

                certnump = certnump + 1
                
                var totry = document.getElementById('txtMR' + certnump.toString() + 'ReCert').parentNode.parentNode.rowIndex;
                document.getElementById(""tblMR"").deleteRow(totry);

                var totry2 = document.getElementById('txtMR' + certnump.toString() + 'Reason').parentNode.parentNode.rowIndex;
                document.getElementById(""tblMR"").deleteRow(totry2);
                
                removechangescert('MR' + certnump.toString() + 'ReCert')
                removechangescert('MR' + certnump.toString() + 'Reason')
                
            } while (ce");
            WriteLiteral(@"rtnump > 0)
        } catch { }

        if (moment(document.getElementById('txtMR' + certnum.toString() + 'ReCert').value).isValid()) {
            document.getElementById('tdMR' + certnum.toString() + 'ReCert').classList.remove('tderror')
            document.getElementById('trMR' + certnum.toString() + 'ReCert').classList.remove('trerror')            

            var ds = Date.parse(document.getElementById('txtMR' + certnum.toString() + 'ReCert').value)
            var d = new Date(ds)
            d.setDate(d.getDate() + 30)

            savechangescert('MR' + certnum.toString() + 'ReCert', document.getElementById('txtMR' + certnum.toString() + 'ReCert').value, document.getElementById('txtMRDue' + certnum.toString()).innerHTML, posnum)

            var duedate = Date.parse(document.getElementById('txtMRDue' + certnum.toString()).innerHTML)
            
            if (ds > duedate) {
                document.getElementById(""trMR"" + (certnum).toString() + ""Reason"").classList.remove('mroverr");
            WriteLiteral(@"ide')
                savechangescert('MR' + (certnum).toString() + 'Reason', '', 'active', posnum +1)
            } else {
                document.getElementById(""trMR"" + (certnum).toString() + ""Reason"").classList.add('mroverride')
                savechangescert('MR' + (certnum).toString() + 'Reason', '', 'reason', posnum +1)
            }

            var maxmonth = Date.parse(document.getElementById('txtINTMonth').value)

            if (d < maxmonth) {
                var table = document.getElementById(""tblMR"");

                var row = table.insertRow(posnum + 2)

                row.setAttribute(""id"", ""trMR"" + (certnum + 1).toString() + ""ReCert"");
                row.className = 'trerror'
                var cell1 = row.insertCell(0)
                cell1.setAttribute(""id"", ""tdMR"" + (certnum + 1).toString() + ""ReCert"");
                cell1.className = ""tderror""
                var cell2 = row.insertCell(1)
                cell1.innerHTML = '<input type=""text"" class=""txtbox txt");
            WriteLiteral(@"date"" id=""txtMR' + (certnum + 1).toString() + 'ReCert"" onchange=""MRReCert(' + (certnum + 1).toString() + ', ' + (posnum + 2).toString() + ')"" onkeyup=""MRReCert(' + (certnum + 1).toString() + ', ' + (posnum + 2).toString() + ')"" />';
                cell2.innerHTML = (certnum + 1).toString() + ' Re-Cert - Completed (<b>Due <span id=\""txtMRDue' + (certnum + 1).toString() + '\"">' + (d.getMonth() + 1) + ""/"" + d.getDate() + ""/"" + d.getFullYear() + '</span></b>)';
                var cell3 = row.insertCell(2)
                cell3.setAttribute(""id"", ""tdMR"" + (certnum + 1).toString() + ""ReCertConfirm"");
                cell3.className = ""confirmed""

                savechangescert('MR' + (certnum + 1).toString() + 'ReCert', '', (d.getMonth() + 1) + ""/"" + d.getDate() + ""/"" + d.getFullYear(), posnum + 2)

                var rowc = table.insertRow(posnum + 3)

                rowc.setAttribute(""id"", ""trMR"" + (certnum + 1).toString() + ""Reason"");
                rowc.className = 'mroverride trerror'
       ");
            WriteLiteral(@"         var cell1 = rowc.insertCell(0)
                cell1.setAttribute(""id"", ""tdMR"" + (certnum + 1).toString() + ""Reason"");
                cell1.className = ""tderror""
                var cell2 = rowc.insertCell(1)
                cell1.innerHTML = '<input type=""text"" class=""txtbox"" id=""txtMR' + (certnum + 1).toString() + 'Reason"" onchange=""MRReCertReason(' + (certnum + 1).toString() + ', ' + (posnum + 3).toString() + ')"" onkeyup=""MRReCertReason(' + (certnum + 1).toString() + ', ' + (posnum + 3).toString() + ')"" />';
                cell2.innerHTML = 'Reason Re-Cert is past due';
                var cell3 = rowc.insertCell(2)
                cell3.setAttribute(""id"", ""tdMR"" + (certnum + 1).toString() + ""ReasonConfirm"");
                cell3.className = ""confirmed""

                savechangescert('MR' + (certnum + 1).toString() + 'Reason', '', 'reason', posnum + 3)
            }


        } else {
            document.getElementById('tdMR' + certnum.toString() + 'ReCert').classList.add('tde");
            WriteLiteral(@"rror')
            document.getElementById('trMR' + certnum.toString() + 'ReCert').classList.add('trerror')
            savechangescert('MR' + (certnum).toString() + 'ReCert', '', document.getElementById('txtMRDue' + (certnum).toString()).innerHTML, posnum)
            document.getElementById('tdMR' + certnum.toString() + 'ReCertConfirm').innerHTML = """";
        }
        checkcomplete()
        mrresize()
        $("".txtdate"").inputmask(""99/99/9999"", { 'placeholder': 'MM/DD/YYYY' });
        $("".txtdate"").datepicker();
    }

    function MRReCertReason(certnum, posnum) {
        if (document.getElementById('txtMR' + (certnum).toString() + 'Reason').value == '') {
            document.getElementById('tdMR' + certnum.toString() + 'Reason').classList.add('tderror')
            document.getElementById('trMR' + certnum.toString() + 'Reason').classList.add('trerror')
        } else {
            document.getElementById('tdMR' + certnum.toString() + 'Reason').classList.remove('tderror')
          ");
            WriteLiteral(@"  document.getElementById('trMR' + certnum.toString() + 'Reason').classList.remove('trerror')
        }
        savechangescert('MR' + certnum.toString() + 'Reason', document.getElementById('txtMR' + certnum.toString() + 'Reason').value, 'active', posnum)
    }

    function DCNOMNC(type) {
        if (type == 'save') {
            document.getElementById('trDOOR').classList.add('trerror')
            document.getElementById('tdDOOR').classList.add('tderror')
            document.getElementById('txtDOOR').value = ''
            document.getElementById('tdDOORConfirm').innerHTML = ''
            removechanges('DOOR')
        }
        
        if (moment(document.getElementById('txtDCNOMNC').value).isValid() && moment(document.getElementById('txtDCLastDay').value).isValid()) {
            var dchange = datediff(parseDate(document.getElementById('txtDCNOMNC').value), parseDate(document.getElementById('txtDCLastDay').value))
            if (dchange < 3) {
                document.getElementById(");
            WriteLiteral(@"'tdDCLastDay').className = """"
                document.getElementById('tdDCNOMNC').className = """"
                document.getElementById('trDCLastDay').classList.remove(""trerror"")
                document.getElementById('trDCNOMNC').classList.remove(""trerror"")
                if (type == 'save') {
                    savechanges('DCNOMNC', document.getElementById('txtDCNOMNC').value, 'textbox')
                    savechanges('DCLastDay', document.getElementById('txtDCLastDay').value, 'textbox')
                }

                document.getElementById('trDOOR').classList.add('dcoverride')

                document.getElementById('trDOOR').classList.remove('dcoverride')
                


            } else {
                document.getElementById('tdDCLastDay').className = """"
                document.getElementById('tdDCNOMNC').className = """"
                document.getElementById('trDCLastDay').classList.remove(""trerror"")
                document.getElementById('trDCNOMNC').classList.");
            WriteLiteral(@"remove(""trerror"")
                if (type == 'save') {
                    savechanges('DCNOMNC', document.getElementById('txtDCNOMNC').value, 'textbox')
                    savechanges('DCLastDay', document.getElementById('txtDCLastDay').value, 'textbox')
                }
                document.getElementById('trDOOR').classList.add('dcoverride')
                
            }
            
        } else {
            document.getElementById('tdDCLastDay').className = ""tderror""
            document.getElementById('tdDCNOMNC').className = ""tderror""
            document.getElementById('trDCLastDay').classList.add(""trerror"")
            document.getElementById('trDCNOMNC').classList.add(""trerror"")
            document.getElementById('trDOOR').classList.add('dcoverride')
            removechanges('DCNOMNC')
            removechanges('DCLastDay')
            
        }

        
        

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            docum");
            WriteLiteral(@"ent.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }

        checkcomplete()
    }

    function mrinitialcheck(type) {
        if (moment(document.getElementById('txt'+type+'Due').value).isValid()) {
            var sd = parseDate(document.getElementById('txt'+type+'Due').value)
            var ed = parseDate(document.getElementById('txt'+type+'DueCert').value)
            
            if (sd > ed) {
                
                document.getElementById('tr' + type +'Reason').classList.remove('mroverride')

                if (document.getElementById('txt' + type +'Reason').value == '') {
                    document.getElementById('tr' + type +'Reason').classList.add('trerror')
                    document.getElementById('td' + type +'Reason').classList.add('tderror')
                    document.getElementById('txt' + type +'Reason').value = '';
                    document.getElementById('td' + type +'ReasonConfirm').i");
            WriteLiteral(@"nnerHTML = ''
                    removechanges(type + 'Reason')
                } else {

                    document.getElementById('tr'+type+'Reason').classList.remove('trerror')
                    document.getElementById('td'+type+'Reason').classList.remove('tderror')

                }

            } else {
                
                document.getElementById('tr' + type +'Reason').classList.add('mroverride')
                document.getElementById('tr' +  type + 'Reason').classList.add('trerror')
                document.getElementById('td' + type + 'Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'Reason').value = '';
                document.getElementById('td' + type + 'ReasonConfirm').innerHTML = ''
                removechanges(type + 'Reason')
            }

        } else {
            document.getElementById('tr' + type + 'Reason').classList.add('mroverride')
            document.getElementById('tr' + type + 'Reason').classList.");
            WriteLiteral(@"add('trerror')
            document.getElementById('td' + type + 'Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'Reason').value = '';
            document.getElementById('td' + type + 'ReasonConfirm').innerHTML = ''
            removechanges(type + 'Reason')
        }
    }

    function mrnextcheck(passnum) {
        if (moment(document.getElementById('txtMR' + passnum.toString() + 'ReCertDue').value).isValid()) {
            var ds = Date.parse(document.getElementById('txtMR' + passnum.toString() + 'ReCertDue').value)
            var d = new Date(ds)
            d.setDate(d.getDate() + 30)

            passnum = passnum + 1
            document.getElementById('trMR' + passnum.toString() + 'ReCertQues').classList.remove('mroverride')
            document.getElementById('txtMR' + passnum.toString() + 'ReCertDueCert').value = (d.getMonth() + 1) + ""/"" + d.getDate() + ""/"" + d.getFullYear()
            document.getElementById('txtMR' + passnum.toString() + '");
            WriteLiteral(@"ReCertDueCertText').innerHTML = (d.getMonth() + 1) + ""/"" + d.getDate() + ""/"" + d.getFullYear()
        } else {
            do {
                passnum++
                if (passnum <= 6) {
                    document.getElementById('trMR' + passnum.toString() + 'ReCertQues').classList.add('mroverride')
                    document.getElementById('trMR' + passnum.toString() + 'ReCertQues').classList.add('trerror')
                    document.getElementById('tdMR' + passnum.toString() + 'ReCertQues').classList.add('tderror')
                    document.getElementById('ddMR' + passnum.toString() + 'ReCertQues').selectedIndex = '0'
                    document.getElementById('tdMR' + passnum.toString() + 'ReCertQuesConfirm').innerHTML = ''
                    removechanges('MR' + passnum.toString() + 'ReCertQues')

                    document.getElementById('trMR' + passnum.toString() + 'ReCertDue').classList.add('mroverride')
                    document.getElementById('trMR' + passnum.toStrin");
            WriteLiteral(@"g() + 'ReCertDue').classList.add('trerror')
                    document.getElementById('tdMR' + passnum.toString() + 'ReCertDue').classList.add('tderror')
                    document.getElementById('txtMR' + passnum.toString() + 'ReCertDue').value = ''
                    document.getElementById('tdMR' + passnum.toString() + 'ReCertDueConfirm').innerHTML = ''
                    removechanges('MR' + passnum.toString() + 'ReCertDue')

                    document.getElementById('trMR' + passnum.toString() + 'ReCertReason').classList.add('mroverride')
                    document.getElementById('trMR' + passnum.toString() + 'ReCertReason').classList.add('trerror')
                    document.getElementById('tdMR' + passnum.toString() + 'ReCertReason').classList.add('tderror')
                    document.getElementById('txtMR' + passnum.toString() + 'ReCertReason').value = ''
                    document.getElementById('tdMR' + passnum.toString() + 'ReCertReasonConfirm').innerHTML = ''
           ");
            WriteLiteral(@"         document.getElementById('tdMR' + passnum.toString() + 'ReCertReasonText').innerHTML = ''
                    removechanges('MR' + passnum.toString() + 'ReCertReason')
                }
            }
            while (passnum <= 6)

        }
        mrresize()
    }

    function ClarSignDecs(type) {
        if (document.getElementById('dd' + type + 'ClarSignDecs').value == '') {

            document.getElementById('tr' + type + 'ClarSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarSign').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSign').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSign').value = '';
            removechanges(type + 'ClarSign')

            document.getElementById('tr' + type + 'ClarReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarReason').classList.add('trerror')
            document.getElementById");
            WriteLiteral(@"('td' + type + 'ClarReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarReason').value = '';
            removechanges(type + 'ClarReason')
        }

        if (document.getElementById('dd' + type + 'ClarSignDecs').value == 'No') {
            document.getElementById('tr' + type + 'ClarSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarSign').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSign').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSign').value = '';
            removechanges(type + 'ClarSign')

            document.getElementById('tr' + type + 'ClarReason').classList.remove('therapyvisable')
            document.getElementById('td' + type + 'ClarReasonText').innerHTML = 'Reason for no Clarification Sign'
        }

        if (document.getElementById('dd' + type + 'ClarSignDecs').value == 'Yes') {

            document.getElementById");
            WriteLiteral(@"('tr' + type + 'ClarReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarReason').value = '';
            removechanges(type + 'ClarReason')

            document.getElementById('tr' + type + 'ClarSign').classList.remove('therapyvisable')
        }
    }

    function checkreclar(type, renum) {
        var checks = 1

        if (moment(document.getElementById('txt' + type + renum.toString() + 'ClarDate').value).isValid()) {
            var ed = parseDate(document.getElementById('txt' + type + renum.toString() + 'ClarDate').value)

            if (moment(document.getElementById('txt' + type + 'DischargeDate').value).isValid()) {
                var sd = parseDate(document.getElementById('txt' + type + 'DischargeDate').value)
                if (datediff(ed, sd) < 28) {
   ");
            WriteLiteral(@"                 checks = 0
                }
            }

            if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
                var sd = parseDate(document.getElementById('txtDCLastDay').value)
                if (datediff(ed, sd) < 28) {
                    checks = 0
                }
            }

            if (moment(document.getElementById('txtINTMonth').value).isValid()) {
                var sd = parseDate(document.getElementById('txtINTMonth').value)
                if (datediff(ed, sd) < 28) {
                    checks = 0
                }
            }
        } else {
            //remove other reclar
        }

        

        if (checks == 1) {

        }
    }

    function checkcert(type, text) {
        
        if (document.getElementById('dd' + type + 'Ques').value == '') {
            document.getElementById('tr' + type + 'Due').classList.add('mroverride')
            document.getElementById('tr' + type + 'Due').classLis");
            WriteLiteral(@"t.add('trerror')
            document.getElementById('td' + type + 'Due').classList.add('tderror')
            document.getElementById('txt' + type + 'Due').value = ''
            removechanges(type + 'Due')
            
            document.getElementById('tr' + type + 'Reason').classList.add('mroverride')
            document.getElementById('tr' + type + 'Reason').classList.add('trerror')
            document.getElementById('td' + type + 'Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'Reason').value = ''
            removechanges(type + 'Reason')
        }

        if (document.getElementById('dd' + type + 'Ques').value == 'No') {
            document.getElementById('tr' + type + 'Due').classList.add('mroverride')
            document.getElementById('tr' + type + 'Due').classList.add('trerror')
            document.getElementById('td' + type + 'Due').classList.add('tderror')
            document.getElementById('txt' + type + 'Due').value = ''
         ");
            WriteLiteral(@"   removechanges(type + 'Due')

            document.getElementById('tr' + type + 'Reason').classList.remove('mroverride')
            document.getElementById('td' + type + 'ReasonText').innerHTML = 'Reason for no ' + text
        }

        if (document.getElementById('dd' + type + 'Ques').value == 'Yes') {
            document.getElementById('tr' + type + 'Due').classList.remove('mroverride')
            document.getElementById('td' + type + 'ReasonText').innerHTML = 'Reason why '+text+' is past due date'
            mrinitialcheck(type)
        }
        
    }


    function Dischargeed(type) {
        
        if (document.getElementById('dd' + type + 'DischargeDecs').value == '') {
            
            document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'DischargeDate').classList.add('trerror')
            document.getElementById('td' + type + 'DischargeDate').classList.add('tderror')
         ");
            WriteLiteral(@"   document.getElementById('txt' + type + 'DischargeDate').value = '';
            removechanges(type + 'DischargeDate')

            document.getElementById('tr' + type + 'DischargeReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'DischargeReason').classList.add('trerror')
            document.getElementById('td' + type + 'DischargeReason').classList.add('tderror')
            document.getElementById('txt' + type + 'DischargeReason').value = '';
            removechanges(type + 'DischargeReason')
        }

        if (document.getElementById('dd' + type + 'DischargeDecs').value == 'No') {
            document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'DischargeDate').classList.add('trerror')
            document.getElementById('td' + type + 'DischargeDate').classList.add('tderror')
            document.getElementById('txt' + type + 'DischargeDate').value = '';
      ");
            WriteLiteral(@"      removechanges(type + 'DischargeDate')

            document.getElementById('tr' + type + 'DischargeReason').classList.remove('therapyvisable')
        }

        if (document.getElementById('dd' + type + 'DischargeDecs').value == 'Yes') {
            
            document.getElementById('tr' + type + 'DischargeReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'DischargeReason').classList.add('trerror')
            document.getElementById('td' + type + 'DischargeReason').classList.add('tderror')
            document.getElementById('txt' + type + 'DischargeReason').value = '';
            removechanges(type + 'DischargeReason')

            document.getElementById('tr' + type + 'DischargeDate').classList.remove('therapyvisable')
        }
    }

    function Evalchange(type) {
        
        if (document.getElementById('dd' + type + 'EvalDateDecs').value == '' || document.getElementById('dd' + type + 'EvalDateDecs').value == 'No') {
          ");
            WriteLiteral(@"  
            document.getElementById('tr' + type + 'EvalDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDate').classList.add('trerror')
            document.getElementById('td' + type + 'EvalDate').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalDate').value = '';
            removechanges(type + 'EvalDate')
            
            document.getElementById('tr' + type + 'EvalSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalSign').classList.add('trerror')
            document.getElementById('td' + type + 'EvalSign').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalSign').value = '';
            removechanges(type + 'EvalSign')

            document.getElementById('tr' + type + 'EvalReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalReason').classList.add('trerror')
            document.getElement");
            WriteLiteral(@"ById('td' + type + 'EvalReason').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalReason').value = '';
            removechanges(type + 'EvalReason')

            document.getElementById('tr' + type + 'ClarDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate').value = '';
            removechanges(type + 'ClarDate')

            document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateReason').value = '';
            removechanges(type + 'ClarDateReason')

            docum");
            WriteLiteral(@"ent.getElementById('tr' + type + 'ClarSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarSign').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSign').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSign').value = '';
            removechanges(type + 'ClarSign')

            document.getElementById('tr' + type + 'ClarReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarReason').value = '';
            removechanges(type + 'ClarReason')

            document.getElementById('tr' + type + 'DischargeDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'DischargeDate').classList.add('trerror')
            document.getElementById('td' + type ");
            WriteLiteral(@"+ 'DischargeDate').classList.add('tderror')
            document.getElementById('txt' + type + 'DischargeDate').value = '';
            removechanges(type + 'DischargeDate')

            document.getElementById('tr' + type + 'EvalSignDecs').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalSignDecs').classList.add('trerror')
            document.getElementById('td' + type + 'EvalSignDecs').classList.add('tderror')
            setdropdowns('dd' + type + 'EvalSignDecs', '')
            removechanges(type + 'EvalSignDecs')

            document.getElementById('tr' + type + 'ClarDateDecs').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateDecs').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateDecs').classList.add('tderror')
            setdropdowns('dd' + type + 'ClarDateDecs', '')
            removechanges(type + 'ClarDateDecs')

            document.getElementById('tr' + type + 'Disc");
            WriteLiteral(@"hargeDecs').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'DischargeDecs').classList.add('trerror')
            document.getElementById('td' + type + 'DischargeDecs').classList.add('tderror')
            setdropdowns('dd' + type + 'DischargeDecs', '')
            removechanges(type + 'DischargeDecs')
        }

        if (document.getElementById('dd' + type + 'EvalDateDecs').value == '') {
            document.getElementById('tr' + type + 'EvalDateDecsReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateDecsReason').classList.add('trerror')
            document.getElementById('td' + type + 'EvalDateDecsReason').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalDateDecsReason').value = '';
            removechanges(type + 'EvalDateDecsReason')
        }

        if (document.getElementById('dd' + type + 'EvalDateDecs').value == 'No') {
            document.getElementById('tr' + typ");
            WriteLiteral(@"e + 'EvalDateDecsReason').classList.remove('therapyvisable')
        }

        if (document.getElementById('dd' + type + 'EvalDateDecs').value == 'Yes') {
            document.getElementById('tr' + type + 'EvalDateDecsReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalDateDecsReason').classList.add('trerror')
            document.getElementById('td' + type + 'EvalDateDecsReason').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalDateDecsReason').value = '';
            removechanges(type + 'EvalDateDecsReason')

            document.getElementById('tr' + type + 'EvalDate').classList.remove('therapyvisable')
            document.getElementById('tr' + type + 'EvalSignDecs').classList.remove('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateDecs').classList.remove('therapyvisable')
            document.getElementById('tr' + type + 'DischargeDecs').classList.remove('therapyvisable')
        }
   ");
            WriteLiteral(@" }

    function Evalsigned(type) {
        if (document.getElementById('dd' + type + 'EvalSignDecs').value == '') {
            document.getElementById('tr' + type + 'EvalSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalSign').classList.add('trerror')
            document.getElementById('td' + type + 'EvalSign').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalSign').value = '';
            removechanges(type + 'EvalSign')

            document.getElementById('tr' + type + 'EvalReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalReason').classList.add('trerror')
            document.getElementById('td' + type + 'EvalReason').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalReason').value = '';
            removechanges(type + 'EvalReason')
        }

        if (document.getElementById('dd' + type + 'EvalSignDecs').value == 'No') {
        ");
            WriteLiteral(@"    document.getElementById('tr' + type + 'EvalSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalSign').classList.add('trerror')
            document.getElementById('td' + type + 'EvalSign').classList.add('tderror')
            document.getElementById('txt' + type + 'EvalSign').value = '';
            removechanges(type + 'EvalSign')

            document.getElementById('tr' + type + 'EvalReason').classList.remove('therapyvisable')
            document.getElementById('td' + type + 'EvalReasonText').innerHTML = 'Reason for no signed PT Evaluation'
        }

        if (document.getElementById('dd' + type + 'EvalSignDecs').value == 'Yes') {
            document.getElementById('tr' + type + 'EvalReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'EvalReason').classList.add('trerror')
            document.getElementById('td' + type + 'EvalReason').classList.add('tderror')
            document.getElementById('txt' + ");
            WriteLiteral(@"type + 'EvalReason').value = '';
            removechanges(type + 'EvalReason')

            document.getElementById('tr' + type + 'EvalSign').classList.remove('therapyvisable')
        }
    }

    function ClarDateDecs(type) {
        if (document.getElementById('dd' + type + 'ClarDateDecs').value == '') {
            document.getElementById('tr' + type + 'ClarDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate').value = '';
            removechanges(type + 'ClarDate')

            document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
            document.");
            WriteLiteral(@"getElementById('txt' + type + 'ClarDateReason').value = '';
            removechanges(type + 'ClarDateReason')

            document.getElementById('tr' + type + 'ClarSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarSign').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSign').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSign').value = '';
            removechanges(type + 'ClarSign')

            document.getElementById('tr' + type + 'ClarReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarReason').value = '';
            removechanges(type + 'ClarReason')

            document.getElementById('tr' + type + 'ClarSignDecs').classList.add('therapyvisable')
          ");
            WriteLiteral(@"  document.getElementById('tr' + type + 'ClarSignDecs').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSignDecs').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSignDecs').value = '';
            removechanges(type + 'ClarSignDecs')
        }

        if (document.getElementById('dd' + type + 'ClarDateDecs').value == 'No') {
            document.getElementById('tr' + type + 'ClarDate').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDate').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDate').value = '';
            removechanges(type + 'ClarDate')

            document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
            document.getElementBy");
            WriteLiteral(@"Id('td' + type + 'ClarDateReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateReason').value = '';
            removechanges(type + 'ClarDateReason')

            document.getElementById('tr' + type + 'ClarSign').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarSign').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSign').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSign').value = '';
            removechanges(type + 'ClarSign')

            document.getElementById('tr' + type + 'ClarSignDecs').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarSignDecs').classList.add('trerror')
            document.getElementById('td' + type + 'ClarSignDecs').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarSignDecs').value = '';
            removechanges(type + 'ClarSignDecs')

            docum");
            WriteLiteral(@"ent.getElementById('tr' + type + 'ClarReason').classList.remove('therapyvisable')
            document.getElementById('td' + type + 'ClarReasonText').innerHTML = 'Reason for no Clarification Date'
        }

        if (document.getElementById('dd' + type + 'ClarDateDecs').value == 'Yes') {
            document.getElementById('tr' + type + 'ClarReason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDate').classList.remove('therapyvisable')
            document.getElementById('tr' + type + 'ClarSignDecs').classList.remove('therapyvisable')
        }
    }

    function setdropdowns(dd, option) {
        var desiredValue = option
        var el = document.getElementById(dd);
        for (var i = 0; i < el.options.length; i++) {
            if (el.options[i].text == desiredValue) {
                el.selectedIndex = i;
            }
        }
    }

    function ptchecksame(type) {
        if (moment(document.getElementById('txt' + type + 'EvalDate')");
            WriteLiteral(@".value).isValid() && moment(document.getElementById('txt' + type +'ClarDate').value).isValid()) {
            var sd = parseDate(document.getElementById('txt' + type +'EvalDate').value)
            var ed = parseDate(document.getElementById('txt' + type +'ClarDate').value)
    
            if (document.getElementById('txt' + type +'EvalDate').value !== document.getElementById('txt' + type +'ClarDate').value) {
                document.getElementById('tr' + type+ 'ClarDateReason').classList.remove('therapyvisable')
                
                if (document.getElementById('txt' + type + 'ClarDateReason').value == '') {
                    document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
                    document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
                    document.getElementById('txt' + type + 'ClarDateReason').value = '';
                    document.getElementById('td' + type + 'ClarDateReasonConfirm').innerHTML ");
            WriteLiteral(@"= ''
                    removechanges(type + 'ClarDateReason')
                } else {
                    
                    document.getElementById('tr' + type +'ClarDateReason').classList.remove('trerror')
                    document.getElementById('td' + type +'ClarDateReason').classList.remove('tderror')
                    
                }

            } else {
                document.getElementById('tr' + type + 'ClarDateReason').classList.add('therapyvisable')
                document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
                document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
                document.getElementById('txt' + type + 'ClarDateReason').value = '';
                document.getElementById('td' + type + 'ClarDateReasonConfirm').innerHTML = ''
                removechanges(type + 'ClarDateReason')
            }

        } else {
            document.getElementById('tr' + type + 'ClarDateReaso");
            WriteLiteral(@"n').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'ClarDateReason').classList.add('trerror')
            document.getElementById('td' + type + 'ClarDateReason').classList.add('tderror')
            document.getElementById('txt' + type + 'ClarDateReason').value = '';
            document.getElementById('td' + type + 'ClarDateReasonConfirm').innerHTML = ''
            removechanges(type + 'ClarDateReason')
        }
        
    }

    function therapycheck30(type, shorttype) {
        
        if (moment(document.getElementById('txt' + type + 'Date').value).isValid() && moment(document.getElementById('txt' + type + 'Sign').value).isValid()) {
            var sd = parseDate(document.getElementById('txt' + type + 'Date').value)
            var ed = parseDate(document.getElementById('txt' + type + 'Sign').value)
            
            if (datediff(sd, ed) > 30) {
                document.getElementById('tr' + type + 'Reason').classList.remove('therapyvisable'");
            WriteLiteral(@")
                document.getElementById('td' + type + 'ReasonText').innerHTML = 'Reason '+shorttype+' is greater than 30 days'

                if (document.getElementById('txt' + type + 'Reason').value == '') {
                    document.getElementById('tr' + type + 'Reason').classList.add('trerror')
                    document.getElementById('td' + type + 'Reason').classList.add('tderror')
                    document.getElementById('txt' + type + 'Reason').value = '';
                    document.getElementById('td' + type + 'ReasonConfirm').innerHTML = ''
                    removechanges(type + 'Reason')
                } else {
                    
                    document.getElementById('tr' + type + 'Reason').classList.remove('trerror')
                    
                    document.getElementById('td' + type + 'Reason').classList.remove('tderror')
                    
                }


            } else {
                document.getElementById('tr' + type + 'Reason'");
            WriteLiteral(@").classList.add('therapyvisable')
                document.getElementById('tr' + type + 'Reason').classList.add('trerror')
                document.getElementById('td' + type + 'Reason').classList.add('tderror')
                document.getElementById('txt' + type + 'Reason').value = '';
                document.getElementById('td' + type + 'ReasonConfirm').innerHTML = ''
                removechanges(type + 'Reason')
            }

        } else {
            document.getElementById('tr' + type + 'Reason').classList.add('therapyvisable')
            document.getElementById('tr' + type + 'Reason').classList.add('trerror')
            document.getElementById('td' + type + 'Reason').classList.add('tderror')
            document.getElementById('txt' + type + 'Reason').value = '';
            document.getElementById('td' + type + 'ReasonConfirm').innerHTML = ''
            removechanges(type + 'Reason')
        }
    }

    //function lastdaychange() {
    //    if (moment(document.getElementB");
            WriteLiteral(@"yId('txtDCLastDay').value).isValid()) {
    //        document.getElementById('txtMR1ReCert').disabled = false
    //        lastdaycalc()
    //    } else {
    //        document.getElementById('txtMR1ReCert').disabled = true
    //    }

        

    //    document.getElementById('txtMR1ReCert').value = ''
    //    document.getElementById('trMR1ReCert').classList.add('trerror')
    //    document.getElementById('tdMR1ReCert').classList.add('tderror')
    //    document.getElementById('tdMR1ReCertConfirm').innerHTML = ''
    //    removechanges('MR1ReCert')

    //    document.getElementById('txtMR1Reason').value = ''
    //    document.getElementById('trMR1Reason').classList.add('trerror')
    //    document.getElementById('trMR1Reason').classList.add('mroverride')
    //    document.getElementById('tdMR1Reason').classList.add('tderror')
    //    document.getElementById('tdMR1ReasonConfirm').innerHTML = ''
    //    removechanges('MR1Reason')


    //    var certnump = 3

    //");
            WriteLiteral(@"    try {
    //        do {

    //            certnump = certnump + 1

    //            var totry = document.getElementById('txtMR' + certnump.toString() + 'ReCert').parentNode.parentNode.rowIndex;
    //            document.getElementById(""tblMR"").deleteRow(totry);

    //            var totry2 = document.getElementById('txtMR' + certnump.toString() + 'Reason').parentNode.parentNode.rowIndex;
    //            document.getElementById(""tblMR"").deleteRow(totry2);

    //            removechangescert('MR' + certnump.toString() + 'ReCert')
    //            removechangescert('MR' + certnump.toString() + 'Reason')

    //        } while (certnump > 0)
    //    } catch { }
    //}

    //function lastdaycalc() {
    //    if (moment(document.getElementById('txtDCLastDay').value).isValid()) {
    //        var sd = Date.parse(document.getElementById('txtStartDate').value)
    //        var ld = Date.parse(document.getElementById('txtDCLastDay').value)

            
    //        if (date");
            WriteLiteral(@"diff(sd, ld) > 13) {
    //            document.getElementById('trMR1ReCert').classList.remove('mroverride')
    //        } else {
    //            document.getElementById('trMR1ReCert').classList.add('mroverride')
    //        }
    //        document.getElementById('txtMR1ReCert').disabled = false
    //    }

    //}

    function DCOverride() {
        
        if (document.getElementById('txtDOOR').value != '') {
            document.getElementById('tdDOOR').className = """"
            document.getElementById('trDOOR').classList.remove(""trerror"")
            savechanges('DOOR', document.getElementById('txtDOOR').value, 'textbox')
        } else {
            document.getElementById('tdDOOR').className = ""tderror""
            document.getElementById('trDOOR').classList.add(""trerror"")
            removechanges('DOOR')
        }
        checkcomplete()
    }

    function dischargeloc(dd, type) {
        var x = document.getElementsByClassName(""discharge"");
        var b;
      ");
            WriteLiteral(@"  for (b = 0; b < x.length; b++) {
            x[b].classList.add(""dischargetype"");
        }

        if (dd.value == '01 - Home' || dd.value == '06 - Home w/HH' || dd.value == '07 - AMA' || dd.value == 'Other') {
            var y = document.getElementsByClassName(""home"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dischargetype"");
            }
        }

        if (dd.value == '02 - Hospital' || dd.value == '20 - Expired' || dd.value == 'N/A - Continued Stay' || dd.value == '') {
            var y = document.getElementsByClassName(""hospital"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dischargetype"");
            }
        }

        if (dd.value == '04 - LTC') {
            var y = document.getElementsByClassName(""ltc"");
            var i;
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dischargetype"");
            }
      ");
            WriteLiteral(@"  }

        if (dd.value == '') {
            removechanges('DischargeLoc')
            document.getElementById('tdDischargeLoc').className = 'tderror'
            document.getElementById('trDischargeLoc').classList.add(""trerror"")
        } else {
            if (type == 'save'){
                savechanges('DischargeLoc', dd.value, 'dropdown')
            }
            
            document.getElementById('tdDischargeLoc').className = ''
            document.getElementById('trDischargeLoc').classList.remove(""trerror"")
        }
        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }

        checkcomplete()
    }

    function mrresize() {
        if (document.getElementById('btnMedicalRecords').classList.contains('active')) {
            document.getElementById('MedicalRecordsContent').style.maxHeight = document.getElementById");
            WriteLiteral(@"('MedicalRecordsContent').scrollHeight + ""px"";
        }
    }

    function dcyesno(dd, type) {
        var y = document.getElementsByClassName(""dcyes"");
        var i;
        if (dd.value == ""No"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.remove(""dcyesnotype"");
            }
            document.getElementById('tdDrivenDischarge').className = ''
            document.getElementById('trDrivenDischarge').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('DrivenDischarge', dd.value, 'dropdown')
            }
        } else if (dd.value == ""Yes"") {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""dcyesnotype"");
            }
            document.getElementById('tdDrivenDischarge').className = ''
            document.getElementById('trDrivenDischarge').classList.remove(""trerror"")
            if (type == 'save') {
                savechanges('DrivenDischarge', dd.value, 'dropdown')
 ");
            WriteLiteral(@"           }
        } else {
            for (i = 0; i < y.length; i++) {
                y[i].classList.add(""dcyesnotype"");
            }
            document.getElementById('tdDrivenDischarge').className = 'tderror'
            document.getElementById('trDrivenDischarge').classList.add(""trerror"")
            removechanges('DrivenDischarge')
        }

        if (document.getElementById('btnDCInfo').classList.contains('active')) {
            document.getElementById('DCContent').style.maxHeight = document.getElementById('DCContent').scrollHeight + ""px"";
        }
        checkcomplete()
    }

    function ddcheck(dd) {
        if (document.getElementById('dd' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.r");
            WriteLiteral(@"emove(""trerror"")
            savechanges(dd, document.getElementById('dd' + dd).value, 'dropdown')
        }
        checkcomplete()

    }

    function textcheck(dd) {
        if (document.getElementById('txt' + dd).value == '') {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementById('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, document.getElementById('txt' + dd).value, 'textbox')
        }
        checkcomplete()

    }

    function cbcheck(dd) {
        if (document.getElementById('cb' + dd).checked == false) {
            document.getElementById('td' + dd).className = 'tderror'
            document.getElementById('tr' + dd).classList.add(""trerror"")
            removechanges(dd)
        } else {
            document.getElementBy");
            WriteLiteral(@"Id('td' + dd).className = ''
            document.getElementById('tr' + dd).classList.remove(""trerror"")
            savechanges(dd, 'Checked', 'checkbox')
        }
        checkcomplete()

    }

    function datecheck(txt) {
        
        if (moment(document.getElementById('txt' + txt).value).isValid()) {
            document.getElementById('td' + txt).className = ''
            document.getElementById('tr' + txt).classList.remove(""trerror"")
            savechanges(txt, document.getElementById('txt' + txt).value, 'textbox')
        } else {
            document.getElementById('td' + txt).className = 'tderror'
            document.getElementById('tr' + txt).classList.add(""trerror"")
            removechanges(txt)
        }
        
        checkcomplete()

    }

    function mdsadddays(type) {
        var numdays = document.getElementById('txtMDSUnbillDays').value
        var startd = document.getElementById('txtMDSARDStart').value
        var endd = document.getElementById('txt");
            WriteLiteral(@"MDSARDEnd').value

        if (numdays != '' && moment(startd).isValid() && moment(endd).isValid()) {
            var dchange = datediff(parseDate(startd), parseDate(endd))
            var ddiff = dchange - numdays + 1
            if (ddiff < 0) {
                removechanges('MDSNumDays')
                document.getElementById('tdMDSNumDays').className = 'tderror'
                document.getElementById('trMDSNumDays').classList.add(""trerror"")
                document.getElementById('txtMDSNumDays').value = ddiff
            } else {
                document.getElementById('tdMDSNumDays').className = ''
                document.getElementById('trMDSNumDays').classList.remove(""trerror"")
                document.getElementById('txtMDSNumDays').value = ddiff
                if (type == 'save') {
                    savechanges('MDSNumDays', ddiff, 'textbox')
                }
                
            }
        } else {
            removechanges('MDSNumDays')
            document.getEl");
            WriteLiteral(@"ementById('tdMDSNumDays').className = 'tderror'
            document.getElementById('trMDSNumDays').classList.add(""trerror"")
            document.getElementById('txtMDSNumDays').value = ''
        }
        checkcomplete()
    }

    function savechanges(txt, pv, ptype) {
        var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
        var user = ""<b>Confirmed By:</b> "" + document.getElementById('txtUserName').value

        document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        $.get(""/TripleCheck/saverecords"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });
    }

    function savechangescert(txt, pv, ptype, position) {
        if (pv != '') {
            var datetime = ""<b>Confirmed:</b> "" + new Date().toLocaleString() + ""<br/>""
            var user = ""<b>Confirmed By:</b");
            WriteLiteral(@"> "" + document.getElementById('txtUserName').value

            document.getElementById('td' + txt + 'Confirm').innerHTML = datetime + user;
        }
       
        
        $.get(""/TripleCheck/saverecordscert"", { strid: document.getElementById('txtID').value, strparent: txt, strvalue: pv, strtype: ptype, strposition: position, strdate: new Date().toLocaleString(), strUser: document.getElementById('txtUserName').value }, function (data) { });
        
    }

    function removechanges(txt) {
        
        $.get(""/TripleCheck/removerecords"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });
        document.getElementById('td' + txt + 'Confirm').innerHTML = """";
    }

    function removechangescert(txt) {
        $.get(""/TripleCheck/removerecordscert"", { strid: document.getElementById('txtID').value, strparent: txt }, function (data) { });

        
    }

    function checkcomplete() {
        checkBO()
        checkDC()
        checkMDS()
");
            WriteLiteral(@"        checkMDSTherapy()
        checkMedicalRecords()
        checkTherapy()
        checkNursing()
    }

    function checkBO() {
        var y = document.getElementById(""frmBO"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('BOComplete').innerHTML = 'Not Completed'
            document.getElementById('BOComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'BusinessOffice' }, function (data) { });
        } else {
            document.getElementById('BOComplete').innerHTML = 'Completed'
            document.get");
            WriteLiteral(@"ElementById('BOComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'BusinessOffice' }, function (data) { });
        }
    }

    function checkDC() {
        var y = document.getElementById(""DCContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'dcoverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('DCComplete').innerHTML = 'Not Completed'
            document.getElementById('DCComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'false', strdetail: 'D");
            WriteLiteral(@"CInformation' }, function (data) { });
        } else {
            document.getElementById('DCComplete').innerHTML = 'Completed'
            document.getElementById('DCComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'DCInformation' }, function (data) { });
        }
    }

    function checkMDS() {
        var y = document.getElementById(""MDSContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MDSComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSComplete').className = 'notcompleted'");
            WriteLiteral(@"
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDS' }, function (data) { });
        } else {
            document.getElementById('MDSComplete').innerHTML = 'Completed'
            document.getElementById('MDSComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDS' }, function (data) { });
        }
    }

    function checkMDSTherapy() {
        var y = document.getElementById(""MDSTherapyContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementBy");
            WriteLiteral(@"Id('MDSTherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('MDSTherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MDSTherapy' }, function (data) { });
        } else {
            document.getElementById('MDSTherapyComplete').innerHTML = 'Completed'
            document.getElementById('MDSTherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MDSTherapy' }, function (data) { });
        }
    }

    function checkMedicalRecords() {
        var y = document.getElementById(""MedicalRecordsContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], ");
            WriteLiteral(@"'dcyesnotype') || hasClass(y[i], 'mroverride')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Not Completed'
            document.getElementById('MedicalRecordsComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'MedicalRecords' }, function (data) { });
        } else {
            document.getElementById('MedicalRecordsComplete').innerHTML = 'Completed'
            document.getElementById('MedicalRecordsComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'MedicalRecords' }, function (data) { });
        }
    }

    function checkTherapy() {
        var y = document.getElementById(""TherapyContent"").getElementsByClassName(""trerror"")
 ");
            WriteLiteral(@"       var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype') || hasClass(y[i], 'therapyvisable')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('TherapyComplete').innerHTML = 'Not Completed'
            document.getElementById('TherapyComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Therapy' }, function (data) { });
        } else {
            document.getElementById('TherapyComplete').innerHTML = 'Completed'
            document.getElementById('TherapyComplete').className = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Th");
            WriteLiteral(@"erapy' }, function (data) { });
        }
    }

    function checkNursing() {
        var y = document.getElementById(""NursingContent"").getElementsByClassName(""trerror"")
        var errorcounter = '0'
        var i
        for (i = 0; i < y.length; i++) {
            if (hasClass(y[i], 'paytype') || hasClass(y[i], 'addaddition') || hasClass(y[i], 'dischargetype') || hasClass(y[i], 'dcyesnotype')) {

            } else {
                errorcounter = '1'
            }
        }
        if (errorcounter == '1') {
            document.getElementById('NursingComplete').innerHTML = 'Not Completed'
            document.getElementById('NursingComplete').className = 'notcompleted'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'False', strdetail: 'Nursing' }, function (data) { });
        } else {
            document.getElementById('NursingComplete').innerHTML = 'Completed'
            document.getElementById('NursingComplete').className");
            WriteLiteral(@" = 'completed'
            $.get(""/TripleCheck/savedetails"", { strid: document.getElementById('txtID').value, stritem: 'True', strdetail: 'Nursing' }, function (data) { });
        }
    }

    function parseDate(str) {
        var mdy = str.split('/');
        return new Date(mdy[2], mdy[0] - 1, mdy[1]);
    }

    function datediff(first, second) {
        return Math.round((second - first) / (1000 * 60 * 60 * 24));
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
